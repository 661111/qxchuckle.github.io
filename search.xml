<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>给Butterfly加上顶部加载条</title>
    <url>/article/13d6481a.html</url>
    <content><![CDATA[<blockquote>
<p>效果已在本站实装，切换页面顶部有加载进度条<br>参考文章<a href="https://cloud.tencent.com/developer/article/1960734">为Hexo博客添加顶部加载条</a></p>
</blockquote>
<h1 id="引入css"><a href="#引入css" class="headerlink" title="引入css"></a>引入css</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pace</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  -webkit-user-select: none;</span><br><span class="line">  -moz-user-select: none;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace-inactive</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#e90f92</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-progress-inner</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#e90f92</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#e90f92</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1.0</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">  -o-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>) <span class="built_in">translate</span>(<span class="number">0px</span>, -<span class="number">4px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-activity</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">2px</span> transparent;</span><br><span class="line">  <span class="attribute">border-top-color</span>: <span class="number">#e90f92</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#e90f92</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">  -moz-<span class="attribute">animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">  -ms-<span class="attribute">animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">  -o-<span class="attribute">animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation</span>: pace-spinner <span class="number">400ms</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> pace-spinner &#123;</span><br><span class="line">  <span class="number">0%</span> &#123; -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  <span class="number">100%</span> &#123; -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> pace-spinner &#123;</span><br><span class="line">  <span class="number">0%</span> &#123; -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  <span class="number">100%</span> &#123; -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-o-keyframes</span> pace-spinner &#123;</span><br><span class="line">  <span class="number">0%</span> &#123; -o-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  <span class="number">100%</span> &#123; -o-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-ms-keyframes</span> pace-spinner &#123;</span><br><span class="line">  <span class="number">0%</span> &#123; -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  <span class="number">100%</span> &#123; -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> pace-spinner &#123;</span><br><span class="line">  <span class="number">0%</span> &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">  <span class="number">100%</span> &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 在下面修改进度条外观 */</span></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#1ef4fbec</span>; <span class="comment">/*进度条颜色*/</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3px</span>;<span class="comment">/* 进度条厚度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-progress-inner</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#1ef4fbce</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#1ecffbd0</span>; <span class="comment">/*阴影颜色*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-activity</span> &#123;</span><br><span class="line">  <span class="attribute">border-top-color</span>: <span class="number">#1edafbe5</span>;	<span class="comment">/*上边框颜色*/</span></span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#1ef4fbec</span>;	<span class="comment">/*左边框颜色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="引入js"><a href="#引入js" class="headerlink" title="引入js"></a>引入js</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;//cdn.bootcss.com/pace/1.0.2/pace.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>然后三连即可</strong></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Butterfly</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>FakeLocation模拟校园跑教程</title>
    <url>/article/c5d354fd.html</url>
    <content><![CDATA[<p>我们学校用的是运动世界校园，所以就用这个软件为例，其他软件差不多<br>博主测试设备：红米k40安卓11、红米6pro安卓9  </p>
<blockquote>
<p>吐槽：这软件，什么都往里塞，天天更新加广告（一指禅干掉）  </p>
</blockquote>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>1、首先是有面具<strong>Root</strong>，而非小米官方等残废root<br>2、下载万恶之源：运动世界校园<br>3、下载安装<a href="https://wwm.lanzoul.com/iMHUo057ibyb">FakeLocation1.3.0.2版本</a><br>4、下载安装<a href="https://wwm.lanzoul.com/iQ6lq057irkd">隐藏应用列表xp模块</a>我使用的版本1.6较老，但能稳定用我也没去升级<br>5、安装lsp/xp框架<br>6、下载安装<a href="https://wwm.lanzoul.com/i8RYM057ibzc">Godvip</a>  </p>
<hr>
<h1 id="隐藏防检测"><a href="#隐藏防检测" class="headerlink" title="隐藏防检测"></a>隐藏防检测</h1><h2 id="运动世界校园权限设置"><a href="#运动世界校园权限设置" class="headerlink" title="运动世界校园权限设置"></a>运动世界校园权限设置</h2><p>确保权限设置与图一致，关闭miui的模糊定位  </p>
<div><img src=/images/11-1.webp width="90%" height="90%"></div>

<h2 id="隐藏root"><a href="#隐藏root" class="headerlink" title="隐藏root"></a>隐藏root</h2><p>面具本身随机包名安装<br>面具hide对运动世界校园全勾选（如果是24版本的面具，自行去酷安找shamiko模块隐藏root教程，我还没升到24，因为我用hide就能很好地隐藏root）  </p>
<h2 id="隐藏应用列表设置"><a href="#隐藏应用列表设置" class="headerlink" title="隐藏应用列表设置"></a>隐藏应用列表设置</h2><p>推荐先看酷安详细图文：<a href="https://www.coolapk.com/feed/34458057?shareKey=YjBlYzcxNDgwMzYwNjI4OGIzZmM~">隐藏应用列表使用教程 Pro</a>  </p>
<p>简单速通：<br>1、lsp/edxp启用<strong>隐藏应用列表</strong><br>2、也许需要重启手机<br>3、点击模板管理，启用所有隐藏方式<br>4、选择要隐藏的应用，将FakeLocation、面具、lsp等搞机应用勾选<br>5、对运动校园应用模板  </p>
<div><img src=/images/11-2.webp width="100%" height="100%"></div>

<h2 id="破解FakeLocation"><a href="#破解FakeLocation" class="headerlink" title="破解FakeLocation"></a>破解FakeLocation</h2><p>lsp启用Godvip，模块对FakeLocation起作用  </p>
<h2 id="FakeLocation设置"><a href="#FakeLocation设置" class="headerlink" title="FakeLocation设置"></a>FakeLocation设置</h2><p>给FakeLocation软件Root权限<br>FakeLocation设置页只打开<strong>模拟GPS信号</strong>  </p>
<div><img src=/images/11-3.webp width="50%" height="50%"></div>

<h2 id="如何模拟跑"><a href="#如何模拟跑" class="headerlink" title="如何模拟跑"></a>如何模拟跑</h2><p>首先到一个较空旷，能接收到gps信号的地方（宿舍阳台、宿舍走廊），拿个椅子坐下，手机关闭wifi（可以开启蓝牙和数据）<br>FakeLocation选择<strong>要模拟的位置</strong>到跑道，当然具体在哪无所谓<br>打开运动软件，<strong>待运动软件接收到gps信号</strong>提示可以开始跑，返回FakeLocation软件，点击<strong>启动模拟</strong>（第一次打开需要等待一会，建议在模拟跑前先开关一次预热），并<strong>打开摇杆</strong>  </p>
<p>摇杆设置：<br>摇杆里的<strong>模拟gps信号</strong>和<strong>步频模拟</strong>都得关掉，不能打开！不能打开！不能打开！   </p>
<div><img src=/images/11-4.webp width="100%" height="100%"></div>

<p>接着返回运动软件，你会发现显示的位置瞬移到了之前选择的模拟位置处，然后开始运动，要去哪就<strong>用摇杆摇</strong>到哪，步频可以使用其它软件模拟，但<strong>建议抖手</strong><br>跑完后先结束运动，关闭运动软件，再停止位置模拟  </p>
<hr>
<h1 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h1><p>1、当摇杆回到中间时（速度为0），运动软件会提示gps信号弱，这是正常现象<br>2、启动模拟后，运动软件上显示的位置没变：杀掉运动软件和FakeLocation，重新操作一次<br>3、启动模拟后，运动软件上显示的位置变了，但一开始运动位置就变回原来位置：杀掉运动软件和FakeLocation，重新操作一次<br>4、被检测到环境异常4：FakeLocation没隐藏好、运动软件检测到gps信号长期未变。请自查有无和教程操作不同的地方  </p>
<h1 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h1><blockquote>
<p>如有问题可在评论区回复或在酷安找我<br>本教程虽然目前还可行，博主自用了两个学期也没被检测到一次，但安卓设备众多，系统繁杂，不确保教程的通用性<br>Root手机导致手机变砖、假跑被检测到影响体育成绩等后果，博主不承担任何责任</p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次超声波避障小车比赛</title>
    <url>/article/81935dcb.html</url>
    <content><![CDATA[<blockquote>
<p>去年第一次红外循迹比赛的时候我还没整博客，第二次便记录一下吧</p>
</blockquote>
<h1 id="比赛简介"><a href="#比赛简介" class="headerlink" title="比赛简介"></a>比赛简介</h1><p>学校机械院举办的智能小车比赛，一学期一次，上次是红外循迹，这次是超声波避障<br>小车是学院统一采购的，第一次去比赛时拿到的是散件，51单片机、电阻、其它芯片等，都得自己焊  </p>
<hr>
<h1 id="关于队伍"><a href="#关于队伍" class="headerlink" title="关于队伍"></a>关于队伍</h1><p>一位机械院的同学在酷安私信我参不参加智能小车比赛，我那时还不认识他，但想着反正闲着也是闲着，参加点活动也好，便一拍即合，后面他又拉来了商学院的一位男同学和两位女同学<br>第一次比赛，我们也是唯一有商学院同学的队伍（其它队伍队均两机械两计科），不过我们队也是女同学最多的，Buff加满   </p>
<p>队名我提议是秋名山车队，又是一拍即合  </p>
<hr>
<h1 id="关于比赛"><a href="#关于比赛" class="headerlink" title="关于比赛"></a>关于比赛</h1><p>小车在上次比赛时就已搞好，所以这次重点在写个超声波避障程序烧进去<br>作为队里唯一的计科同学，这个程序当然得我搞了<br>但我倒也摸鱼，程序不难，测试过一次没毛病，剩下就是数值的微调（这就是我比赛前一天晚上才去调的原因么（误））</p>
<hr>
<h1 id="比赛过程"><a href="#比赛过程" class="headerlink" title="比赛过程"></a>比赛过程</h1><p>过程简单，就是一遍一遍测试，然后改改数值，调调机制，然后队伍抽签轮流上，看谁跑的时间短<br>上午7个队（本来12个队，弃权了5个，新报名的队伍焊坏小车的不少），取前三进入下午复赛  </p>
<hr>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>第一次的比赛我们第二，这次还是第二，属于万年老二了<br>上次有初赛复赛都有奖册，我拿了一本，这次只有复赛一本册子，给了队里一位女同学，争取以后人手一本  </p>
<hr>
<h1 id="一些图片"><a href="#一些图片" class="headerlink" title="一些图片"></a>一些图片</h1><div><img src=/images/12-1.webp width="100%" height="100%"></div>

<div><img src=/images/12-2.webp width="100%" height="100%"></div>

<div><img src=/images/12-3.webp width="100%" height="100%"></div>

<div><img src=/images/12-4.webp width="100%" height="100%"></div>

<hr>
]]></content>
      <categories>
        <category>Chuckle</category>
      </categories>
      <tags>
        <tag>Chuckle</tag>
      </tags>
  </entry>
  <entry>
    <title>广海阳江校区介绍</title>
    <url>/article/8154a640.html</url>
    <content><![CDATA[<script>
    document.onselectstart = function(){
        return false;
    }
</script>

<blockquote>
<p>前排提示：本文仅代表博主的个人观点。选专业和学校是人生大事，务必结合自身兴趣等分析，并考虑未来发展</p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">阳江校区简介</button></li><li class="tab"><button type="button" data-href="#test4-2">广海简介</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><div class="tag link"><a class="link-card" title="广东海洋大学阳江校区官网" href="https://www.gdou.edu.cn/yjxq/"><div class="left"><img src="https://www.gdou.edu.cn/yjxq/images/logo.png"/></div><div class="right"><p class="text">广东海洋大学阳江校区官网</p><p class="url">https://www.gdou.edu.cn/yjxq/</p></div></a></div><div class="tag link"><a class="link-card" title="广东海洋大学阳江校区简介" href="https://www.gdou.edu.cn/yjxq/xqgk/xqjj.htm"><div class="left"><img src="https://www.gdou.edu.cn/yjxq/images/logo.png"/></div><div class="right"><p class="text">广东海洋大学阳江校区简介</p><p class="url">https://www.gdou.edu.cn/yjxq/xqgk/xqjj.htm</p></div></a></div>

<p>&emsp;&emsp;广东海洋大学阳江校区作为<code>广东海洋大学的组成部分</code>，将秉承“坚韧不拔 自强不息”的<code>海大精神</code>，坚持“内涵发展、特色发展、创新发展”战略，<code>在“本、硕、博”完整学位授权体系办学的基础上</code>，作为学校<code>改革示范区</code>积极推进综合改革，建设区域特色鲜明的<code>高水平校区</code>。</p>
<div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>校区历程：</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2019年初</p>
</div></div><div class='timeline-item-content'><p>&emsp;&emsp;<code>广东省委省政府</code>作出在阳江加快建设<code>应用型本科院校</code>的重大决策。同年7月，粤东西北地区新建迁建高校对口帮扶工作推进会召开，<code>华南理工大学</code>与<code>阳江市</code>签订对口帮扶建设阳江应用型本科院校框架协议，派出强有力的帮扶团队进驻阳江，大学建设工作全面展开。</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2021年1月4日</p>
</div></div><div class='timeline-item-content'><p>&emsp;&emsp;广东省教育厅明确，由<code>省教育厅</code>、<code>阳江市</code>、<code>海大</code>、<code>华工</code>四方<code>共同建设</code>广东海洋大学<code>阳江校区</code>。3月30日，在省长马兴瑞等领导见证下，四方在湛江签署了<code>四方协议</code>。<code>广东海洋大学阳江校区正式成立</code>。</p>
</div></div></div> 

<p><strong>四通八达，山水校园</strong><br>&emsp;&emsp;广东海洋大学阳江校区坐落于“幸福宜居之城”之称的现代化滨海城市——阳江市，海岛沙滩，如诗如画，高山峻岭，秀丽壮美，大山拥大江，大江融大海。阳江是粤港澳大湾区和北部湾城市群的交汇中心，纳入“9+6”大珠三角经济区，东邻粤港澳大湾区，西融北部湾城市群，承东连西、左右逢源的区位优势明显。在交通网络上，“两纵三横”的高速公路网逐步完善，正在扩建民用机场，构建了东连珠三角、西接大西南、海陆空相通的立体交通综合网络。<br>&emsp;&emsp;广东海洋大学阳江校区位于阳江<code>主城区近郊</code>，西靠阳江八景之一的罗琴山，南临风景优美的石河水库，沈海高速、云阳高速、江湛铁路、广湛客专等交通路网纵横交错于校区旁，区域优势明显，交通条件优越，处于阳江融入粤港澳大湾区一小时交通圈、生活圈、经济圈的重要交通枢纽位置。阳江校区总规划用地面积<code>3500亩</code>，首期建设项目用地<code>512亩</code>，2021年6月建成。校区建设规划注重立意，以规划、景观、建筑三位为一体，依托校园自然以及人文环境，打造山水校园、书香校园。</p>
<p><strong>四方共建，华工加持</strong><br>&emsp;&emsp;广东海洋大学阳江校区由<code>广东省教育厅</code>、<code>阳江市政府</code>、<code>广东海洋大学</code>、<code>华南理工大学</code>四方联手共建，院校建设<code>顶层设计由华南理工大学帮扶指导</code>，学科建设由<code>华南理工大学论证规划</code>，<code>人才培养模式</code>由<code>华工资深教授把舵定向</code>，阳江校区教师队伍由<code>广东海洋大学教学名师</code>、帮扶高校<code>华南理工大学特聘教授</code>和<code>校区优秀教师</code>构成，<code>各学院首任负责人</code>由<code>华南理工大学</code>优秀<code>教授</code>担任——这是一所饱含着华工基因特色而成长起来的<code>高水平</code>、<code>高标准</code>院校。</p>
<p><strong>同步硕博，高位启航</strong><br>&emsp;&emsp;阳江新校区2021年已同步启动<code>本科</code>、<code>硕士</code>和<code>博士</code>三个学位层次的招生，以契合区域经济社会发展需求的学科专业为主，首年开设7个本科专业，有3个专业（机械设计制造及其自动化、计算机科学与技术、食品科学与工程）入选国家级<code>一流本科专业建设点</code>，占比超40%，办学<code>起点高</code>，<code>层次高</code>。</p>
<p><strong>融通产业，锻造工匠</strong><br>&emsp;&emsp;阳江校区依托阳江市千亿五金刀剪产业目标、世界级风电产业基地、调味品食品工业、基础零部件产业等重点产业群，创新打造产业学院，深化产学研深度融合人才培养模式，共建白天鹅酒店管理学院、五金刀剪学院、海上风电学院等产业学院和数字旅游研究中心，着力培育学生的“工匠精神”，为广东省构建“一核一带一区”区域发展格局提供人才支持和智力保障，为加快推进区域协调发展和沿海经济带区域经济社会高质量发展提供新动能。</p>
<p><strong>多向协力，尖端创新</strong><br>&emsp;&emsp;阳江校区协同建在校内的先进能源科学与技术广东省实验室阳江分中心（阳江海上风电实验室）、材料科学与技术广东省实验室阳江分中心（阳江合金材料实验室）以及<code>华南理工大学阳江研究院</code>，构建一流的教学科研与实践条件，在科技开发、科技成果产业化、科技咨询及培训等方面开拓创新，形成<code>大学、省实验室和研究院同步规划、共建共享的格局</code>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><div class="tag link"><a class="link-card" title="广东海洋大学官网" href="https://www.gdou.edu.cn/"><div class="left"><img src="https://www.gdou.edu.cn/img/logo1.png"/></div><div class="right"><p class="text">广东海洋大学官网</p><p class="url">https://www.gdou.edu.cn/</p></div></a></div><div class="tag link"><a class="link-card" title="广东海洋大学简介" href="https://www.gdou.edu.cn/xxgk/xxjj.html"><div class="left"><img src="https://www.gdou.edu.cn/img/logo1.png"/></div><div class="right"><p class="text">广东海洋大学简介</p><p class="url">https://www.gdou.edu.cn/xxgk/xxjj.html</p></div></a></div>

<p>&emsp;&emsp;广东海洋大学是<code>广东省人民政府</code>和<code>自然资源部</code>共建的<code>省属重点建设大学</code>，是一所多学科协调发展的<code>综合性海洋大学</code>，是教育部本科教学水平评估优秀院校，是广东省高水平大学重点学科建设高校。<br>&emsp;&emsp;学校以海洋和水产为特色、多学科协调发展的<code>综合性大学</code>，是教育部本科教学水平评估<code>优秀院校</code>，是具有“学士、硕士、博士”<code>完整学位授权体系</code>的大学，是广东省高水平大学<code>重点学科建设高校</code>。现有“水产”“食品科学与工程”“海洋科学”等<code>3个一级学科博士点</code>，<code>11个一级学科硕士点</code>，<code>12个硕士专业学位类别</code>；81个本科专业，全日制本科在校生3.5万人。</p>
<details class="folding-tag" cyan><summary> 学校历程时间轴： </summary>
              <div class='content'>
              <div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>学校历程（摘自学校官网）：</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>1935年</p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;学校前身是广东省立高级水产职业学校，是广东现代海洋水产教育的发端，原暨南大学水产系、原华南工学院（现华南理工大学）湛江分院先后并入。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>1979年</p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;学校升格发展为农业部直属的湛江水产学院。经教育部批准，具有62年办学历史的湛江水产学院和39年办学历史的原华南农学院（现华南农业大学）湛江分院为基础发展起来的湛江农业专科学校。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>1997年</p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;学校进行实质性合并组建为湛江海洋大学。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2001年12月</p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;国家气象局主管的全国重点中专湛江气象学校并入湛江海洋大学。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2005年6月</p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;湛江海洋大学更名为<code>广东海洋大学</code>。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2021年1月</p></div></div><div class='timeline-item-content'><p>&emsp;&emsp;省委、省政府明确由我校作为举办校，与阳江市政府、省教育厅、华南理工大学共建<code>广东海洋大学阳江校区</code>。</p></div></div></div> 
              </div>
            </details>

<p>&emsp;&emsp;湛江市的<code>湖光校区</code>（校本部，麻章区海大路1号）、<code>霞山校区</code>（霞山区解放东路40号）、<code>海滨校区</code>（霞山区海滨大道中5号）三个校区占地面积4892亩，其中湖光校区坐落于国家AAAA级旅游景区湖光岩世界地质公园东侧。<br>&emsp;&emsp;<code>湛江校区</code>设有水产学院、海洋与气象学院、食品科技学院、滨海农业学院、机械与动力工程学院、海洋工程学院、马克思主义学院、经济学院、管理学院、数学与计算机学院（软件学院）、电子与信息工程学院、化学与环境学院、海运学院、文学与新闻传播学院、法政学院、外国语学院、中歌艺术学院、体育与休闲学院、继续教育学院等<code>19个</code>学院。<br>&emsp;&emsp;阳江市的<code>阳江校区</code>（江城区罗琴路1号）西靠阳江八景之一的罗琴山，南临风景优美的罗琴湖，总规划用地面积3500亩，第一期建设项目用地512亩，已于2021年6月建成。校区设有机械与能源工程学院、材料科学与工程学院、计算机科学与工程学院、食品科学与工程学院、商学院等<code>5个</code>学院，首次招收学生710人。<code>第二期</code>规划建设<code>7个</code>学院、30个专业。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<hr>
<h1 id="校区QA"><a href="#校区QA" class="headerlink" title="校区QA"></a>校区QA</h1><details class="folding-tag" cyan close><summary> 校区QA（默认折叠，点击展开） </summary>
              <div class='content'>
              <blockquote><p>QA不带图，图片统一放在后文，更多问题可以在评论区留言</p></blockquote><p><strong>问题1：</strong>阳江校区与广东海洋大学是什么关系？<br>&emsp;&emsp;阳江校区是广东海洋大学四个校区之一，是学校的一部分，只不过位置在阳江，同享广海的“本、硕、博”完整学位授权体系，目前也同步进行学科工程认证。毕业证一样的。</p><p><strong>问题2：</strong>阳江校区基础设施和建设完善么<br>&emsp;&emsp;校区经过首批师生的开荒，目前基础设施完善，运动方面有体育馆、室外篮球场、跑道还有健身房。物理、电路、机械、食品等实验室很完善。教学楼也非常完善（这些看图就知道了），不过厚为楼那块里面不少房间还比较空。学校也会定期听取学生代表建议来完善校区建设。</p><p><strong>问题3：</strong>宿舍咋样？<br>&emsp;&emsp;广海最好的宿舍，现在入住全是崭新出厂的新宿舍，全部为上床下桌四人间，两个风扇一台空调，卫浴分离有两种花洒，不限电不断网，晚上11点30分要关宿舍灯，不过可以开阳台灯和自己的台灯，一个宿舍一个华为wifi终端（可插网线），专业物业管理，物业会查违规电器，<del>会提前通知不搞突击</del>。</p><p><strong>问题4：</strong>饭堂怎么样？<br>&emsp;&emsp;目前饭堂的饭菜还是较为摆烂（早餐除外），窗口较少（服务目前的700人够了），饭菜也只能管饱，算不上美味，下学期开新饭堂。但是饭堂环境不错，有多台空调，wifi覆盖。不过如果你恰好财力雄厚，可以找饭堂经理订餐（经理：想吃啥就来面谈预定，饭堂都能买来做，按成本价，收服务费），在二楼包间吃。</p><p><strong>问题5：</strong>外卖业如何？<br>&emsp;&emsp;在首批学生的开荒下，学校外卖业形成了多平台（学生平台、商家平台）模式，依托小程序在线点餐，配送模式有校门口自取、送到宿舍楼下，送到宿舍门口。外卖员由学生兼职。外卖涵盖早餐、午餐、晚餐和夜宵。外卖种类多，有kfc、麦当劳、披萨、炸鸡、烧烤、奶茶饮品、各类饭菜和粉面。若不封校可自行到校门口隔条马路的对面的饭店吃。特别的还有学校食工院学生开的解馋宵夜店，有手抓饼、薯条、章鱼小丸子等各种夜宵。</p><p><strong>问题6：</strong>学校周围荒凉么？<br>&emsp;&emsp;周围还待开发，校门口隔条马路对面有饭店、超市、美宜佳，玩的地方周围是没有了。</p><p><strong>问题7：</strong>去市区方便么？<br>&emsp;&emsp;出校门口左转就有广海公交站台，阳江的公交比较摆烂，但是在许多师生和学校的反馈、阳江市政府的资金支持下，目前可以做到30到60分钟一趟，正常去到市区要40分钟，打滴滴等需要20到30分钟。</p><p><strong>问题8：</strong>校医院如何？<br>&emsp;&emsp;校医院只能处理一些小毛病，若出现发烧等问题，辅导员和物业将送你到最近的中医院，从学校到中医院开车要20分钟，若是紧急情况，学校也有救护车常驻。</p><p><strong>问题9：</strong>图书馆情况？<br>&emsp;&emsp;校区图书馆室阅读区、自习区、电子浏览室、研习间等都已建好，还有两层比较空（有两个英语听力教室），但已经建好的很完善够用了，整个图书馆wifi空调全覆盖，藏书也较多且在逐步引进各种书籍与报刊，图书馆有终端机器，用于找书与还书，馆内管理有序。</p><p><strong>问题10：</strong>校区的计科和主校区的区别？<br>&emsp;&emsp;两边课程是一样的，上学期学C语言、线代，下学期学JAVA、大物、离散、电路、模电，师资力量我觉得差不多（<a href="https://www.gdou.edu.cn/compsci/szdw1.htm">阳江校区计科师资</a>）。老师由新招老师、主校区老师。华工老师组成，主校区的老师两边奔波，不过也有主校区老师是只教新校区了，比如上学期教C语言的吴卫祖教授，是原来主校区数学与计算机学院副院长。老师上课也挺有激情（特别是离散老师），还有不少新老师在面试。不过主校区计科最大的优势我觉得是历史久，有很多成熟的项目团队，计算机嘛，靠自学和做项目，项目经验很重要，阳江校区的团队，恐怕得再等一两年了。不过能力强的也可以自己找开源项目做。</p><p><strong>问题11：</strong>社团情况？<br>&emsp;&emsp;社团有不少，也经常有活动的公告牌在饭堂、教学楼、宿舍区摆着，会有社团招新日，不过毕竟从零开始，还得摸索着来，博主没加入社团，所以具体的方面不了解。</p><p><strong>问题12：</strong>校区内各类比赛多么?<br>&emsp;&emsp;多！而且因为比赛多还人少，基本报了就能参加，计科有校内算法比赛，蓝桥杯、ACM，大比赛和主校区同学一起作为广海队伍参加，当然也能参加别的院组织的比赛，比如博主就参加了两次由机械院组织的循迹小车比赛，小车、场地等所需物资都由学院提供。</p><p><strong>问题13：</strong>教学楼环境怎么样？<br>&emsp;&emsp;两个班（70人）一个教室上课，一间教室三台空调，不过wifi还没覆盖，桌椅全新挺漂亮（具体看图），每层都有热饮水机（不用钱的）、卫生间和垃圾桶。部分课（高数、线代等）在一楼大教室上，四个班一起即所有计科的学生一起，大教室是阶梯教室的样子，中间有两块大屏幕，防止后排学生看不到ppt，一个大教室三台大空调，还有若干风扇。</p><p><strong>问题14：</strong>平时如何进行教学？<br>&emsp;&emsp;由校区老师、主校区老师上课，主校区老师两边奔波，比如高数、大物老师，不过计科的高数老师好像申请了只教阳江校区。</p><p><strong>问题15：</strong>平时可以去主校区么？<br>&emsp;&emsp;由于疫情的关系，封校，不过想出去只需要企业微信和辅导员申请，而且原则上不允许过夜，所以平时去不了，但是部分有事情的学生，在学校安排下会过去主校区，由学校大巴接送。</p><p><strong>问题16：</strong>二三期什么时候建好?<br>&emsp;&emsp;二期目前还没开始建设，暑假动不动工不清楚，目前一期还有6栋空宿舍楼，按我们700人住了三栋楼（有些宿舍没住满）来算，最迟明年就会开启二期建设了。也不用担心未来施工太吵，后面的建设离现在的宿舍和教学区都有一定距离。</p><p><strong>问题17：</strong>学校小么？<br>&emsp;&emsp;现在只有512亩，沿着最外围校道走一圈是2.5km，相比于一般大学上千亩还是挺小的，但好处就是宿舍走到（走快点）教室只需要10多分钟，去哪都方便</p><p><strong>问题18：</strong>学校可以带载具么？<br>&emsp;&emsp;可以骑自行车（要统一上牌），可以玩滑板、滑轮。</p><p><strong>问题19：</strong>多少排位能上阳江校区的计科？<br>&emsp;&emsp;去年计科最低排位8.9w，不过今年大背景是公办学校缩招许多，加上去年是阳江校区第一年招生与广东省第一年新高考，8.9w我觉得今年还会再高，不过都可以冲冲冲，但注意今年不再是一个专业组里只有一个计科专业，阳江校区今年的计算机专业组有三个专业：计科、物联网工程、信管，如果报了这个专业组，但是排位在8.9w左右的，得考虑会不会调剂到其他两个专业，不过其他两个专业在主校区排位是9w以内的，也不会差。</p><p><strong>问题20：</strong>校园网如何？<br>&emsp;&emsp;我们第一年是免费使用，不知道今年新生还有没有免费用一年政策，目前只有移动的网络，以后会有电信。未来收费300块一年30Mbps速度（3.75MB/s），更多套餐要等通知。</p><p><strong>问题21：</strong>学校手机信号，移动网络质量如何？<br>&emsp;&emsp;校门口对面就有大基站，三大运营商的信号都是满格的（安卓红米k40，苹果不清楚）。</p><p><strong>问题22：</strong>学费和住宿费情况？<br>&emsp;&emsp;学费和主校区的一样，今年计算机相关专业学费两边都是6850，住宿费都是900-1700（来自志愿书上），其他专业的费用应该也是和主校区的差不多，到正式填志愿，志愿系统会把费用放在专业后面的。</p><p><strong>问题23：</strong>怎么去高铁站？<br>&emsp;&emsp;在放寒假暑假时，学校会组织大巴直接去高铁站，上午下午各一趟，新生报道在高铁站会有老师和大巴接送。</p><p><strong>问题24：</strong>商业区如何？<br>&emsp;&emsp;一个超市，东西算多品，种类也多，要什么也可以和主管说进货，一个小面包房，有面包、水果拼盘、小吃啥的，菜鸟驿站还挺大，除了韵达京东进不来要在校门口拿，其它快递都能进来，每天都派送。校区的商业区还是比较拉的，想逛街、吃喝玩乐不太行。</p><p><strong>问题25：</strong>转专业难么？<br>&emsp;&emsp;不建议把转专业看得太有希望，竞争还是很大的。在阳江校区也是这样，转入计算机院今年整个校区才4个名额。</p><p><strong>问题26：</strong>水电费情况？<br>&emsp;&emsp;学校使用完美校园管理智能水电，自来水每年补贴吨数非常多，我用了一年还有70多吨，等于自来水不用钱。电费一度7毛多，也有补贴，但不够用的。洗澡热水10分钟大概不到一块钱，热水24小时都有。</p><p><strong>问题27：</strong>在阳江读书以后实习好找么？<br>&emsp;&emsp;不清楚，毕竟校区还没大三大四学生，按主校区的情况来看，实习可以由学校安排,也可以由自己找单位,主校区那边有去广州、深圳实习的。</p><p><strong>更多问题在评论区讨论吧，典型问题将扩充在此处。</strong></p>
              </div>
            </details>
<hr>
<h1 id="去年录取分数线、今年招生情况"><a href="#去年录取分数线、今年招生情况" class="headerlink" title="去年录取分数线、今年招生情况"></a>去年录取分数线、今年招生情况</h1><p><strong>2021阳江校区分数线：</strong></p>
<div><img src=https://npm.elemecdn.com/chuckle-js-css/post/14/2021-2.webp width="95%" height="95%"></div>

<p><strong>2022阳江校区开设专业与招生情况：</strong><br>具体情况以志愿系统为准！！！</p>
<div><img src=https://npm.elemecdn.com/chuckle-js-css/post/14/2022-1.webp width="100%" height="100%"><img src=https://npm.elemecdn.com/chuckle-js-css/post/14/2022-2.webp width="100%" height="100%"></div>

<div class="tag link"><a class="link-card" title="广东海洋大学2022年普通本科招生专业组分组情况表（广东省）" href="https://zsjy.gdou.edu.cn/newstudent/view/aid/494/tag/xwgg"><div class="left"><img src="https://www.gdou.edu.cn/img/logo1.png"/></div><div class="right"><p class="text">广东海洋大学2022年普通本科招生专业组分组情况表（广东省）</p><p class="url">https://zsjy.gdou.edu.cn/newstudent/view/aid/494/tag/xwgg</p></div></a></div>
<hr>
<h1 id="广海阳江校区2022年招生宣传片"><a href="#广海阳江校区2022年招生宣传片" class="headerlink" title="广海阳江校区2022年招生宣传片"></a>广海阳江校区2022年招生宣传片</h1><details class="folding-tag" cyan close><summary> 宣传片（默认折叠，点击展开） </summary>
              <div class='content'>
              <div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=812828401&bvid=BV1R34y1W7pE&cid=757003892&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>
              </div>
            </details>
<hr>
<h1 id="校区未来规划图"><a href="#校区未来规划图" class="headerlink" title="校区未来规划图"></a>校区未来规划图</h1><div class="fj-gallery"><p><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/wl1.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/wl2.webp" alt=""></p>
          </div>
<hr>
<h1 id="校区有关图文"><a href="#校区有关图文" class="headerlink" title="校区有关图文"></a>校区有关图文</h1><details class="folding-tag" cyan close><summary> 图文（默认折叠，点击展开） </summary>
              <div class='content'>
              <div class="tag link"><a class="link-card" title="学校官网的展示图片" href="https://www.gdou.edu.cn/yjxq/xqgk/xyfg.htm"><div class="left"><img src="https://www.gdou.edu.cn/yjxq/images/logo.png"/></div><div class="right"><p class="text">学校官网的展示图片</p><p class="url">https://www.gdou.edu.cn/yjxq/xqgk/xyfg.htm</p></div></a></div><div class="tag link"><a class="link-card" title="广海阳江校区招生简章" href="https://mp.weixin.qq.com/s/uha1P5jLTUIb-oukeC83Pw"><div class="left"><img src="https://www.gdou.edu.cn/yjxq/images/logo.png"/></div><div class="right"><p class="text">广海阳江校区招生简章</p><p class="url">https://mp.weixin.qq.com/s/uha1P5jLTUIb-oukeC83Pw</p></div></a></div><div class="tag link"><a class="link-card" title="2022年广海阳江校区招生宣传片" href="https://www.gdou.edu.cn/yjxq/xqgk/xxcsp.htm"><div class="left"><img src="https://www.gdou.edu.cn/yjxq/images/logo.png"/></div><div class="right"><p class="text">2022年广海阳江校区招生宣传片</p><p class="url">https://www.gdou.edu.cn/yjxq/xqgk/xxcsp.htm</p></div></a></div><div class="tag link"><a class="link-card" title="计算机科学与工程学院宣传片" href="https://www.gdou.edu.cn/compsci/xygk/xyjj.htm"><div class="left"><img src="https://www.gdou.edu.cn/compsci/images/logo.png"/></div><div class="right"><p class="text">计算机科学与工程学院宣传片</p><p class="url">https://www.gdou.edu.cn/compsci/xygk/xyjj.htm</p></div></a></div><div class="tag link"><a class="link-card" title="计算机科学与工程学院官网" href="https://www.gdou.edu.cn/compsci/"><div class="left"><img src="https://www.gdou.edu.cn/compsci/images/logo.png"/></div><div class="right"><p class="text">计算机科学与工程学院官网</p><p class="url">https://www.gdou.edu.cn/compsci/</p></div></a></div><div class="tag link"><a class="link-card" title="阳江校区图书馆官网" href="https://yjlib.gdou.edu.cn/"><div class="left"><img src="https://yjlib.gdou.edu.cn/engine2/upload/engine/2021-08-28/202108281638525796.png"/></div><div class="right"><p class="text">阳江校区图书馆官网</p><p class="url">https://yjlib.gdou.edu.cn/</p></div></a></div>
              </div>
            </details>
<hr>
<h1 id="校区图片（更新中）"><a href="#校区图片（更新中）" class="headerlink" title="校区图片（更新中）"></a>校区图片（更新中）</h1><blockquote>
<p>建议配合宣传视频食用<br>图片部分来自互联网收集，侵删；图片经过压缩。</p>
</blockquote>
<div class="fj-gallery"><p><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-1.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-2.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-3.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-4.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-5.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-6.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-7.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-8.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-9.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-10.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-11.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-12.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-13.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-14.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-15.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-16.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-17.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-18.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-19.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-20.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-21.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-22.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-23.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-24.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-25.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-26.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-27.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-28.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-29.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-30.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-31.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-32.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-33.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-34.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-35.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-36.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-37.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-38.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-39.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-40.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-41.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-42.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-43.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-44.webp" alt=""><br><img src="https://npm.elemecdn.com/chuckle-js-css/post/14/14-45.webp" alt=""></p>
          </div>
<hr>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>“扬帆起航”LOGO设计活动--初柒网络科技</title>
    <url>/article/560689dd.html</url>
    <content><![CDATA[<blockquote>
<p>&emsp;&emsp;为了庆祝武汉初柒网络科技有限公司开业，推出本期“扬帆起航”LOGO设计活动，帮助各位博主免费设计LOGO，提高知名度。logo即标志，它是活动的标志和象征，它体现着活动中的精神与文化。</p>
</blockquote>
<h1 id="初柒科技简介"><a href="#初柒科技简介" class="headerlink" title="初柒科技简介"></a>初柒科技简介</h1><span class='p center logo large'>初柒科技</span>
<span class='p center small'>技术·创新·前端·网络·建站·开发·设计</span>
<p>&emsp;<br>&emsp;&emsp;武汉初柒网络科技有限公司成立于2022年7月11日，是一家集互联网开发、网络运营 、网站建设、平面设计、小程序及APP开发服务公司互联网服务于一体的网络科技公司。其主要专注于技术创新、寄情于网络IT、投身于互联网事业。</p>
<p>&emsp;&emsp;拥有全新的服务理念，服务社会。武汉初柒网络科技有限公司是一家快速成长、锐意进取的年轻网络科技公司。公司以人为本，以客户为中心，以需求为导向，以服务为宗旨；以创新、专业、求实、诚信、和谐为经营理念。创新科技，最专业的技术。现以成为整个行业技术较专业的网络公司。迅速发展成为网络科技领域的后起之秀。</p>
<div class="tag link"><a class="link-card" title="戳我了解更多--初柒科技" href="https://mp.weixin.qq.com/s/0s6HnxTSPxuPh6ywJtxifg"><div class="left"><img src="/img/head.webp"/></div><div class="right"><p class="text">戳我了解更多--初柒科技</p><p class="url">https://mp.weixin.qq.com/s/0s6HnxTSPxuPh6ywJtxifg</p></div></a></div>
<p>&emsp;</p>
<div><img src=/images/15-1.webp width="80%" height="80%"></div>

<hr>
<h1 id="“扬帆起航”LOGO设计活动"><a href="#“扬帆起航”LOGO设计活动" class="headerlink" title="“扬帆起航”LOGO设计活动"></a>“扬帆起航”LOGO设计活动</h1><div><img src=/images/15-2.webp width="90%" height="90%"></div>

<div class="tag link"><a class="link-card" title="“扬帆起航”LOGO设计活动--初柒科技" href="https://sady0.com/759/"><div class="left"><img src="/img/head.webp"/></div><div class="right"><p class="text">“扬帆起航”LOGO设计活动--初柒科技</p><p class="url">https://sady0.com/759/</p></div></a></div>
<p>&emsp;</p>
<blockquote>
<p>&emsp;&emsp;为了庆祝武汉初柒网络科技有限公司开业，推出本期“扬帆起航”LOGO设计活动，帮助各位博主免费设计LOGO，提高知名度。logo即标志，它是活动的标志和象征，它体现着活动中的精神与文化。</p>
</blockquote>
<p>&emsp;<strong>活动主题：</strong>“扬帆起航”LOGO设计活动  </p>
<p>&emsp;<strong>活动时间：</strong>2022年7月16日-2022年7月19日  </p>
<p>&emsp;<strong>参与人员：</strong>所有博主  </p>
<p>&emsp;<strong>活动目的：</strong>为广大博主设计专属LOGO，提高知名度、活跃度，其次提高公司知名度  </p>
<p>&emsp;<strong>参与要求：</strong><br>&emsp;&emsp;1. 博主个人博客文章大于10篇<br>&emsp;&emsp;2. 发布一篇不少于200字的公司宣传文章 ”公司主营业务：平面设计、开发等“（也可以宣传此次活动，但文章内必须带上公司名称，时间不能少于30天）,文章可以参照微信公众号文章来写（必须写出公司的营业范围“设计” “开发”）  </p>
<p>&emsp;<strong>参与方式：</strong><br>&emsp;&emsp;1. 收集表：<a href="https://www.wjx.cn/vm/tcX59cL.aspx">https://www.wjx.cn/vm/tcX59cL.aspx</a><br>&emsp;&emsp;2. QQ群：425673538  </p>
<p>&emsp;<strong>活动奖励：</strong><br>&emsp;&emsp;1. 博主专属LOGO（一个）<br>&emsp;&emsp;2. 公司将随机抽取参与博主送出公司周边小礼品<br>&emsp;&emsp;3. 给博主免费通过10G图床空间  </p>
<p>&emsp;<strong>设计案例:</strong></p>
<div><img src=/images/15-4.webp width="100%" height="100%"></div>

<hr>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>超星学习通数据泄露事件记录</title>
    <url>/article/af84a159.html</url>
    <content><![CDATA[<h1 id="事件时间轴"><a href="#事件时间轴" class="headerlink" title="事件时间轴"></a>事件时间轴</h1><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴 </p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-06-20</p>
</div></div><div class='timeline-item-content'><ol>
<li>学习通被爆有<code>1.7亿</code>师生账号信息<code>数据泄露</code><br>包括手机号码、邮箱、姓名、学校、班级、明文密码等信息<br>随后，热搜词条<code>#学习通数据库疑发生信息泄露#</code>被撤,词条内容被屏蔽<div><img src=/images/13-1.webp width="40%" height="40%"></div>

</li>
</ol>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-06-21 上午</p>
</div></div><div class='timeline-item-content'><p><code>#学习通#</code>词条登顶微博热搜第一<br>很多人发现自己学习通的使用量多达上万、几十万次（图为博主的次数，2万次）</p>
<div><img src=/images/13-2.webp width="40%" height="40%"></div>

</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-06-21 15:45</p>
</div></div><div class='timeline-item-content'><p>学习通就泄露事件做出声明：<code>目前还未发现数据泄露，确认不存在明文密码泄露。</code></p>
<div><img src=/images/13-3.webp width="40%" height="40%"></div>

</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-06-21 16:17</p>
</div></div><div class='timeline-item-content'><p>学习通就异常使用量做出声明：<code>正常现象。</code></p>
<div><img src=/images/13-4.webp width="40%" height="40%"></div>

</div></div></div>
<hr>
<h1 id="事件相关"><a href="#事件相关" class="headerlink" title="事件相关"></a>事件相关</h1><ol>
<li><p>2020年超星学习通就被<a href="https://www.cnvd.org.cn/">国家信息安全漏洞共享平台(cnvd)</a>警告存在<code>信息泄露漏洞</code></p>
<div class="tag link"><a class="link-card" title="超星学习通App存在信息泄露漏洞" href="https://www.cnvd.org.cn/flaw/show/CNVD-2020-61119"><div class="left"><img src="/img/head.webp"/></div><div class="right"><p class="text">超星学习通App存在信息泄露漏洞</p><p class="url">https://www.cnvd.org.cn/flaw/show/CNVD-2020-61119</p></div></a></div>
<div><img src=/images/13-5.webp width="40%" height="40%"></div>
</li>
<li><p>著名蓝色机器人发通知与投票：</p>
<div><img src=/images/13-6.webp width="40%" height="40%"></div>
</li>
<li><p>博主已中招</p>
<div><img src=/images/13-7.webp width="40%" height="40%"></div>
</li>
<li><p>学习通的一些<code>免责条款</code>：总之，无责</p>
<div><img src=/images/13-8.webp width="40%" height="40%"></div>


</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>新生生存指南</title>
    <url>/article/f6a0ce6c.html</url>
    <content><![CDATA[<script>
    document.onselectstart = function(){
        return false;
    }
</script>

<blockquote>
<p>一份生存指南，经验之谈，仅代表博主的个人观点。</p>
</blockquote>
<h1 id="入学QA"><a href="#入学QA" class="headerlink" title="入学QA"></a>入学QA</h1><details class="folding-tag" cyan close><summary> 入学QA（默认折叠，点击展开） </summary>
              <div class='content'>
              <blockquote><p>持续更新中，关于校区介绍看：<a href="https://www.chuckle.top/article/8154a640.html">广海阳江校区介绍</a></p></blockquote><p><strong>问题1：</strong>通知书啥时候到，里面有什么？<br>&emsp;&emsp;计划8月1号开始邮寄通知书，邮政快递，拿通知书需要带身份证。里面有录取通知书，一张建设银行卡（拿到后要去当地建行激活），缴费须知，以及其它一些通知文件。邮寄地址是自己在高考信息系统里留的地址。</p><p><strong>问题2：</strong>入学需要准备什么？<br>&emsp;&emsp;这部分在录取通知书里会说，这里也先简单说下：录取通知书、<code>高中的档案</code>、身份证复印件、1寸红底照片、登记兵役信息（有些高中学校已经帮你们登记好了）、生活用品（包括但不限于衣服、被子、床垫）等。但不用带洗衣机、桶装水、饮水机等物品！！！这些物品可<code>提前邮寄</code>（邮寄地址见问题3）到学校，或者到校后再和舍友一起合资在网上买。空调每个宿舍学校都已经装好，不用买。</p><p><strong>问题3：</strong>学校邮寄地址？什么时候可以邮寄？<br>&emsp;&emsp;广东省阳江市江城区罗琴路1号广东海洋大学阳江校区菜鸟驿站。大二8月25号开学，就可以邮寄了，不过最好还是在开学前几天再寄。除了韵达和京东其它都可以进菜鸟驿站。</p><p><strong>问题4：</strong>怎么知道住哪个宿舍以及床位安排？<br>&emsp;&emsp;我们那时是报道当天在宿舍楼下看宿舍安排，每个宿舍第一个到的同学要在宿管那拿空调遥控器和宿舍钥匙，今年不知道会不会先告诉你们。床位是先到先得。</p><p><strong>问题5：</strong>床有多大？买多大床垫？</p><div><img src=/images/16-2.webp width="30%" height="30%"></div><p><strong>问题6：</strong>什么时候知道分班？<br>&emsp;&emsp;去年是8月12号左右。</p><p><strong>问题7：</strong>军训时间？<br>&emsp;&emsp;去年是9月15号开学，17号开始军训，30号结束，为期14天。</p><p><strong>问题7：</strong>可以装床帘么？<br>&emsp;&emsp;床帘、桌帘都可以整，实际上宿舍你想咋搞都行（除了搞破坏）。</p>
              </div>
            </details>
<hr>
<h1 id="学校地图防止迷路"><a href="#学校地图防止迷路" class="headerlink" title="学校地图防止迷路"></a>学校地图防止迷路</h1><details class="folding-tag" cyan close><summary> 学校地图（默认折叠，点击展开） </summary>
              <div class='content'>
              <div><img src=/images/16-3.webp width="100%" height="100%"></div>
              </div>
            </details>
<hr>
<h1 id="开学前一天"><a href="#开学前一天" class="headerlink" title="开学前一天"></a>开学前一天</h1><h2 id="提前一天到阳江"><a href="#提前一天到阳江" class="headerlink" title="提前一天到阳江"></a>提前一天到阳江</h2><p>&emsp;&emsp;不少新生是选择前一天到阳江市，好在第二天一大早就到学校，落脚点一般是离学校最近的市区：<code>江城区</code>，这也是阳江市的老城区了，酒店还是不少的。但不要像博主那样，从海陵岛回来都晚上10点了，才开始找酒店，那在市中心附近比较难找有空房的。（阳江高铁站同样在江城区）<br>&emsp;&emsp;当你七八点一大早就醒来准备去学校，那大可能遇到堵车，特别是在<code>金山路——鱿鱼大桥</code>那段，摩托大军与车流，所以提前规划好路线，避开早高峰，或者绕路以通过<code>漠阳江</code>。  </p>
<div><img src=/images/16-1.webp width="90%" height="90%"></div>

<h2 id="有什么玩的"><a href="#有什么玩的" class="headerlink" title="有什么玩的"></a>有什么玩的</h2><p>&emsp;&emsp;博主是去了海陵岛玩，但可能并不是旅游旺季，而且已是晚上，景区内不少地方没开放，或者没人值守。散步逛街、驾车兜风、买了些鱿鱼丝、紫菜等产品就回去了。顺便吐槽下，去海陵岛两条路线，其中一条走高速，短短一条高速路，过路费倒是挺高。</p>
<hr>
<h1 id="开学首日"><a href="#开学首日" class="headerlink" title="开学首日"></a>开学首日</h1><h2 id="当天到阳江"><a href="#当天到阳江" class="headerlink" title="当天到阳江"></a>当天到阳江</h2><p>&emsp;&emsp;除了提前一天到阳江，还有同学是选择开学当天到。<br>&emsp;&emsp;学校有安排在高铁站直达学校的大巴，每隔一段时间一班次（具体时间看通知），自驾的话那不用说，避开早晚高峰，直接到校就行，即停即走。</p>
<h2 id="进校到入住流程"><a href="#进校到入住流程" class="headerlink" title="进校到入住流程"></a>进校到入住流程</h2><blockquote>
<p>去年流程，今年看最后通知，不过应该差不多</p>
</blockquote>
<p>&emsp;&emsp;1. 到校门口有志愿者接过你的行李运到校车上，你则进到入校通道，配合完成一些工作后就可进到学校内，然后上校车。<br>&emsp;&emsp;2. 校车会直接开到宿舍楼下，在宿舍楼下找到对应学院/专业的老师，进行入学登记，领校园卡等东西。<br>&emsp;&emsp;3. 接着拿着自己的行李就可以上宿舍了，第一个到宿舍的要在宿管那拿空调遥控器和宿舍钥匙。<br>&emsp;&emsp;4. 首日整个白天都是自由的，可以整理宿舍，到处逛逛，晚上有没有任务要看老师的安排（一般也没有）。</p>
<hr>
<h1 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h1><p>&emsp;&emsp;1. 选好宿舍长；<br>&emsp;&emsp;2. 轮流召开各个学院的开学典礼；<br>&emsp;&emsp;3. 在体育馆购买两套军训服；<br>&emsp;&emsp;4. 更多活动等安排。</p>
<hr>
<h1 id="第三天军训"><a href="#第三天军训" class="headerlink" title="第三天军训"></a>第三天军训</h1><blockquote>
<p>为期14天的大学军训</p>
</blockquote>
<h2 id="军训时间表"><a href="#军训时间表" class="headerlink" title="军训时间表"></a>军训时间表</h2><p>&emsp;&emsp;6:30-7:20 早餐<br>&emsp;&emsp;7:20-11:00 上午操课<br>&emsp;&emsp;11:00-12:00 午餐<br>&emsp;&emsp;12:00-14:30  午休<br>&emsp;&emsp;15:00-17:00 下午操课<br>&emsp;&emsp;17:00-19:00 晚餐<br>&emsp;&emsp;19:00-23:00 除校区安排集中教育外，由各连及各学院商定开展军旅文艺活动、入学教育、学院活动等。<br>&emsp;&emsp;23:00晚休</p>
<h2 id="军训生存指南"><a href="#军训生存指南" class="headerlink" title="军训生存指南"></a>军训生存指南</h2><p>&emsp;&emsp;0. 准备好<code>防汗</code>的防晒霜<br>&emsp;&emsp;1. 千万别<code>迟到</code>和<code>逃训</code><br>&emsp;&emsp;2. 军训以一个连/排为集体，一人捣乱，<code>全员</code>受罪<br>&emsp;&emsp;3. 动作不到位就是重复的训练<br>&emsp;&emsp;4. 训练中有身体不适可以打报告休息一会，也可以申请后去“病号连”，“病号连”也要穿军训服，然后在操场看台待着不能回宿舍，该连虽然不用训练，但是要<code>写作文</code>（听说字数还挺多。。。）<br>&emsp;&emsp;5. 军训的鞋子<code>比较小</code>，而且<code>硬底</code>，一般的鞋垫塞进去后很挤脚，可以垫纸巾啥的，不过博主14天都没垫东西<br>&emsp;&emsp;6. 第一天就和舍友在JD上买好洗衣机，不然你不会想手洗军训服<br>&emsp;&emsp;7. 军训服包括外套、裤子、衬衫、外腰带、帽子，只能说能穿，14天对于这种用料的军训服还是太勉强了，建议带盒<code>针线</code>，防止暴毙<br>&emsp;&emsp;8. 准备好一个腰带，或者在裤子上多开一个纽扣孔，发的<code>外腰带是系腰（外套）上的！！！！！！</code><br>&emsp;&emsp;9. 多带点透气的袜子！！！<br>&emsp;&emsp;10. 一个容量大的水瓶，不过我更建议直接在超市买1L的矿泉水<br>&emsp;&emsp;11. 准备好防中暑的药品:风油精、藿香正气水等<br>&emsp;&emsp;12. 买军训服<code>早点去</code>，抢码数，不然只剩小码了，虽然后面几天可以换，不过麻烦<br>&emsp;&emsp;13. 在宿舍准备好泡面、面包等应急食品<del>&ensp;派蒙&ensp;</del>！！！<br>&emsp;&emsp;14. 军训会分批去干饭，当然有些教官也会偷偷着带你们离饭堂近点训练，然后抢饭，不过分批得看教官队长分，会轮着来，中午晚去晚上就早去<br>&emsp;&emsp;15. 教官前几天挺严，熟悉之后就会带着你们摸鱼了，只要配合好教官训练，训练好了就能去阴凉处坐着休息<br>&emsp;&emsp;16. 军训不配合教官是会要求明年重训的（不过一般不会的啦），当然，表现好也会发优秀学员证书，能加操行分<br>&emsp;&emsp;17. 晚训很摸鱼，经常去教室开会或者在操场上坐着拿手机看直播，当然也要穿军训服</p>
<h2 id="军训摸鱼指南"><a href="#军训摸鱼指南" class="headerlink" title="军训摸鱼指南"></a>军训摸鱼指南</h2><p>&emsp;&emsp;1. 额，还想着摸鱼呢，14天坚持坚持就过去了，其实也挺快乐的~~~</p>
<hr>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇文章：一点小小的说明与介绍</title>
    <url>/article/ff73d561.html</url>
    <content><![CDATA[<h1 id="本博的说明"><a href="#本博的说明" class="headerlink" title="本博的说明"></a>本博的说明</h1><p>1.目前记录自己学习编程之路</p>
<p>2.酷安机佬分享搞机</p>
<p>3.记录日常</p>
<p>4.欢迎交换友链</p>
<p>5.更多</p>
<hr>
<h1 id="写博原因"><a href="#写博原因" class="headerlink" title="写博原因"></a>写博原因</h1><blockquote>
<p>不写博客不知道自己多牛B，写了博客就知道自己多lowB<br><del>博客不是你想写，想写就能写，这玩意儿需要大量知识，沉淀，研究，总结</del><br>博客就是自己想什么就写什么的哈，比如有个瞬间想法也可以写进去，记录下来！何必在意那么多！<br><del>把工作中需要用的技术和实现代码写到博客里，下次再用上就直接复制粘贴</del></p>
<blockquote>
<p>来自评论区<a href="https://www.bilibili.com/video/BV1334y1q72q">bilibili评论区</a> </p>
</blockquote>
</blockquote>
<p>写博明确的好处————CodeSheep<br>1.培养总结能力<br>2.面试加分项<br>3.让自己的知识在某个地方留下痕迹，不流失<br>4.加深对技术点的理解(写的过程=复现)<br>5.帮助自己创建一个属于自己的知识体系<br>6.踩坑记录<br>7.获得阅读量，提高知名度，结交志同道合的朋友<br>8.提高表达与写作能力<br>9.·····</p>
<p><strong>总之写博是提升自己方便自己的好途径</strong><br>作为一只计科大一<font size=2><del>带学牲</del></font>，未来的程序员，写博是必要的</p>
<hr>
<h1 id="CodeSheep的tip"><a href="#CodeSheep的tip" class="headerlink" title="CodeSheep的tip"></a>CodeSheep的tip</h1><blockquote>
<p>写博客可以系统地整合自己某一阶段的学习成果</p>
<p>博客的方向：<br>可复现，能否解决实际问题</p>
<p>注意：<br>尊重知识产权，用别人的代码或者语言，记得表明来源。</p>
<p>入门：<br>备忘录，基础理解，踩坑的记录分享、学习笔记<br>实战类：<br>环境搭建，操作记录</p>
</blockquote>
<hr>
<h1 id="为什么用hexo搭博客"><a href="#为什么用hexo搭博客" class="headerlink" title="为什么用hexo搭博客"></a>为什么用hexo搭博客</h1><p>1.静态博客够用了</p>
<p>2.hexo用的人多，遇到问题百度好解决</p>
<p>3.主题丰富</p>
<p>4.无需服务器 <del>部署到github/gitee无需软妹币</del></p>
<blockquote>
<p>100天后我还是把博客主线路部署在腾讯云了，用上腾讯云与又拍云的cdn速度就是快</p>
</blockquote>
]]></content>
      <categories>
        <category>Chuckle</category>
      </categories>
      <tags>
        <tag>Chuckle</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客的基本操作</title>
    <url>/article/aa2a7b7e.html</url>
    <content><![CDATA[<blockquote>
<p><strong>Hexo官方文档:</strong><a href="https://hexo.io/zh-cn/docs">Hexo</a></p>
</blockquote>
<h1 id="Hexo操作"><a href="#Hexo操作" class="headerlink" title="Hexo操作"></a>Hexo操作</h1><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><figure class="highlight js"><figcaption><span>新建文章，在blog\source\_posts</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> post (文章名称)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>新建页面，在blog\source</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page (页面名称)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>生成静态文件</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>启动服务器，访问网址:http://localhost:4000</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>部署网站</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>hexo三连,四连</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>push三连</span></figcaption><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;github action update&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="文章操作"><a href="#文章操作" class="headerlink" title="文章操作"></a>文章操作</h2><blockquote>
<p><strong>Markdown 教程</strong><br><a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程</a><br><a href="http://markdown.p2hp.com/basic-syntax/">官网—Markdown基本语法</a></p>
<p><strong>blog\scaffolds中修改三种文章模板</strong></p>
<p><em>斜体文本</em> &emsp;*斜体文本*<br><strong>粗体文本</strong> &emsp;**粗体文本**<br><strong><em>粗斜体文本</em></strong> &emsp;***粗斜体文本***<br><del>横线删除</del> &emsp;~~横线删除~~ </p>
<p><em>*</em>水平分割线</p>
</blockquote>
<figure class="highlight html"><figcaption><span>文字蓝链</span></figcaption><table><tr><td class="code"><pre><span class="line">文字内容[tittle](https://*******)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><figcaption><span>文章中自定义文本，size文字大小，face字体，color颜色，&emsp空格</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">face</span>=<span class="string">&quot;verdana&quot;</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span> &gt;</span><span class="symbol">&amp;emsp;</span>这是一个文本<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><figcaption><span>插入自定义图片,</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">left</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1.png</span> <span class="attr">width</span>=<span class="string">&quot;25%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;25%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">left</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1.png</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">2.png</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">![文本](图片地址 &quot;鼠标悬停弹出文本提示&quot;)</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>测试用文章</title>
    <url>/article/d87f7e0c.html</url>
    <content><![CDATA[<p>waawdadadadadawdda<br>11111111111111111111111111111<br>123411aaaaaaaaaaaaa<br>52352asdaada<br>aafaawfaw333333333333333<br>wewaadaw</p>
]]></content>
  </entry>
  <entry>
    <title>博客搜索挂了解决方法</title>
    <url>/article/f8c79a1b.html</url>
    <content><![CDATA[<blockquote>
<p>省流助手：删除所有local-search.js中下面这行代码<br>window.pjax &amp;&amp; window.pjax.refresh($resultContent)</p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1></blockquote>
<p>我使用的是本地搜索，local-search，装好后一直正常使用，也没去动过配置<br>前天捣鼓着博客，突然发现博客部署到github上后搜索挂了</p>
<div><img src=/images/4-2.webp width="60%" height="60%"></div>
一直卡在数据库加载中

但是，部署在本地，搜索却一切正常
<div><img src=/images/4-3.webp width="60%" height="60%"></div>
尝试过重装插件，清除浏览器缓存，search.xml改为json，但过一会又挂了

看网上也有不少人遇到这种问题，却找不到解决办法

***

# 解决过程
遇事不决f12，我禁我自己（误）
<div><img src=/images/4-4.webp width="40%" height="40%"></div>
local-search会请求生成在本地的search.xml，也就是数据库加载中里的“数据库”

部署在本地时正常请求
<div><img src=/images/4-8.webp width="80%" height="80%"></div>
而部署在github时没有请求
<div><img src=/images/4-9.webp width="65%" height="65%"></div>
直接访问search.xml正常，不是search.xml的问题
<div><img src=/images/4-5.webp width="60%" height="60%"></div>
查看报错，看起来是这个js的问题
<div><img src=/images/4-6.webp width="60%" height="60%"></div>
本地找到local-search.js，这三个代码都一样
<div><img src=/images/4-7.webp width="60%" height="60%"></div>
js中只有一处pjax报错
<div><img src=/images/4-10.webp width="60%" height="60%"></div>
类型“Window & typeof globalThis”上不存在属性“pjax”。ts(2339)  


看不懂这种报错，但问题多半就是这行代码导致的，查看整个js后，尝试删除此行
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.pjax &amp;&amp; window.pjax.refresh($resultContent)</span><br></pre></td></tr></table></figure>
删除后，搜索挂了的问题解决，博客正常请求search.xml
<div><img src=/images/4-8.webp width="70%" height="70%"></div>

<p>但点击搜索结果后pjax失效，具体表现是aplayer停止播放音乐</p>
<p>看来是pjax的bug，不过感知不强，其余地方的pjax仍然生效</p>
<p>暂时先这样，以后找到更好的解决办法再更新</p>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Butterfly</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习笔记</title>
    <url>/article/13675369.html</url>
    <content><![CDATA[<h1 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h1><p>两个整数运算结果也只能是整数<br>a+=5等价于a=a+5<br>a<em>=b+5等价于a=a</em>(b+5)<br>a++等a+=1等a=a+1<br>a++是a加1以前的值，++a是a加1后的值<br>运算符优先级：算数&gt;关系&gt;赋值，判断是否相等的优先级比大于小于低</p>
<hr>
<h1 id="所表达的数的范围"><a href="#所表达的数的范围" class="headerlink" title="所表达的数的范围"></a>所表达的数的范围</h1><p>char&lt; short&lt;int&lt; float&lt;double</p>
<hr>
<h1 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof()"></a>sizeof()</h1><p>sizeof()是一个运算符,给出某个类型或变量在内存中所占据的字节数<br>sizeof()是静态运算符,它的结果在编译时刻就决定了，不要在 sizeof的括号里做运算,这些运算不会做的</p>
<hr>
<h1 id="unsigned"><a href="#unsigned" class="headerlink" title="unsigned"></a>unsigned</h1><p>unsigned：如果一个字面量常数想要表达自己是 unsigned,可以在后面加u或U，255U用l或L表示long(long)<br>unsigned的初衷并非扩展数能表达的范围,而是为了做纯二进制运算,主要是为了移位</p>
<hr>
<h1 id="整数的输入输出"><a href="#整数的输入输出" class="headerlink" title="整数的输入输出"></a>整数的输入输出</h1><p>只有两种形式:int或 long long<br>%d: int<br>%u: unsigned<br>%ld: longlong<br>%lu: unsigned long long</p>
<hr>
<h1 id="选搔整数类型"><a href="#选搔整数类型" class="headerlink" title="选搔整数类型"></a>选搔整数类型</h1><p>为什么整数要有那么多种?为了准确表达内存,做底层程序的需要<br>没有特殊需要,就选int<br>现在的CPU的字长普遍是32位或64位,一次内存该写就是个int,一次计算也是一个int,选择更短的类型不会更快,甚至可能更慢<br>现代的编译器一般会设计内存对齐,所以更短的类型实际在内存中有可能也占据一个int的大小(虽然sizeof告诉你更小)</p>
<hr>
<p>unsigned与否只是输出的不同,内部计算是一样的<br>printf输出inf表示超过范围的浮点数:±∞<br>print输出nan表示不存在的浮点数<br>带小数点的字面量是 double而非 float<br>float需要用或F后綴来表明身份<br>1.234f</p>
<hr>
<p>判断两个浮点数是否相等可能失败<br>fabs(fl-2)&lt; le-2//两个浮点数相减的绝对值小于一个很小的数，可认为两个浮点数相等</p>
<hr>
<h1 id="选浮点类型"><a href="#选浮点类型" class="headerlink" title="选浮点类型"></a>选浮点类型</h1><p>如果没有特殊需要,只使用 double<br>现代CPU能直接对 double做硬件运算,性能不会比float差,在64位的机器上,数据存儲的速度也不比float慢</p>
<hr>
<h1 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h1><p>当运算符的两边出现不一致的类型时,会自动转换成較大的类型<br>大的意思是能表达的数的范围更大<br>char——&gt; short——&gt;int——&gt;long——&gt;long long<br>int——&gt; float——&gt; double<br>对于 printf,任何小于int的类型会被转换成int，float会被转换成 double<br>但是scanf不会,要输入short,需要%hd</p>
<hr>
<h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><p>要把一个量强制转换成另一个类型(通常是較小的类型),需要:(类型)值<br>比如：<br>(int)10.2<br>(short)32<br>注意这时候的安全性,小的变量不总能表达大的量<br>(short)32768<br>只是从那个变量计算出了一个新的类型的值,它并不改变那个变量,无论是值还是类型都不改变<br>强制类型转换的优先级高于四则运算</p>
<hr>
<h1 id="逻辑运算符优先级"><a href="#逻辑运算符优先级" class="headerlink" title="逻辑运算符优先级:"></a>逻辑运算符优先级:</h1><p>!&gt;&amp;&amp;&gt;||</p>
<hr>
<h1 id="短路"><a href="#短路" class="headerlink" title="短路"></a>短路</h1><p>逻辑运算是自左向右进行的,如果左边的结果已经能够决定结果了,就不会做右边的计算<br>a==6&amp;&amp;b==1<br>a==6&amp;&amp;b+=1<br>对于&amp;&amp;,左边是 false时就不做右边了<br>对于‖,左边是true时就不做右边了  </p>
<hr>
<h1 id="tip1"><a href="#tip1" class="headerlink" title="tip1"></a>tip1</h1><p>不要把赋值,包括复合赋值组合进表达式!<br>一个代码内有重复相似段是程序质量不良的表现<br>函数是一块代,接收零个或多个参数做一件事情,并返回零个或一个值</p>
<hr>
<h1 id="数组的大小"><a href="#数组的大小" class="headerlink" title="数组的大小"></a>数组的大小</h1><p>sizeof给出整个数组所占据的内容的大小,单位是字节<br>sizeof(a)/sizeof(a[0])<br>sizeof(a[0])给出数组中单个元素的大小,于是相除就得到了数组的单元个数<br>这样的代码,一旦修改数组中初始的数据,不需要修改遍历的代吗</p>
<hr>
<h1 id="数组的操作"><a href="#数组的操作" class="headerlink" title="数组的操作"></a>数组的操作</h1><p>遍历数组：通常都是使用for循环,让循环变量i从0到&lt;数组的长度,这样循环体内最大的正好是数组最大的有效下标<br>数组作为函数的参数时:不能在[]中给出数组的大小，不能再利用 sizeof来计算数组的元素个数!<br>数组作为函数参数时,往往必再用另一个参数来传入数组的大小</p>
<h1 id="作为参数的指针"><a href="#作为参数的指针" class="headerlink" title="作为参数的指针"></a>作为参数的指针</h1><p>void f(int <em> p)<br>在被调用的时候得到了某个变量的地址<br>int i=O; f(&amp;i)<br>在函数里面可以通过这个指针访问外面的这个<br>函数参数表中的数组实际上是指针<br>sizeof(a)==sizeof(int </em>)<br>但是可以用数组的运算符进行运算</p>
<hr>
<h1 id="指针是const"><a href="#指针是const" class="headerlink" title="指针是const"></a>指针是const</h1><p>表示一旦得到了某个变量的地址,不能再指向其他变量<br>int <em>const q=&i;//q是 const  
</em>q=26;//OK<br>q++; //ERROR</p>
<hr>
<h1 id="所指是-const"><a href="#所指是-const" class="headerlink" title="所指是 const"></a>所指是 const</h1><p>表示不能通过这个指针去修改那个变量(并不能使得那个变量成为 const)<br>const int <em>p=&amp;i  
</em>p= 26; //ERROR!<br>i=26;//OK<br>P=&i;//OK</p>
<hr>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>lnt i<br>const int<em> p1 =&amp;i<br>int const</em> p2=&amp;i<br>int <em>const p3=&amp;i<br>判断哪个被const了的标志是const在</em>的前面还是后面<br><em>const p指针不许动<br>const </em>p指针不许动变量</p>
<hr>
<h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p>总是可以把一个非 const的值转換成 const的<br>void f(const int* x)<br>int a =15:<br>f(&amp;a);//ok<br>const int b = a<br>f(&amp;b);//ok<br>b =a+1: // Error<br>当要传递的参数的类型比地址大的时候,这是常用的手段:既能用比較少的字节数传递值给参数,又能避免函数对外面的变量的修改</p>
<hr>
<h2 id="const数组"><a href="#const数组" class="headerlink" title="const数组"></a>const数组</h2><p>const int a[]={1,2,3,4,5,6};<br>数组变量已经是 const的指针了,这里的 const表明数组的每个单元都是 const Int所以必须通过初始化进行赋值</p>
<hr>
<h2 id="保护数组值"><a href="#保护数组值" class="headerlink" title="保护数组值"></a>保护数组值</h2><p>因为把数组传入函数时传递的是地址,所以那个函数内部可以修改数组的值<br>为了保护数组不被函数破坏,可以设置参数为 const<br>int sum(const int a[], int length);</p>
<hr>
<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>int <em>p ：指针加一p+1是指加上一个sizeof(int)，将指针移到下一个单元<br>int </em>p=a[];<br><em>p —&gt;a[0]  
</em>(p+1)—&gt;a[1]<br>*(p++)可以遍历数组</p>
<hr>
<p>给一个指针加|表示要让指针指向下一个变量<br>int a[l0]<br>int <em>p= a  
</em>(p+1)—&gt;a[1]<br>如果指针不是指向一片连分配的空间,如数组,则这种运算没有意义<br><em>(p+n)&lt;—&gt;a[n]  
</em>p*q两个指针相减p-q，等于q加多少个单元等于p</p>
<hr>
<p><em>p++<br>取出p所指的那个数据来,完事之后顺便把移到下一个位置去  
</em>的优先级然高,但是没有++高<br>常用于数组类的连续空间操作<br>在某些CPU上,这可以直接被翻译成一条汇编指令</p>
<p>指针乘除无意义</p>
<hr>
<h2 id="指针遍历数组方法"><a href="#指针遍历数组方法" class="headerlink" title="指针遍历数组方法"></a>指针遍历数组方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*p a[10]</span><br><span class="line">p=a</span><br><span class="line">for(i=0;i&lt;sizeof(a)/sizeof(a[0]); i++ )&#123;</span><br><span class="line">printf(&quot;%d\n&quot;, acri[i]);</span><br><span class="line">&#125;  </span><br><span class="line">a[9]=-1//在数组末尾放入一个特殊的东西</span><br><span class="line">while(*p!=-1)&#123;</span><br><span class="line">printf(&quot;%d\n&quot;,*p++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="指针比較"><a href="#指针比較" class="headerlink" title="指针比較"></a>指针比較</h2><p>&lt;,&lt;=,==,&gt;,&gt;=,!=都可以对指针做<br>比较它们在内存中的地址<br>数组中的单元的地址肯定是线性从小到大递增的</p>
<hr>
<h2 id="0地址"><a href="#0地址" class="headerlink" title="0地址"></a>0地址</h2><p>当然你的内存中有0地址,但是0地址通常是个不能随便碰的地址<br>所以你的指针不应该具有0值  </p>
<p>因此可以用0地址来表示特殊的事情:<br>1返回的指针是无效的<br>2指针没有被真正初始化(先初始化为0)  </p>
<p>NULL（必须是大写）是一个预定定义的符号,表示0地址<br>有的编译器不愿意你用0来表示0地址</p>
<hr>
<h2 id="指针的类型"><a href="#指针的类型" class="headerlink" title="指针的类型"></a>指针的类型</h2><p>无论指向什么类型,所有的指针的大小都是一样的,因为都是地址<br>但是指向不同类型的指针是不能直接互相赋值的<br>这是为了避免用错指针</p>
<h2 id="指针的类型转换"><a href="#指针的类型转换" class="headerlink" title="指针的类型转换"></a>指针的类型转换</h2><p>void<em>表示不知道指向什么东西的指针<br>计算时与char</em>相同(但不相通)</p>
<p>指针也可以转换类型<br>int<em>p =&amp;i<br>void</em>p&lt;—&gt;(void *)p<br>这并没有改变p所指的变量的类型,而是让后人用不同的眼光通过p看它所指的变量<br>我不再当你是int,我认为你就是个void!</p>
<hr>
<h2 id="用指针来做什么"><a href="#用指针来做什么" class="headerlink" title="用指针来做什么"></a>用指针来做什么</h2><p>需要传入較大的数据时用作参数<br>传入数组后对数组做操作<br>函数返回不止一个结果是<br>需要用函数来修改不止一个变量<br>动态申请的内存</p>
<hr>
<h1 id="内存操作"><a href="#内存操作" class="headerlink" title="内存操作"></a>内存操作</h1><h2 id="malloc-跟系统要一块内存"><a href="#malloc-跟系统要一块内存" class="headerlink" title="malloc(跟系统要一块内存)"></a>malloc(跟系统要一块内存)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdlib. h&gt;</span><br><span class="line">void*malloc(size_t size)</span><br><span class="line">//向malloc申请的空间的大小是以字节为单位返回的结果是void,需要类型转换为自己需要的类型</span><br><span class="line">(int *)malloc(n*sizeof(int))</span><br></pre></td></tr></table></figure>
<p>如果申请失敗则返回0,或者叫做NULL</p>
<hr>
<h2 id="free"><a href="#free" class="headerlink" title="free()"></a>free()</h2><p>把申请得来的空间还给“系统”<br>申请过的空间,最终都应该要还<br>只能还申请来的空间的首地址</p>
<h2 id="free常见问题"><a href="#free常见问题" class="headerlink" title="free常见问题"></a>free常见问题</h2><p>申请了没free—&gt;长时间运行内存逐漸下降<br>新手:忘了<br>老手:找不到合的free的时机<br>free过了再free<br>地址变过了,直接去free</p>
<hr>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>char a[]={‘h’,’a’,’l’,’l’,’o’,’!’}//字符数组<br>char a[]={‘h’,’a’,’l’,’l’,’o’,’!’,’\0’}//字符串</p>
<hr>
<p>以0(整数0)结尾的一串字符<br>0或’\0’是一样的,但是和0不同<br>0标志字符串的结束,但它不是字符串的一部分<br>计算字符串长度的时候不包含这个0<br>字符串以数组的形式存在,以数组或指针的形式访问<br>更多的是以指针的形式<br>string.h里有很多处理字符串的函数</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char*str=&quot;Hello&quot;</span><br><span class="line">char word[]=&quot;Hello&quot;</span><br><span class="line">char linel[10]=&quot;Hello&quot;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><p>Char<em> s=”Hello, world”<br>●s是一个指针,初始化为指向一个字符串常量<br>●由于这个常量所在的地方,所以实际上s是 const<br>char</em>s,但是由于历史的原因,编译器接受不带const的写法<br>●但是试图对s所指的字符串做写入会导致严重的后果</p>
<hr>
<p>char S[]=”Hello, world”//这个字符串就在我这里<br>Char* s=”Hello, world”//指向某个地方的字符串<br>数组:这个字符串在这里(作为本地变量,空间自动被回收)<br>指针:这个字符串不知道在哪里(处理参数,动态分配空间)<br>如果要构造一个字符串一&gt;数组<br>如果要处理一个字符串一&gt;指针</p>
<hr>
<h2 id="字符串输入输出"><a href="#字符串输入输出" class="headerlink" title="字符串输入输出"></a>字符串输入输出</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char string[8];</span><br><span class="line">scanf(&quot;%s&quot;, string);</span><br><span class="line">printf(&quot;%s&quot;, string);</span><br><span class="line">//scanf读入一个単词(到空格、tab或回车为止)</span><br><span class="line">//scanf是不安全的,因为不知道要该入的内容的长度</span><br><span class="line">scanf(&quot;%7s&quot;, string)</span><br><span class="line">//在%和s之间的数字表示最多允许该入的字符的数量,这个数字应该比数组的大小小</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="空字符串"><a href="#空字符串" class="headerlink" title="空字符串"></a>空字符串</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char buffer[100]=&quot;&quot;;</span><br><span class="line">//这是一个空的字符串, buffer[O]==&quot;\0&quot;;</span><br><span class="line">char buffer[]=&quot;&quot;;</span><br><span class="line">//这个数组的长度只有1</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="复制一个字符串"><a href="#复制一个字符串" class="headerlink" title="复制一个字符串"></a>复制一个字符串</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char*dst=(char*)malloc(strlen(src)+1)</span><br><span class="line">strcpy(dst, src)</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="枚挙"><a href="#枚挙" class="headerlink" title="枚挙"></a>枚挙</h1><p>枚挙是一种用戶定义的数据类型,它用关键字enum以如下语法来声明<br>enum枚挙类型名字{名字0,……,名字n};  </p>
<p>枚挙类型名字通常并不真的使用,要用的是在大括号里的名字,因为它们就是就是常量符号,它们的类型是int,值则依次从0到n。如：<br>enum colors {red, yellow, green};<br>就创建了三个常量,red的值是0, yellow是1,而 green是2。<br>当需要一些可以排列起来的常量值时,定义枚举的意义就是给了这些常量值名字。</p>
<blockquote>
<p>声明枚挙量的时候可以指定值<br>enum COLOR {RED=1, YELLOW, GREEN =5};</p>
</blockquote>
<hr>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><h2 id="声明结构的形式"><a href="#声明结构的形式" class="headerlink" title="声明结构的形式"></a>声明结构的形式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct point&#123;</span><br><span class="line">int X;</span><br><span class="line">Int y;</span><br><span class="line">&#125;;</span><br><span class="line">struct point p1, p2</span><br><span class="line">//pl和p2都是 point里面有x和y的值</span><br><span class="line"></span><br><span class="line">struct &#123;</span><br><span class="line">Int x;</span><br><span class="line">int y;</span><br><span class="line">&#125;pl, p2;</span><br><span class="line">//pl和p2都是一种无名结构,里面有x和y</span><br><span class="line"></span><br><span class="line">struct point &#123;</span><br><span class="line">Int x;</span><br><span class="line">int y;</span><br><span class="line">&#125;pl, p2;</span><br><span class="line">//pI和p2都是point, 里面有x和y的值t</span><br></pre></td></tr></table></figure>
<blockquote>
<p>和本地变量一样,在函数内部声明的结构类型只能在函数内部使用<br>所以通常在函数外部声明结构类型,这样就可以被多个函数所使用了</p>
</blockquote>
<hr>
<h2 id="结构指针"><a href="#结构指针" class="headerlink" title="结构指针"></a>结构指针</h2><p>和数组不同,结构变量的名字并不是结构变量的地址,必须使用&amp;运算符<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct date*pdate= &amp;today;</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="结构作为函数参数"><a href="#结构作为函数参数" class="headerlink" title="结构作为函数参数"></a>结构作为函数参数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int numberofdays(struct date d)</span><br></pre></td></tr></table></figure>
<p>整个结构可以作为参数的值传入函数<br>这时候是在函数内新建一个结构变量,并复制调用者的结构的值<br>也可以返回一个结构<br>这与数组完全不同</p>
<hr>
<h2 id="指向结构的指针"><a href="#指向结构的指针" class="headerlink" title="指向结构的指针"></a>指向结构的指针</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct date &#123;</span><br><span class="line">int month;</span><br><span class="line">int day;</span><br><span class="line">int yeari;</span><br><span class="line">&#125;myday;</span><br><span class="line">struct date *p =&amp;myday;</span><br><span class="line">(*p).month 12;</span><br><span class="line">p-&gt;zmonth 12;</span><br><span class="line">//用-&gt;表示指针所指的结构变量中的成员</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="全局变量初始化"><a href="#全局变量初始化" class="headerlink" title="全局变量初始化"></a>全局变量初始化</h1><p>没有做初始化的全局变量会得到0值<br>指针会得到NULL值<br>只能用编译时刻已知的值来初始化全局变量<br>它们的初始化发生在main函数之前<br>全局变量不应该和另一个全局变量有联系<br>同名变量，本地变量优先级高于全局变量，即本地变量隐藏了全局变量</p>
<hr>
<h1 id="静态本地变量（全局生存期，本地作用域）"><a href="#静态本地变量（全局生存期，本地作用域）" class="headerlink" title="静态本地变量（全局生存期，本地作用域）"></a>静态本地变量（全局生存期，本地作用域）</h1><p>在本地变量定义时加上 static修饰符就成为静态本地变量<br>当函数离开的时候,静态本地变量会銖存在并保持其值<br>静态本地变量的初始化只会在第一次进入这个函数时做（只做一次初始化）,以后进入函数时会保持上次离开时的值<br>静态本地变量实际上是特殊的全局变量，它们位于相同的内存区域<br>静态本地变量具有全局的生存期,函数内的局部作用域<br>static在这里的意思是局部作用域(本地可访问)</p>
<blockquote>
<p>不要使用全局变量来在函数间传递参数和结果<br>尽量避免使用全局变量<br>丰田汽车的案子<br>使用全局变量和静态本地变量的函数是线程不安全的  </p>
</blockquote>
<hr>
<h1 id="返回指针的函数"><a href="#返回指针的函数" class="headerlink" title="返回指针的函数"></a>返回指针的函数</h1><p>返回本地变量的地址是危险的<br>返回全局变量或静态本地变量的地址是安全的<br>返回在函数内 malloc的内存是安全的,但是容易造成问题<br>最好的做法是返回传入的指针</p>
<hr>
<h1 id="编译预处理指令"><a href="#编译预处理指令" class="headerlink" title="编译预处理指令"></a>编译预处理指令</h1><h1 id="开头的是编译预处理指令"><a href="#开头的是编译预处理指令" class="headerlink" title="开头的是编译预处理指令"></a>开头的是编译预处理指令</h1><p>它们不是C语言的成分,但是C语言程序离不开它们</p>
<hr>
<h2 id="define-纯文本替换"><a href="#define-纯文本替换" class="headerlink" title="#define(纯文本替换)"></a>#define(纯文本替换)</h2><h1 id="define用来定义一个宏"><a href="#define用来定义一个宏" class="headerlink" title="define用来定义一个宏"></a>define用来定义一个宏</h1><h1 id="define-lt-名字-gt-lt-值-gt"><a href="#define-lt-名字-gt-lt-值-gt" class="headerlink" title="define&lt;名字&gt;&lt;值&gt;"></a>define&lt;名字&gt;&lt;值&gt;</h1><p>注意没有结尾的分号,因为不是C的语句<br>名字必颁是一个单词,值可以是各种东西<br>在C语言的编译器开始编译之前,编译预处理程序<br>(cpp)会把程序中的名字换成值<br>完全的文本替换<br>acc-save-temps</p>
<hr>
<h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><p>如果一个宏的值中有其他的宏的名字,也是会被替换的<br>如果一个宏的值超过一行,最后一行之前的行末需要加  \<br>宏的值后面出现的注释不会被当作宏的值的一部分</p>
<hr>
<h3 id="预定义的宏"><a href="#预定义的宏" class="headerlink" title="预定义的宏"></a>预定义的宏</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_LINE_</span><br><span class="line">_FILE_</span><br><span class="line">_DATE_</span><br><span class="line">_TIME_</span><br><span class="line">_STDC_</span><br></pre></td></tr></table></figure>
<h3 id="带参数的宏"><a href="#带参数的宏" class="headerlink" title="带参数的宏"></a>带参数的宏</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define cube(x) ((x)*(x)*(x))</span><br></pre></td></tr></table></figure>
<p>在大型程序的代吗中使用非常普遍<br>可以非常复杂,如“产生”函数:在#和##这两个运算符的帮助下<br>存在中西方文化差异<br>部分宏会被inline函数替代</p>
<hr>
<h1 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h1><p>int i;是变量的定义<br>extern int i;是变量的声明</p>
<hr>
<h1 id="声明和定义"><a href="#声明和定义" class="headerlink" title="声明和定义"></a>声明和定义</h1><p>声明是不产生代码的东西<br>函数原型<br>变量声明<br>结构声明<br>宏声明<br>枚挙声明<br>类型声明<br>inline函数<br>定义是产生代码的东西<br>头文件放声明是规则</p>
<hr>
<h1 id="重复声明"><a href="#重复声明" class="headerlink" title="重复声明"></a>重复声明</h1><p>同一个编译单元里,同名的结构不能被重复声明<br>如果你的头文件里有结构的声明,很难这个头文件不会在一个编译单元里被#include多次，所以需要”标准头文件结构”</p>
<hr>
<h1 id="标准头文件结构-宏的if"><a href="#标准头文件结构-宏的if" class="headerlink" title="标准头文件结构(宏的if)"></a>标准头文件结构(宏的if)</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef _LIST_HEAD_</span><br><span class="line">#define _LIST_HEAD_</span><br><span class="line">#include &quot;node.h&quot;</span><br><span class="line">typedef struct _list&#123;</span><br><span class="line">    Node* head</span><br><span class="line">    Node* tail</span><br><span class="line">&#125;List</span><br><span class="line">#endif</span><br><span class="line">//运用条件编译和宏,保证这个头文件在一个编译单元中只会被#include一次</span><br><span class="line">#pragma once//也能起到相同的作用,但是不是所有的编译器都支持</span><br></pre></td></tr></table></figure>
<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><blockquote>
<p>0建一个node结构<br>1首选有个node结构(作为节点)，结构里有int(或者其他类型)变量去存数据，还有个同样结构的*next(next要等于下一个节点)（套娃）<br>2读入数据，并新建一个node结构p，要让一个node结构head始终等于链表第一个节点<br>3要有一个node结构last，每次要让last从head开始，直到last-&gt;next是空的，然后让next等于新的p结构（这样就链起来了）<br>4每次读入新的数据，就新建一个p，然后让last从head开始遍历链表，直到last-&gt;next是空的，然后然后让next等于新的p结构  </p>
</blockquote>
<p><strong>要在函数内改变指针的指向，就要传指针的指针进去</strong></p>
<hr>
<h2 id="遍历链表"><a href="#遍历链表" class="headerlink" title="遍历链表"></a>遍历链表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(p=list.head; p; p=p-&gt;next)&#123;&#125;</span><br><span class="line">//单用一个指针p可以遍历链表</span><br></pre></td></tr></table></figure>
<p>但要让删除链表中某一结点，需要另一个指针q，q一开始为null，后来始终指向p前一个节点<br>当p找到了要删除的节点，就让q-&gt;next等于p-&gt;next，然后free(p)<br>for(q=null，p=list.head; p; q=p，p=p-&gt;next){}<br>当然还要判断链表的第一个元素是不是我们要删除的<br>如果是，就不能让q-&gt;next等于p-&gt;next，因为q一开始是NULL<br>我们应该让head-&gt;next等于p-&gt;next，然后free(p)  </p>
<blockquote>
<p>“.”一般情况下读作”的”。<br>“-&gt;”一般读作”指向的结构体的”。  </p>
</blockquote>
<hr>
<h2 id="清除整个链表"><a href="#清除整个链表" class="headerlink" title="清除整个链表"></a>清除整个链表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(p=head;p;p=q)&#123;</span><br><span class="line">     q=p-&gt;next;</span><br><span class="line">     free(p)</span><br><span class="line">&#125;</span><br><span class="line">//先让指针p等于head，让q始终指向p的下一个节点，然后free(p),再让p=q，p去等于下一个节点</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h1><p>main(成为C语言的入口函数其实和C语言本身无关,你的代码是被一小段叫做启动代的程序所调用的,它需要叫做main的地方)<br>操作系统把你的可执行程序装载到内存里,启动运行,然后调用你的main函数<br>在不同操作系统，入口函数可能不是main()</p>
<hr>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言单链表菜品管理系统</title>
    <url>/article/a696e8fe.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>我的大一上学期期末项目，也是C语言的期末大作业。  </p>
<p>使用单链表进行菜品信息的存储，系统有菜品的增删改查、排序、安全输入、统计、随机输出和文件输入输出等功能。 </p>
<p>现在回去看代码想给自己一锤子（误）</p>
<hr>
<h1 id="包含文件"><a href="#包含文件" class="headerlink" title="包含文件"></a>包含文件</h1><div><img src=/images/6-8.webp width="70%" height="70%"></div>

<hr>
<h1 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h1><div><img src=/images/6-9.webp width="70%" height="70%"></div>
<div><img src=/images/6-10.webp width="70%" height="70%"></div>

<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c"><figcaption><span>900行有点长</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE1 100 <span class="comment">//名称，价格等字数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE2 200 <span class="comment">//限制评价字数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span>							<span class="comment">//链表的节点结构体</span></span><br><span class="line">	<span class="type">char</span> name[SIZE1];		<span class="comment">//菜品名称</span></span><br><span class="line">	<span class="type">char</span> restaurant[SIZE1]; <span class="comment">//饭店名字</span></span><br><span class="line">	<span class="type">float</span> price;			<span class="comment">//菜的价格</span></span><br><span class="line">	<span class="type">int</span> fraction;			<span class="comment">//菜的评分</span></span><br><span class="line">	<span class="type">char</span> comment[SIZE2];	<span class="comment">//菜品评价</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> _<span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">list</span> //方便对链表操作</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	Node *head;</span><br><span class="line">	Node *pa;</span><br><span class="line">	Node *pb;</span><br><span class="line">	Node *pc;</span><br><span class="line">&#125; List;</span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">(<span class="type">void</span>)</span>;			   <span class="comment">//一级菜单</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu_inquire</span><span class="params">(List *<span class="built_in">list</span>)</span>; <span class="comment">//二级菜单_查询菜单</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">help</span><span class="params">(<span class="type">void</span>)</span>;			   <span class="comment">//二级菜单_帮助菜单</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">menu_sort</span><span class="params">(List *<span class="built_in">list</span>)</span>;	   <span class="comment">//三级菜单_排序方法</span></span><br><span class="line"><span class="comment">//对节点操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(List *<span class="built_in">list</span>)</span>;	  <span class="comment">//添加节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete</span> <span class="params">(List *<span class="built_in">list</span>)</span>; <span class="comment">//删除节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">revise</span><span class="params">(List *<span class="built_in">list</span>)</span>;  <span class="comment">//修改节点</span></span><br><span class="line"><span class="comment">//安全输入</span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> *st, <span class="type">int</span> n)</span>; <span class="comment">//安全输入字符</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_int</span><span class="params">(<span class="type">void</span>)</span>;			   <span class="comment">//安全输入int型</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">get_float</span><span class="params">(<span class="type">void</span>)</span>;		   <span class="comment">//安全输入float型</span></span><br><span class="line"><span class="comment">//链表的输出和操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inquire_all</span><span class="params">(List *<span class="built_in">list</span>)</span>;			<span class="comment">//输出链表全部节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inquire_one</span><span class="params">(List *<span class="built_in">list</span>)</span>;			<span class="comment">//输出链表指定菜名节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inquire_restaurant</span><span class="params">(List *<span class="built_in">list</span>)</span>;	<span class="comment">//输出链表指定饭店节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inquire_part_price</span><span class="params">(List *<span class="built_in">list</span>)</span>;	<span class="comment">//输出一定价格以下的菜品(这功能。。贫穷)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inquire_part_fraction</span><span class="params">(List *<span class="built_in">list</span>)</span>; <span class="comment">//输出一定评分以上的菜品</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">average_percentage</span><span class="params">(List *<span class="built_in">list</span>)</span>;	<span class="comment">//查询某饭店或食堂的平均价格和评分</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">(Node *p)</span>;					<span class="comment">//方便输出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">random_menu</span><span class="params">(List *<span class="built_in">list</span>)</span>;			<span class="comment">//随机输出一道菜</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">empty</span><span class="params">(List *<span class="built_in">list</span>)</span>;					<span class="comment">//清空链表</span></span><br><span class="line"><span class="comment">//文件操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">save</span><span class="params">(List *<span class="built_in">list</span>)</span>;	   <span class="comment">//保存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">read_txt</span><span class="params">(List *<span class="built_in">list</span>)</span>; <span class="comment">//读取文件_初始链表</span></span><br><span class="line"><span class="comment">//单链表的排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_ascending</span><span class="params">(List *<span class="built_in">list</span>)</span>;		 <span class="comment">//菜品按价格从低到高排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_descending</span><span class="params">(List *<span class="built_in">list</span>)</span>;		 <span class="comment">//菜品按价格从高到低排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_score</span><span class="params">(List *<span class="built_in">list</span>)</span>;			 <span class="comment">//菜品按评分从高到低排序</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">calculate</span><span class="params">(List *<span class="built_in">list</span>)</span>;				 <span class="comment">//计算出单链表的节点个数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap1</span><span class="params">(List *<span class="built_in">list</span>, List *list_swap)</span>; <span class="comment">//单链表冒泡排序的算法块1</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap2</span><span class="params">(List *<span class="built_in">list</span>, List *list_swap)</span>; <span class="comment">//单链表冒泡排序的算法块2</span></span><br><span class="line"><span class="comment">//其他</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">random_number</span><span class="params">(List *<span class="built_in">list</span>)</span>; <span class="comment">//随机生成不大于节点数的整数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">color</span><span class="params">(<span class="type">int</span> a)</span>;			   <span class="comment">//控制台文本颜色</span></span><br><span class="line"><span class="comment">//______________________________________________________</span></span><br><span class="line"><span class="comment">//------------------------------------------------------</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> <span class="comment">//主函数</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//system(&quot;chcp 65001&quot;);//GB2313</span></span><br><span class="line">	<span class="comment">//system(&quot;chcp 936&quot;);//UTF8</span></span><br><span class="line">	<span class="comment">//system(&quot;cls&quot;);</span></span><br><span class="line">	menu(); <span class="comment">//输出功能菜单</span></span><br><span class="line">	<span class="comment">//佛祖开光无bug</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span> <span class="comment">//一级菜单</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> options, z = <span class="number">1</span>;</span><br><span class="line">	List <span class="built_in">list</span>;</span><br><span class="line">	<span class="built_in">list</span>.head = <span class="literal">NULL</span>;				   <span class="comment">//head指向空，链表不存在</span></span><br><span class="line">	FILE *fp = fopen(<span class="string">&quot;Menu.txt&quot;</span>, <span class="string">&quot;a&quot;</span>); <span class="comment">//若无Menu.txt文件，则创建一个</span></span><br><span class="line">	fclose(fp);</span><br><span class="line">	read_txt(&amp;<span class="built_in">list</span>); <span class="comment">//读入txt中的数据，初始化链表</span></span><br><span class="line">	<span class="keyword">while</span> (z)</span><br><span class="line">	&#123;</span><br><span class="line">		system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		color(<span class="number">2</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|-----------------------------------------------------\n&quot;</span>);</span><br><span class="line">		color(<span class="number">14</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|                    菜品信息系统             \n&quot;</span>);</span><br><span class="line">		color(<span class="number">2</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|-----------------------------------------------------\n&quot;</span>);</span><br><span class="line">		color(<span class="number">11</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|********************系统功能菜单*********************\n&quot;</span>);</span><br><span class="line">		color(<span class="number">2</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|-----------------------------------------------------\n&quot;</span>);</span><br><span class="line">		color(<span class="number">15</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|*******************|1、使用帮助|                       \n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|*******************|2、添加菜品信息|                    \n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|*******************|3、删除菜品信息|                    \n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|*******************|4、查询菜品信息|                    \n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|*******************|5、修改菜品信息|                    \n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|*******************|6、今天吃什么|                     \n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|*******************|7、清空所有数据|                     \n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|*******************|8、保存|\n&quot;</span>);</span><br><span class="line">		color(<span class="number">2</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|-----------------------------------------------------\n&quot;</span>);</span><br><span class="line">		color(<span class="number">15</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|*******************|0、退出系统|                       \n&quot;</span>);</span><br><span class="line">		color(<span class="number">12</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|!!!前请先保存再退出系统,否则数据会丢失!!!\n&quot;</span>);</span><br><span class="line">		color(<span class="number">2</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|-----------------------------------------------------\n&quot;</span>);</span><br><span class="line">		color(<span class="number">11</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入功能序号：&quot;</span>);</span><br><span class="line">		color(<span class="number">15</span>);</span><br><span class="line">		options = get_int();</span><br><span class="line">		<span class="keyword">switch</span> (options)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">			z = <span class="number">0</span>; <span class="comment">//跳出循环</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;即将退出系统。\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			help();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			add(&amp;<span class="built_in">list</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			delete (&amp;<span class="built_in">list</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			menu_inquire(&amp;<span class="built_in">list</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			revise(&amp;<span class="built_in">list</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">			random_menu(&amp;<span class="built_in">list</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">			empty(&amp;<span class="built_in">list</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">			save(&amp;<span class="built_in">list</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			color(<span class="number">12</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;无该功能，请重新输入\n&quot;</span>);</span><br><span class="line">			color(<span class="number">11</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			color(<span class="number">15</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">help</span><span class="params">()</span> <span class="comment">//二级菜单_帮助菜单</span></span><br><span class="line">&#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	color(<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;|-----------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">	color(<span class="number">15</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;|使用帮助：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;|1、本菜品信息系统可供用户自行修改内容\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;|2、因为考虑到不同饭店有同样名称的菜品，本系统允许菜品名称有重复\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;|3、请勿输入错误信息，以免造成程序出错\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;|4、关闭系统前记得保存！否则数据会丢失\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;|5、有bug联系1934009145@qq.com\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;|6、github地址:github.com/qxchuckle/Dishes-Management-System\n&quot;</span>);</span><br><span class="line">	color(<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;|-----------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	color(<span class="number">11</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">menu_inquire</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//二级菜单_查询菜单</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> options, z = <span class="number">1</span>;</span><br><span class="line">	List *p = <span class="built_in">list</span>;			<span class="comment">//方便传结构体指针</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;head == <span class="literal">NULL</span>) <span class="comment">//判断链表是否为空</span></span><br><span class="line">	&#123;</span><br><span class="line">		color(<span class="number">12</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;还未存入任何菜品！无法查询！\n&quot;</span>);</span><br><span class="line">		color(<span class="number">11</span>);</span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>; <span class="comment">//为空结束函数</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (z)</span><br><span class="line">	&#123;</span><br><span class="line">		system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		color(<span class="number">2</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|-----------------------------------------------------\n&quot;</span>);</span><br><span class="line">		color(<span class="number">15</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|1、查询全部菜品信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|2、按菜名查询菜品信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|3、查询饭店或食堂的全部菜品信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|4、查询某价格以下的全部菜品\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|5、查询某评分以上的全部菜品\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|6、查询某饭店或食堂的平均价格、评分和价格区间占比\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|0、返回主菜单\n&quot;</span>);</span><br><span class="line">		color(<span class="number">2</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|-----------------------------------------------------\n&quot;</span>);</span><br><span class="line">		color(<span class="number">11</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入功能序号：&quot;</span>);</span><br><span class="line">		color(<span class="number">15</span>);</span><br><span class="line">		options = get_int();</span><br><span class="line">		<span class="keyword">switch</span> (options)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">			z = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="keyword">if</span> (menu_sort(p))</span><br><span class="line">				inquire_all(p);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			inquire_one(p);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			<span class="keyword">if</span> (menu_sort(p))</span><br><span class="line">				inquire_restaurant(p);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="keyword">if</span> (menu_sort(p))</span><br><span class="line">				inquire_part_price(p);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			<span class="keyword">if</span> (menu_sort(p))</span><br><span class="line">				inquire_part_fraction(p);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">			average_percentage(p);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			color(<span class="number">12</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;无该功能，请重新输入\n&quot;</span>);</span><br><span class="line">			color(<span class="number">11</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">menu_sort</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//三级菜单_排序方法</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> options, z = <span class="number">1</span>, n = <span class="number">1</span>;</span><br><span class="line">	List *p = <span class="built_in">list</span>;</span><br><span class="line">	<span class="keyword">while</span> (z)</span><br><span class="line">	&#123;</span><br><span class="line">		system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		color(<span class="number">2</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|-----------------------------------------------------\n&quot;</span>);</span><br><span class="line">		color(<span class="number">15</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|1、按价格从低到高排序\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|2、按价格从高到低排序\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|3、按评分从高到低排序\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|4、不排序\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|0、返回主菜单\n&quot;</span>);</span><br><span class="line">		color(<span class="number">2</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;|-----------------------------------------------------\n&quot;</span>);</span><br><span class="line">		color(<span class="number">11</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入功能序号：&quot;</span>);</span><br><span class="line">		color(<span class="number">15</span>);</span><br><span class="line">		options = get_int();</span><br><span class="line">		<span class="keyword">switch</span> (options)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">			z = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span> z;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			sort_ascending(p);</span><br><span class="line">			<span class="keyword">return</span> n;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			sort_descending(p);</span><br><span class="line">			<span class="keyword">return</span> n;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			sort_score(p);</span><br><span class="line">			<span class="keyword">return</span> n;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="keyword">return</span> n;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			color(<span class="number">12</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;无该功能，请重新输入\n&quot;</span>);</span><br><span class="line">			color(<span class="number">11</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			color(<span class="number">15</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对节点操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//添加节点</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">float</span> k = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	Node *last = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">	Node *p1 = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)), *p; <span class="comment">//给节点分配空间</span></span><br><span class="line">	p1-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;开始录入菜品：\n----------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;请输入菜品名称：&quot;</span>);</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		s_gets(p1-&gt;name, SIZE1);</span><br><span class="line">	&#125; <span class="keyword">while</span> (<span class="built_in">strlen</span>(p1-&gt;name) == <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;请输入菜品所属饭店or食堂名称：&quot;</span>);</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		s_gets(p1-&gt;restaurant, SIZE1);</span><br><span class="line">	&#125; <span class="keyword">while</span> (<span class="built_in">strlen</span>(p1-&gt;restaurant) == <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (p = <span class="built_in">list</span>-&gt;head; p; p = p-&gt;next) <span class="comment">//遍历链表</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!(<span class="built_in">strcmp</span>(p1-&gt;name, p-&gt;name) || <span class="built_in">strcmp</span>(p1-&gt;restaurant, p-&gt;restaurant)))</span><br><span class="line">		&#123;</span><br><span class="line">			color(<span class="number">12</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;该饭店/食堂内已存在同名菜品！\n&quot;</span>);</span><br><span class="line">			color(<span class="number">11</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;请输入菜品的价格：&quot;</span>);</span><br><span class="line">	p1-&gt;price = get_float();</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;请输入0-10的整数对菜品进行评分：&quot;</span>);</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		n = get_int();</span><br><span class="line">		<span class="keyword">if</span> (n &gt;= <span class="number">0</span> &amp;&amp; n &lt;= <span class="number">10</span>) <span class="comment">//判断评分是否是0-10</span></span><br><span class="line">		&#123;</span><br><span class="line">			p1-&gt;fraction = n;</span><br><span class="line">			i = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			color(<span class="number">12</span>);</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;评分不在规定范围内，请重新输入：&quot;</span>);</span><br><span class="line">			color(<span class="number">15</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">while</span> (!i);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;请对菜品进行评价：&quot;</span>);</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		s_gets(p1-&gt;comment, SIZE2);</span><br><span class="line">	&#125; <span class="keyword">while</span> (<span class="built_in">strlen</span>(p1-&gt;comment) == <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (last) <span class="comment">//如果last有值，则说明head已指向链表第一个节点</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (last-&gt;next)</span><br><span class="line">		&#123;</span><br><span class="line">			last = last-&gt;next; <span class="comment">//last始终指向最后一个节点</span></span><br><span class="line">		&#125;</span><br><span class="line">		last-&gt;next = p1; <span class="comment">//在最后一个节点后面再加一个节点</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">list</span>-&gt;head = p1; <span class="comment">//如果last为NULL，则要将head指向第一个节点</span></span><br><span class="line">	&#125;</span><br><span class="line">	color(<span class="number">11</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;录入成功！&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delete</span> <span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//删除节点</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> a[SIZE1];</span><br><span class="line">	<span class="type">char</span> b[SIZE1];</span><br><span class="line">	Node *p, *q;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;head == <span class="literal">NULL</span>)</span><br><span class="line">	&#123; <span class="comment">//判断链表是否为空</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;还未存入任何菜品！删除失败！\n&quot;</span>);</span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入你要删除的菜品名称：&quot;</span>);</span><br><span class="line">	s_gets(a, SIZE1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入菜品所属饭店名称：&quot;</span>);</span><br><span class="line">	s_gets(b, SIZE1);</span><br><span class="line">	<span class="keyword">for</span> (q = <span class="literal">NULL</span>, p = <span class="built_in">list</span>-&gt;head; p; q = p, p = p-&gt;next)</span><br><span class="line">	&#123;														   <span class="comment">//遍历链表</span></span><br><span class="line">		<span class="keyword">if</span> (!(<span class="built_in">strcmp</span>(a, p-&gt;name) || <span class="built_in">strcmp</span>(b, p-&gt;restaurant))) <span class="comment">//判断是否找到要修改的节点</span></span><br><span class="line">		&#123;</span><br><span class="line">			n++;   <span class="comment">//记录找到了</span></span><br><span class="line">			<span class="keyword">if</span> (q) <span class="comment">//判断找到的是不是第一个节点</span></span><br><span class="line">			&#123;</span><br><span class="line">				q-&gt;next = p-&gt;next; <span class="comment">//让该节点的前一个节点都next指向后一个节点</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">list</span>-&gt;head = p-&gt;next; <span class="comment">//让head的next指向后一个节点</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n没有这道菜！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n删除成功%d道菜。\n&quot;</span>, n);</span><br><span class="line">	&#125;</span><br><span class="line">	color(<span class="number">11</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">revise</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//修改节点</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">float</span> k = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>, m = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> a[SIZE1];</span><br><span class="line">	<span class="type">char</span> b[SIZE1];</span><br><span class="line">	Node *p, *q;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;head == <span class="literal">NULL</span>) <span class="comment">//判断链表是否为空</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;还未存入任何菜品！无法修改！\n&quot;</span>);</span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入要修改的菜品的名称：&quot;</span>);</span><br><span class="line">	s_gets(a, SIZE1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入菜品所属饭店名称：&quot;</span>);</span><br><span class="line">	s_gets(b, SIZE1);</span><br><span class="line">	<span class="keyword">for</span> (q = <span class="literal">NULL</span>, p = <span class="built_in">list</span>-&gt;head; p; q = p, p = p-&gt;next) <span class="comment">//遍历链表</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!(<span class="built_in">strcmp</span>(a, p-&gt;name) || <span class="built_in">strcmp</span>(b, p-&gt;restaurant))) <span class="comment">//判断是否找到要删除的节点</span></span><br><span class="line">		&#123;</span><br><span class="line">			n++; <span class="comment">//记录找到</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n原来的菜品信息:\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;|菜名:%s\n&quot;</span>, p-&gt;name);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;|所属:%s\n&quot;</span>, p-&gt;restaurant);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;|价格:%.2f\n&quot;</span>, p-&gt;price);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;|评分:%d\n&quot;</span>, p-&gt;fraction);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;|评价:%s\n&quot;</span>, p-&gt;comment);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;请修改菜品的价格：&quot;</span>);</span><br><span class="line">			p-&gt;price = get_float();</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;请输入0-10的整数以修改菜品的评分：&quot;</span>);</span><br><span class="line">			<span class="keyword">do</span></span><br><span class="line">			&#123;</span><br><span class="line">				m = get_int();</span><br><span class="line">				<span class="keyword">if</span> (m &gt;= <span class="number">0</span> &amp;&amp; m &lt;= <span class="number">10</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					p-&gt;fraction = m;</span><br><span class="line">					i = <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					color(<span class="number">12</span>);</span><br><span class="line">					<span class="built_in">puts</span>(<span class="string">&quot;评分不在规定范围内，请重新输入：&quot;</span>);</span><br><span class="line">					color(<span class="number">15</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">while</span> (!i);</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;请修改对菜品的评价：&quot;</span>);</span><br><span class="line">			<span class="keyword">do</span></span><br><span class="line">			&#123;</span><br><span class="line">				s_gets(p-&gt;comment, SIZE2);</span><br><span class="line">			&#125; <span class="keyword">while</span> (<span class="built_in">strlen</span>(p-&gt;comment) == <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n修改完成。\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n没有这道菜！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	color(<span class="number">11</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//安全输入</span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> *m, <span class="type">int</span> n)</span> <span class="comment">//安全输入字符</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> *p;</span><br><span class="line">	<span class="type">char</span> *find;</span><br><span class="line">	p = fgets(m, n, <span class="built_in">stdin</span>);</span><br><span class="line">	<span class="keyword">if</span> (p)</span><br><span class="line">	&#123;</span><br><span class="line">		find = <span class="built_in">strchr</span>(m, <span class="string">&#x27;\n&#x27;</span>); <span class="comment">//查找换行符</span></span><br><span class="line">		<span class="keyword">if</span> (find)				<span class="comment">//如果地址不是NULL</span></span><br><span class="line">			*find = <span class="string">&#x27;\0&#x27;</span>;		<span class="comment">//在此处放一个空字符</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">get_int</span><span class="params">()</span> <span class="comment">//安全输入int型</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%*c&quot;</span>, &amp;n) != <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">			<span class="built_in">putchar</span>(ch);</span><br><span class="line">		color(<span class="number">4</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; 不是一个正整数！\n请您重新输入：\n&quot;</span>);</span><br><span class="line">		color(<span class="number">15</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">float</span> <span class="title function_">get_float</span><span class="params">()</span> <span class="comment">//安全输入float型</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">float</span> n = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n &lt;= <span class="number">0</span>)</span><br><span class="line">		&#123; <span class="comment">//用户输入不是正数输出提示</span></span><br><span class="line">			color(<span class="number">12</span>);</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;请重新输入一个正数！&quot;</span>);</span><br><span class="line">			color(<span class="number">15</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%f%*c&quot;</span>, &amp;n) != <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">				<span class="built_in">putchar</span>(ch);</span><br><span class="line">			color(<span class="number">12</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; 不是一个正数！\n请您重新输入：\n&quot;</span>);</span><br><span class="line">			color(<span class="number">15</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">while</span> (n &lt;= <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链表的输出和操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inquire_all</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//输出链表全部节点</span></span><br><span class="line">&#123;</span><br><span class="line">	Node *p;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (p = <span class="built_in">list</span>-&gt;head; p; p = p-&gt;next) <span class="comment">//遍历链表</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n第%d道菜:&quot;</span>, n);</span><br><span class="line">		output(p);</span><br><span class="line">		n++;</span><br><span class="line">	&#125;</span><br><span class="line">	color(<span class="number">11</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n所有菜品查询完毕\n&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">inquire_one</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//输出指定菜名</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> a[SIZE1];</span><br><span class="line">	Node *p;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入你要找的菜品名称：&quot;</span>);</span><br><span class="line">	s_gets(a, SIZE1);</span><br><span class="line">	<span class="keyword">for</span> (p = <span class="built_in">list</span>-&gt;head; p; p = p-&gt;next) <span class="comment">//遍历链表</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(a, p-&gt;name)) <span class="comment">//判断是否找到</span></span><br><span class="line">		&#123;</span><br><span class="line">			output(p); <span class="comment">//调用函数输出节点信息</span></span><br><span class="line">			n++;	   <span class="comment">//记录找到多少节点</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	color(<span class="number">11</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n共查找到%d道菜\n&quot;</span>, n);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">inquire_restaurant</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//输出指定饭店所有菜品</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> a[SIZE1];</span><br><span class="line">	Node *p;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入你要找的饭店或食堂：&quot;</span>);</span><br><span class="line">	s_gets(a, SIZE1);</span><br><span class="line">	<span class="keyword">for</span> (p = <span class="built_in">list</span>-&gt;head; p; p = p-&gt;next) <span class="comment">//遍历链表</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(a, p-&gt;restaurant)) <span class="comment">//判断是否找到</span></span><br><span class="line">		&#123;</span><br><span class="line">			output(p); <span class="comment">//调用函数输出节点信息</span></span><br><span class="line">			n++;	   <span class="comment">//记录找到多少节点</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	color(<span class="number">11</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n共查找到%d道菜\n&quot;</span>, n);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">inquire_part_price</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//输出一定价格以下的菜品(这功能。。贫穷)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="type">float</span> money, k = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> a[SIZE1];</span><br><span class="line">	Node *p;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入封顶价格：&quot;</span>);</span><br><span class="line">	money = get_float();</span><br><span class="line">	<span class="keyword">for</span> (p = <span class="built_in">list</span>-&gt;head; p; p = p-&gt;next) <span class="comment">//遍历链表</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;price &lt;= money) <span class="comment">//判断是否符合要求</span></span><br><span class="line">		&#123;</span><br><span class="line">			output(p); <span class="comment">//调用函数输出节点信息</span></span><br><span class="line">			n++;	   <span class="comment">//记录找到多少节点</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	color(<span class="number">11</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n共查找到%d道菜\n&quot;</span>, n);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">inquire_part_fraction</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//输出一定评分以上的菜品</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> score;</span><br><span class="line">	<span class="type">char</span> a[SIZE1];</span><br><span class="line">	Node *p;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入最低评分：&quot;</span>);</span><br><span class="line">	score = get_int();</span><br><span class="line">	<span class="keyword">for</span> (p = <span class="built_in">list</span>-&gt;head; p; p = p-&gt;next) <span class="comment">//遍历链表</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;fraction &gt;= score) <span class="comment">//判断是否符合要求</span></span><br><span class="line">		&#123;</span><br><span class="line">			output(p); <span class="comment">//调用函数输出节点信息</span></span><br><span class="line">			n++;	   <span class="comment">//记录找到多少节点</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n共查找到%d道菜\n&quot;</span>, n);</span><br><span class="line">	color(<span class="number">11</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">average_percentage</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//查询某饭店或食堂的平均价格和评分</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="type">float</span> sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>, b[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="type">char</span> a[SIZE1];</span><br><span class="line">	Node *p;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入你要查的饭店或食堂：&quot;</span>);</span><br><span class="line">	s_gets(a, SIZE1);</span><br><span class="line">	<span class="keyword">for</span> (p = <span class="built_in">list</span>-&gt;head; p; p = p-&gt;next) <span class="comment">//遍历链表</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(a, p-&gt;restaurant)) <span class="comment">//判断是否找到</span></span><br><span class="line">		&#123;</span><br><span class="line">			sum1 += p-&gt;price;	 <span class="comment">//累加价格</span></span><br><span class="line">			sum2 += p-&gt;fraction; <span class="comment">//累加评分</span></span><br><span class="line">			<span class="keyword">if</span> (p-&gt;price &lt;= <span class="number">5</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				b[<span class="number">0</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (p-&gt;price &lt;= <span class="number">10</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					b[<span class="number">1</span>]++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (p-&gt;price &lt;= <span class="number">15</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						b[<span class="number">2</span>]++;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (p-&gt;price &lt; <span class="number">20</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							b[<span class="number">3</span>]++;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							b[<span class="number">4</span>]++;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			n++; <span class="comment">//记录找到多少节点</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	color(<span class="number">11</span>);</span><br><span class="line">	<span class="keyword">if</span> (n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;该饭店/食堂的一共有%d道菜\n平均价格是：%.2f\t平均评分是：%.2f\n&quot;</span>, n, sum1 / n, sum2 / n);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;其中：\n0~5元占:%.1f%%\n5~10元占:%.1f%%\n10~15元占:%.1f%%\n&quot;</span>, b[<span class="number">0</span>] / n * <span class="number">100</span>, b[<span class="number">1</span>] / n * <span class="number">100</span>, b[<span class="number">2</span>] / n * <span class="number">100</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;15~20元占:%.1f%%\n20元以上占:%.1f%%\n\n&quot;</span>, b[<span class="number">3</span>] / n * <span class="number">100</span>, b[<span class="number">4</span>] / n * <span class="number">100</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		color(<span class="number">12</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无该饭店或食堂！\n\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	color(<span class="number">11</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">(Node *p)</span> <span class="comment">//方便输出</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n|菜名:%s\n&quot;</span>, p-&gt;name);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;|所属:%s\n&quot;</span>, p-&gt;restaurant);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;|价格:%.2f\n&quot;</span>, p-&gt;price);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;|评分:%d\n&quot;</span>, p-&gt;fraction);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;|评价:%s\n&quot;</span>, p-&gt;comment);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">random_menu</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//随机输出一道菜</span></span><br><span class="line">&#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;head == <span class="literal">NULL</span>) <span class="comment">//判断链表是否为空</span></span><br><span class="line">	&#123;</span><br><span class="line">		color(<span class="number">12</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;还未存入任何菜品！\n&quot;</span>);</span><br><span class="line">		color(<span class="number">11</span>);</span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	List *q = <span class="built_in">list</span>;</span><br><span class="line">	Node *p = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">	<span class="type">int</span> n = random_number(q), i = <span class="number">1</span>; <span class="comment">//将随机出来的数赋予n，并初始i等于第一道菜，判断数字是否相等，即可找到那个随机出来的菜</span></span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (i == n) <span class="comment">//借助随机数来随机输出菜</span></span><br><span class="line">		&#123;</span><br><span class="line">			output(p);</span><br><span class="line">			color(<span class="number">11</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		i++;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">empty</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//清空链表</span></span><br><span class="line">&#123;</span><br><span class="line">	Node *p, *q;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	color(<span class="number">12</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;此操作将清空所有数据！\n输入 1 继续，输入 0 取消：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		n = get_int();</span><br><span class="line">	&#125; <span class="keyword">while</span> (!(n == <span class="number">0</span> || n == <span class="number">1</span>));</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (p = <span class="built_in">list</span>-&gt;head; p; p = q) <span class="comment">//遍历链表</span></span><br><span class="line">		&#123;</span><br><span class="line">			q = p-&gt;next;</span><br><span class="line">			<span class="built_in">free</span>(p);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">list</span>-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;清除完成！\n&quot;</span>);</span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">save</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//保存</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;head == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		color(<span class="number">12</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;还未存入任何菜品！保存为空！\n&quot;</span>);</span><br><span class="line">		color(<span class="number">11</span>);</span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Node *p = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">	FILE *fp = fopen(<span class="string">&quot;Menu.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (fp)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (p)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fprintf</span>(fp, <span class="string">&quot;\n%s %s %0.2f %d %s&quot;</span>, p-&gt;name, p-&gt;restaurant, p-&gt;price, p-&gt;fraction, p-&gt;comment);</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		fclose(fp);</span><br><span class="line">		color(<span class="number">11</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n保存成功\n&quot;</span>);</span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		color(<span class="number">12</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;保存失败，请自查或联系作者&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">read_txt</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//读取文件_初始链表</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">	Node *last;</span><br><span class="line">	Node *p1;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> f[<span class="number">5</span>];</span><br><span class="line">	FILE *fp = fopen(<span class="string">&quot;Menu.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	fgets(f, <span class="number">10</span>, fp); <span class="comment">//读取第一行，并进入下一行，防止bug</span></span><br><span class="line">	<span class="keyword">while</span> (!feof(fp)) <span class="comment">//当读取到文件结束符跳出循环结束读取</span></span><br><span class="line">	&#123;</span><br><span class="line">		last = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">		p1 = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">		p1-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s%s%f%d%s&quot;</span>, p1-&gt;name, p1-&gt;restaurant, &amp;p1-&gt;price, &amp;p1-&gt;fraction, p1-&gt;comment);</span><br><span class="line">		<span class="keyword">if</span> (last)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span> (last-&gt;next)</span><br><span class="line">			&#123;</span><br><span class="line">				last = last-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			last-&gt;next = p1;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">list</span>-&gt;head = p1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单链表的冒泡排序，这指来指去，作者一口气写完到断气的，不想加注释了，应该会有更好的算法，咕咕咕，以后优化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_ascending</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//菜品按价格从低到高排序</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>, i, k, num;</span><br><span class="line">	List *p = <span class="built_in">list</span>;</span><br><span class="line">	Node *p1 = <span class="built_in">list</span>-&gt;head, *p2, *p3;</span><br><span class="line">	List list_swap;</span><br><span class="line">	n = calculate(p);</span><br><span class="line">	list_swap.pa = p1;</span><br><span class="line">	list_swap.pb = p2;</span><br><span class="line">	list_swap.pc = p3;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		list_swap.pa = <span class="built_in">list</span>-&gt;head;		   <span class="comment">//当前</span></span><br><span class="line">		list_swap.pb = <span class="literal">NULL</span>;			   <span class="comment">//前一个</span></span><br><span class="line">		list_swap.pc = list_swap.pa-&gt;next; <span class="comment">//下一个</span></span><br><span class="line">		<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n - i - <span class="number">1</span>; k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (list_swap.pa-&gt;price &gt; list_swap.pc-&gt;price)</span><br><span class="line">			&#123;</span><br><span class="line">				swap1(p, &amp;list_swap);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				swap2(p, &amp;list_swap);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_descending</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//菜品按价格从高到低排序</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>, i, k, num;</span><br><span class="line">	List *p = <span class="built_in">list</span>;</span><br><span class="line">	Node *p1 = <span class="built_in">list</span>-&gt;head, *p2, *p3;</span><br><span class="line">	List list_swap;</span><br><span class="line">	n = calculate(p);</span><br><span class="line">	list_swap.pa = p1;</span><br><span class="line">	list_swap.pb = p2;</span><br><span class="line">	list_swap.pc = p3;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		list_swap.pa = <span class="built_in">list</span>-&gt;head;		   <span class="comment">//当前</span></span><br><span class="line">		list_swap.pb = <span class="literal">NULL</span>;			   <span class="comment">//前一个</span></span><br><span class="line">		list_swap.pc = list_swap.pa-&gt;next; <span class="comment">//下一个</span></span><br><span class="line">		<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n - i - <span class="number">1</span>; k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (list_swap.pa-&gt;price &lt; list_swap.pc-&gt;price)</span><br><span class="line">			&#123;</span><br><span class="line">				swap1(p, &amp;list_swap);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				swap2(p, &amp;list_swap);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_score</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//菜品按评分从高到低排序</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>, i, k, num;</span><br><span class="line">	List *p = <span class="built_in">list</span>;</span><br><span class="line">	Node *p1 = <span class="built_in">list</span>-&gt;head, *p2, *p3;</span><br><span class="line">	List list_swap;</span><br><span class="line">	n = calculate(p);</span><br><span class="line">	list_swap.pa = p1;</span><br><span class="line">	list_swap.pb = p2;</span><br><span class="line">	list_swap.pc = p3;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		list_swap.pa = <span class="built_in">list</span>-&gt;head;		   <span class="comment">//当前</span></span><br><span class="line">		list_swap.pb = <span class="literal">NULL</span>;			   <span class="comment">//前一个</span></span><br><span class="line">		list_swap.pc = list_swap.pa-&gt;next; <span class="comment">//下一个</span></span><br><span class="line">		<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n - i - <span class="number">1</span>; k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (list_swap.pa-&gt;fraction &lt; list_swap.pc-&gt;fraction)</span><br><span class="line">			&#123;</span><br><span class="line">				swap1(p, &amp;list_swap);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				swap2(p, &amp;list_swap);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">calculate</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//计算出单链表的节点个数</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">	Node *p = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		n++;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap1</span><span class="params">(List *<span class="built_in">list</span>, List *list_swap)</span> <span class="comment">//单链表冒泡排序的算法块1</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (list_swap-&gt;pb)</span><br><span class="line">	&#123;</span><br><span class="line">		list_swap-&gt;pb-&gt;next = list_swap-&gt;pa-&gt;next;</span><br><span class="line">		list_swap-&gt;pa-&gt;next = list_swap-&gt;pc-&gt;next;</span><br><span class="line">		list_swap-&gt;pc-&gt;next = list_swap-&gt;pa;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">list</span>-&gt;head = list_swap-&gt;pa-&gt;next;</span><br><span class="line">		list_swap-&gt;pa-&gt;next = list_swap-&gt;pc-&gt;next;</span><br><span class="line">		list_swap-&gt;pc-&gt;next = list_swap-&gt;pa;</span><br><span class="line">	&#125;</span><br><span class="line">	list_swap-&gt;pb = list_swap-&gt;pc;</span><br><span class="line">	list_swap-&gt;pc = list_swap-&gt;pa-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap2</span><span class="params">(List *<span class="built_in">list</span>, List *list_swap)</span> <span class="comment">//单链表冒泡排序的算法块2</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (list_swap-&gt;pb)</span><br><span class="line">	&#123;</span><br><span class="line">		list_swap-&gt;pa = list_swap-&gt;pa-&gt;next;</span><br><span class="line">		list_swap-&gt;pc = list_swap-&gt;pa-&gt;next;</span><br><span class="line">		list_swap-&gt;pb = list_swap-&gt;pb-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		list_swap-&gt;pa = list_swap-&gt;pa-&gt;next;</span><br><span class="line">		list_swap-&gt;pc = list_swap-&gt;pa-&gt;next;</span><br><span class="line">		list_swap-&gt;pb = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其他</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">random_number</span><span class="params">(List *<span class="built_in">list</span>)</span> <span class="comment">//随机生成不大于节点数的整数</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>, m = <span class="number">0</span>, sum = <span class="number">1</span>, i = <span class="number">0</span>;</span><br><span class="line">	List *q = <span class="built_in">list</span>;</span><br><span class="line">	srand((<span class="type">unsigned</span>)time(<span class="literal">NULL</span>) * <span class="number">12</span>);</span><br><span class="line">	m = calculate(q);</span><br><span class="line">	i = m;</span><br><span class="line">	<span class="keyword">while</span> (m &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		sum = sum * <span class="number">10</span>;</span><br><span class="line">		m = m / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		n = rand() % sum;</span><br><span class="line">		<span class="keyword">if</span> (n &lt;= i &amp;&amp; n &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			i = n;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">color</span><span class="params">(<span class="type">int</span> a)</span> <span class="comment">//控制台文本颜色</span></span><br><span class="line">&#123;</span><br><span class="line">	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), a); <span class="comment">//更改控制台文字颜色</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="部分功能截图"><a href="#部分功能截图" class="headerlink" title="部分功能截图"></a>部分功能截图</h1><p><strong>主菜单</strong></p>
<div><img src=/images/6-1.webp width="50%" height="50%"></div>

<p><strong>查找功能</strong></p>
<div><img src=/images/6-2.webp width="50%" height="50%"></div>
<div><img src=/images/6-5.webp width="50%" height="50%"></div>
<div><img src=/images/6-6.webp width="50%" height="50%"></div>
<div><img src=/images/6-7.webp width="50%" height="50%"></div>

<p><strong>排序</strong></p>
<div><img src=/images/6-3.webp width="50%" height="50%"></div>

<p><strong>修改功能</strong></p>
<div><img src=/images/6-4.webp width="45%" height="45%"></div>

<hr>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA/面向对象学习笔记(1)</title>
    <url>/article/bfb663c6.html</url>
    <content><![CDATA[<blockquote>
<p>所看教程（视频）：《浙江大学-翁恺-Java-面向对象程序设计》<br>作为我自己的复习笔记，也可以当做该视频的同步笔记</p>
</blockquote>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h2><p>面向对象是把<strong>一组数据结构</strong>和<strong>处理他们的方法</strong>组成对象。<br>把具有<strong>相同行为</strong>的对象归纳成<strong>类</strong><br>通过<strong>封装</strong>隐藏类的内部细节<br>通过<strong>继承</strong>使类得到泛化<br>通过<strong>多态</strong>实现基于对象类型的动态分派 </p>
<h2 id="只能操作对象"><a href="#只能操作对象" class="headerlink" title="只能操作对象"></a>只能操作对象</h2><p>一切事物都是调用加封装的结果<br>程序实现的一切功能都是<strong>调用</strong>加<strong>封装</strong>的结果<br>程序调用一个个对象<br>封装的也是一个个对象</p>
<h2 id="基于对象编程"><a href="#基于对象编程" class="headerlink" title="基于对象编程"></a>基于对象编程</h2><p>同一个事物，构成它的对象能有多种划分方式<br>机器语言、汇编语言将电路上的开关，由1和0组成的指令作为对象  </p>
<p>c语音将对象界定为一个个<strong>数据</strong>和一个个<strong>算法</strong><br>java将<strong>数据和算法的结合</strong>作为一个对象    </p>
<p>数据和算法分开的编程：面向过程编程<br>数据和算法结合的编程：面向对象编程  </p>
<h2 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h2><p>面向过程关注如何实现，关注如何做，将一个要实现的、复杂的功能，用一个或多个大函数去实现，再抽丝剥茧，用更多的函数去实现这些函数。<br>面向对象关注数据，方法就在这，处理什么数据（对象）  </p>
<p>面向对象中也有面向过程的代码，只是重点不在如何做，而是对对象的<strong>抽象</strong>与<strong>扩展</strong><br>对于实现功能的核心算法，面向对象与面向过程并无区别，c语言也可通过结构体与函数指针实现面向对象    </p>
<p>面向对象的<strong>封装</strong>、<strong>继承</strong>和<strong>多态</strong>，使得代码、功能的扩展、复用变得非常容易  </p>
<p>这两种编程思想都是为了解决实际的问题  </p>
<details class="folding-tag" ><summary> 如何烧水 </summary>
              <div class='content'>
              <p><p><strong>转自互联网</strong><br>面向过程的烧水：<br>读取热水壶内水的水温，缓存<br>电热装置将发热量缓存<br>损耗算法读取发热量，并将将水的提升温度缓存<br>与水温相加<br>将这个数值重新赋给水温<br>直到温度达到沸点，完成烧水    </p></p><p><p>面向对象的烧水：<br>定义热水壶类，继承自盛水容器，温度改变装置，温度计，水温控制接口<br>实例化一个热水壶类对象，命名为「我的热水壶」<br>为终止温度赋值：水.沸点<br>我的热水壶.温度处理(终止温度);  </p></p><p><p>另：个人实现的烧水方法，仅图一乐：<br>为热水壶类实装烧水接口：实装水温监视事件<br>为热水壶类实装烧水接口：定义一个水温枚举器<br>为热水壶类实装烧水接口：实装温度处理方法<br>执行流程：<br>1.执行继承自盛水容器类的盛水方法<br>2.注册继承自温度改变装置类的温度监视事件<br>3.遍历水温枚举器：如果水温提升，则返回当前水温<br>4.如果返回值接近终止温度，跳出枚举过程，完成烧水。<br>5.否则，继续遍历枚举器。  </p></p><p><p>你肯定会问这哪里优雅了，确实，看起来是复杂了不少，但再仔细想一想，这一整套流程只要稍加修改，稍加改变接口实现，你就可以直接用这个「热水壶类」实现一个热水器，甚至还可以是一个冰箱。<br>毕竟烧的又不一定是水，又不一定要烧水，又不一定要用壶烧水，又不一样要是个烧水壶<br></p>
              </div>
            </details></p>
<hr>
<h1 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h1><p>对象是实体，需要被创建，可以为我们做事情<br>类是规范，根据类的定义来创建对象    </p>
<p>一个类可以有多个对象  </p>
<p>动物是一个类，每个对象，猫，狗，都是动物类的实体<br>我们用类制造出对象，再给对象所需要的数据，对象可以利用这些数据去做事情，我们大可无需知道对象是如何利用这些数据的，因为我们只要求，这个对象能实现一些功能  </p>
<h2 id="面向对象的思维"><a href="#面向对象的思维" class="headerlink" title="面向对象的思维"></a>面向对象的思维</h2><p>我们看到一个事物<br>它有什么东西？<br>能干什么？  </p>
<h2 id="第一个程序：自动售货机"><a href="#第一个程序：自动售货机" class="headerlink" title="第一个程序：自动售货机"></a>第一个程序：自动售货机</h2><p>售货机（VendingMachine）有什么？<br>商品的价格：price<br>显示的余额：balance<br>卖了多少钱：total  </p>
<p>售货机能干什么？<br>输出一些提示：showPromot<br>取得一些钱：insertMomey<br>告诉用户余额：showBalance<br>给我们商品（食物）：getFood<br>告诉商家总收入：showTotal</p>
<p>我们需要设计VendingMachine这个类，这个类有3个属性，有5个动作（方法）<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//创建一个类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VendingMachine</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">80</span>;<span class="comment">//商品价格(假设就只有一个商品，且价格固定)</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">balance</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//当前余额</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//总收入</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//钱</span></span><br><span class="line">    Scanner s=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showPromot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//输出提示</span></span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertMomey</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 投入钱，更新余额</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请充值余额：&quot;</span>);</span><br><span class="line">        amount = s.nextInt();</span><br><span class="line">        balance = balance + amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showBalance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//输出余额</span></span><br><span class="line">        System.out.println(<span class="string">&quot;现在余额： &quot;</span>+ balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getFood</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//给食物</span></span><br><span class="line">        <span class="keyword">if</span> (balance &gt;= price) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;给你。&quot;</span>);</span><br><span class="line">            balance = balance - price;</span><br><span class="line">            total = total + price;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有足够的余额！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showTotal</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目前总收入：&quot;</span>+total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>有了这个类，就可以通过类去制造一个对象,并让对象去实现一些功能<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//制作一个对象</span></span><br><span class="line">        <span class="type">VendingMachine</span> <span class="variable">vm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VendingMachine</span>();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        vm.showPromot();</span><br><span class="line">        vm.showBalance();</span><br><span class="line">        <span class="keyword">while</span> (t) &#123;</span><br><span class="line">            vm.insertMomey();</span><br><span class="line">            vm.getFood();</span><br><span class="line">            vm.showBalance();</span><br><span class="line">            vm.showTotal();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行结果：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">欢迎！</span><br><span class="line">现在余额： 0</span><br><span class="line">请充值余额：100</span><br><span class="line">给你。</span><br><span class="line">现在余额： 20</span><br><span class="line">目前总收入：80</span><br><span class="line">请充值余额：20</span><br><span class="line">没有足够的余额！</span><br><span class="line">现在余额： 40</span><br><span class="line">目前总收入：80</span><br><span class="line">请充值余额：40</span><br><span class="line">给你。</span><br><span class="line">现在余额： 0</span><br><span class="line">目前总收入：160</span><br><span class="line">请充值余额：</span><br></pre></td></tr></table></figure></p>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>使用new运算符，来创建这个类的一个对象<br>然后将这个对象交给这个类型的一个变量<br>VendingMachine vm = new VendingMachine();  </p>
<p><strong>对象变量是对象的管理者</strong>  </p>
<h2 id="让对象做事情"><a href="#让对象做事情" class="headerlink" title="让对象做事情"></a>让对象做事情</h2><p>使用 . 运算符<br>vm.insertMomey();<br>vm.getFood();<br>通过.运算符调用某个对象的方法  </p>
<h2 id="成员变量、成员方法"><a href="#成员变量、成员方法" class="headerlink" title="成员变量、成员方法"></a>成员变量、成员方法</h2><p>类定义了<strong>对象中</strong>所具有的变量，这些变量称作成员变量<br>每个对象有自己的变量，和同一个类的其他对象是分开的<br>在方法中可以直接写成员变量（方法）的名字来访问成员变量（方法）（省去了this关键字）  </p>
<p>java会给成员变量默认0值</p>
<p>成员变量（方法）分为实例变量（方法）和类变量（方法）<br>加了static的就是类变量（方法）  </p>
<h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><p>声明类变量： <strong>static</strong> &lt;类型&gt; &lt;变量名&gt;  </p>
<p>访问类变量：<br>通过对象访问：&lt;对象名&gt;.&lt;类变量名&gt;<br>通过类访问：&lt;类名&gt;.&lt;类变量名&gt;  </p>
<p>类变量不属于任何一个对象，属于这个类，但任何一个对象都拥有这个变量  </p>
<p>修改类变量的值，所有对象中的该变量的值都会改变  </p>
<p>类变量的初始化只会进行一次（在类的装载时）  </p>
<h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>声明类方法： <strong>static</strong> &lt;返回类型&gt; &lt;方法名&gt;() {  }  </p>
<p>static方法只能调用static方法，只能访问static变量   </p>
<p>类方法可以通过类的名字去访问，也可以通过对象去访问  </p>
<h2 id="本地（局部）变量"><a href="#本地（局部）变量" class="headerlink" title="本地（局部）变量"></a>本地（局部）变量</h2><p>定义在<strong>方法内部</strong>的变量是本地变量<br>本地变量的生存期和作用域都是方法内部  </p>
<p>本地变量没被赋值，会被禁止使用  </p>
<p>成员变量的生存期是对象的生存期，作用域是类内部的成员方法 </p>
<h3 id="var局部变量"><a href="#var局部变量" class="headerlink" title="var局部变量"></a>var局部变量</h3><p>使用var时必须指出初始值(不可以是null)<br>var &lt;变量名&gt; = &lt;值&gt;;<br>编译器可以推断出该变量的类型，且之后该变量的类型都是确定的，不可以给该变量赋其它类型的值</p>
<h2 id="对象初始化"><a href="#对象初始化" class="headerlink" title="对象初始化"></a>对象初始化</h2><p>可以在定义成员变量的地方直接赋值<br>int price = 80;  </p>
<p>在创建一个对象的过程中，会首先去做各种初始化的动作</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>与类同名的函数，没有返回值<br>在创建一个对象时会自动调用的方法<br>应该是public<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">VendingMachine()&#123;</span><br><span class="line">    total = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">VendingMachine(<span class="type">int</span> price )&#123;</span><br><span class="line">    <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>一个类里可以有多个<strong>不同参数</strong>的构造方法<br>创建对象的时候给出不同的参数值，就会自动调用不同的构造方法<br>通过this()还可以在构造方法中调用其他构造方法，写在第一行，且只能使用一次<br>一个类里的同名但参数表不同的方法构成了重载关系  </p>
<h2 id="对象的识别"><a href="#对象的识别" class="headerlink" title="对象的识别"></a>对象的识别</h2><p>通过巧妙的思想，识别不同出对象的特点，让类更通用<br>例如，要实现一个时钟<br>可以设计一个类，通过这个类可以制造出时、分、秒三个对象  </p>
<h2 id="对象的交互"><a href="#对象的交互" class="headerlink" title="对象的交互"></a>对象的交互</h2><p>时、分、秒三个对象可以共同组成一个时钟对象<br>控制时、分、秒之间的交互在时钟对象的方法中完成<br><figure class="highlight java"><figcaption><span>Display.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Display</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Display</span><span class="params">(<span class="type">int</span> limit)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.limit = limit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span>&#123;</span><br><span class="line">        value++;</span><br><span class="line">        <span class="keyword">if</span>(value == limit)&#123;</span><br><span class="line">            value = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>Clock.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clock</span> &#123;</span><br><span class="line">    <span class="type">Display</span> <span class="variable">hour</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Display</span>(<span class="number">24</span>);</span><br><span class="line">    <span class="type">Display</span> <span class="variable">minute</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Display</span>(<span class="number">60</span>);</span><br><span class="line">    <span class="type">Display</span> <span class="variable">second</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Display</span>(<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            second.increase();</span><br><span class="line">            <span class="keyword">if</span> (second.getValue() == <span class="number">0</span>) &#123;</span><br><span class="line">                minute.increase();</span><br><span class="line">                <span class="keyword">if</span> (minute.getValue() == <span class="number">0</span>) &#123;</span><br><span class="line">                    hour.increase();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%02d:%02d:%02d\n&quot;</span>, hour.getValue(), minute.getValue(), second.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Main.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Clock</span> <span class="variable">clock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Clock</span>();</span><br><span class="line">        clock.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h1><p><strong>private</strong>：这个成员是私有的，只有在类的内部（成员方法和定义初始化 ）才能访问<br>一般来说，成员变量都该是private<br><strong>这个限制是对类的而不是对对象的</strong>：同一个类的不同对象可以互相访问对方的成员变量  </p>
<p><strong>public</strong>：任何人都可以访问<br>任何人指的是在任何类的方法或定义初始化中可以使用<br>使用指的是调用、访问或定义变量<br>很多的成员方法都是public<br>public的类，类名和文件名要一致，一个编译单元只能有一个public的类  </p>
<p><strong>protected</strong>：受保护的成员  </p>
<p><strong>friendly</strong>：默认属性，友好的成员  </p>
<div class="table-container">
<table>
<thead>
<tr>
<th>访问属性</th>
<th>本类</th>
<th>同包</th>
<th>子类</th>
<th>其它</th>
</tr>
</thead>
<tbody>
<tr>
<td>private</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>friendly</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody>
</table>
</div>
<hr>
<h1 id="包package"><a href="#包package" class="headerlink" title="包package"></a>包package</h1><p>包是java管理类的一个机制<br>源文件中同名类要在<strong>不同</strong>包内  </p>
<p>声明该类的指定包名<br>package &lt;包名&gt;;  </p>
<p>包名中的.代表文件夹的层次  </p>
<p>没有package语句的源程序都将视为在同一个无名包内  </p>
<h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>使用import语句引入包中的类和接口  </p>
<p>import test.Hallo<br>test包中的Hallo类  </p>
<p>只要用到的类和本类不在同一个包内，就要import它  </p>
<p>如果不使用import，当要用到类时要给出全名：&lt;包名&gt;.&lt;类名&gt;  </p>
<p>引入一个包内的所有东西：import &lt;包名&gt;.*;（注意同名类的冲突） </p>
<hr>
<h1 id="NoteBook例子"><a href="#NoteBook例子" class="headerlink" title="NoteBook例子"></a>NoteBook例子</h1><p>记事本可以做什么？<br>1、能存储记录<br>2、不限制能存储的记录的数量<br>3、能知道已经存储的记录的数量<br>4、能查看存进去的每一条记录<br>5、能删除一条记录<br>6、能列出所有的记录  </p>
<p>确定需求后，进行接口设计<br><figure class="highlight java"><figcaption><span>接口设计</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoteBook</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//添加内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//放了多少个</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNote</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">//得到指定位置的内容</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeNote</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] list() &#123;</span><br><span class="line">        <span class="comment">//返回全部内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>接口设计完，考虑实际功能的实现，首先是数据的存放  </p>
<h2 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a>顺序容器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ArrayList&lt;String&gt; notes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();  </span><br></pre></td></tr></table></figure>
<p>用来存放String的一个ArrayList<br>ArrayList内的东西是有顺序的，是加入数据的顺序，形成对应下标的索引（从0开始）  </p>
<p>这种类型叫做范型类：泛型类封装不特定于特定数据类型的操作<br>这种范型类是一种容器  </p>
<p>容器类有两个类型：容器的类型、元素的类型  </p>
<p>利用容器类的方法可以实现需要的功能<br>notes.add(s);  //向容器添加数据<br>notes.size();  //容器存了多少个东西<br>notes.get(1); //得到1位置处的数据</p>
<p>完成全部功能接口<br><figure class="highlight java"><figcaption><span>NoteBook.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoteBook</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; notes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();<span class="comment">//容器类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//添加内容</span></span><br><span class="line">        notes.add(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String s, <span class="type">int</span> location)</span> &#123;</span><br><span class="line">        <span class="comment">//加到指定位置前，后面的内容下标后推</span></span><br><span class="line">        notes.add(location, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//放了多少个</span></span><br><span class="line">        <span class="keyword">return</span> notes.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNote</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">//得到指定位置的内容</span></span><br><span class="line">        <span class="keyword">return</span> notes.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeNote</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">//删除，后面下标前移，因为remove方法自会抛异常，所以无需返回boolean</span></span><br><span class="line">        notes.remove(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] list() &#123;</span><br><span class="line">        <span class="comment">//返回全部内容</span></span><br><span class="line">        String[] a = <span class="keyword">new</span> <span class="title class_">String</span>[notes.size()];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for (int i=0; i&lt; notes.size(); i++)&#123;</span></span><br><span class="line">        <span class="comment">//    a[i] = notes.get(i);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        notes.toArray(a);<span class="comment">//会自己把数组按顺序填好</span></span><br><span class="line">        <span class="comment">//要熟悉系统类库里有的方法，无需重复造轮子</span></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>写出上层程序<br><figure class="highlight java"><figcaption><span>Main.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NoteBook</span> <span class="variable">nb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NoteBook</span>();</span><br><span class="line"></span><br><span class="line">        nb.add(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">        nb.add(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">        System.out.println(nb.getSize());</span><br><span class="line">        System.out.println(nb.getNote(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        nb.add(<span class="string">&quot;third&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(nb.getNote(<span class="number">1</span>));</span><br><span class="line">        System.out.println(nb.getNote(<span class="number">2</span>));</span><br><span class="line">        System.out.println(nb.getSize());</span><br><span class="line"></span><br><span class="line">        nb.removeNote(<span class="number">1</span>);</span><br><span class="line">        String[] b = nb.list();</span><br><span class="line">        <span class="keyword">for</span> (String s : b) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">second</span><br><span class="line">third</span><br><span class="line">second</span><br><span class="line">3</span><br><span class="line">first</span><br><span class="line">second</span><br></pre></td></tr></table></figure></p>
<h2 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] a = <span class="keyword">new</span> <span class="title class_">String</span>[notes.size()];  </span><br></pre></td></tr></table></figure>
<p>对象数组中的每个元素都是对象的管理者而非对象本身<br>当创建了一个对象数组，只是管理者们被创建了，但对象还没有，得想办法把每个对象创建出来  </p>
<h3 id="for-each循环"><a href="#for-each循环" class="headerlink" title="for-each循环"></a>for-each循环</h3><p>对于普通数组：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">    a[i] = i;<span class="comment">//赋值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> k : a ) &#123;</span><br><span class="line">    System.out.println(k);</span><br><span class="line">    k++;<span class="comment">//每个k都是a中元素的复制品，不会起作用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>对于对象数组：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Value[] a = <span class="keyword">new</span> <span class="title class_">Value</span>[<span class="number">10</span>]; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    a[i] = <span class="keyword">new</span> <span class="title class_">Value</span>[];</span><br><span class="line">    a[i].set(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( Value v : a )&#123;</span><br><span class="line">    System.out.println(v.get());</span><br><span class="line">    v.set(<span class="number">0</span>);<span class="comment">//起作用，因为对象数组存的是对象管理者，v=a[i]，v也会成为对象管理者</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="集合容器"><a href="#集合容器" class="headerlink" title="集合容器"></a>集合容器</h2><p>集合容器内所有元素都不相同<br>而且里面的元素不排序<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">s.add(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">s.add(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">s.add(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">System.out.println(s);<span class="comment">//容器都可以这样输出</span></span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[second, first]</span><br></pre></td></tr></table></figure></p>
<h2 id="public-String-toString"><a href="#public-String-toString" class="headerlink" title="public String toString"></a>public String toString</h2><p>在java中只要类中实现了这样一个方法<br>就可以直接用对象名输出这个对象<br>容器当中都有这样一个方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p>
<h2 id="Hash表"><a href="#Hash表" class="headerlink" title="Hash表"></a>Hash表</h2><p>例子：数字与美元硬币名字对应，查找硬币名称<br>1=penny<br>5=nickel<br>10=dime<br>25=quarter<br>50=half-dollar</p>
<p>定义接口：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">(<span class="type">int</span> amount)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>为什么不用switch-case？<br>体现在代码中的硬编码越少越好  </p>
<p>使用Hash表（一种数据结构）<br>在这个表中，所有东西是以一对值放入的，一个叫做key（键），一个叫做值<br>一个key对应一个值，可以用key取值<br>Hash表中的元素没有顺序<br><figure class="highlight java"><figcaption><span>Coin.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coin</span> &#123;</span><br><span class="line">    <span class="comment">//不能使用int，容器当中所有的类型都得是对象,而不能是基本类型</span></span><br><span class="line">    <span class="comment">//Integer是int的包裹类型</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, String&gt; coinnames = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Coin</span><span class="params">()</span>&#123;</span><br><span class="line">        coinnames.put(<span class="number">1</span>, <span class="string">&quot;penny&quot;</span>);<span class="comment">//1对应penny</span></span><br><span class="line">        coinnames.put(<span class="number">10</span>, <span class="string">&quot;dime&quot;</span>);</span><br><span class="line">        coinnames.put(<span class="number">25</span>, <span class="string">&quot;quarter&quot;</span>);</span><br><span class="line">        coinnames.put(<span class="number">50</span>, <span class="string">&quot;half-dolar&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(coinnames.keySet().size());<span class="comment">//keySet()，把所有key做为一个HashSet的集合给你，在这个集合可以得到size</span></span><br><span class="line">        System.out.println(coinnames);<span class="comment">//也可以直接输出</span></span><br><span class="line">        coinnames.put(<span class="number">50</span>, <span class="string">&quot;五十&quot;</span>);<span class="comment">//会替换掉前面的</span></span><br><span class="line">        System.out.println(coinnames);</span><br><span class="line">        <span class="keyword">for</span> (Integer k : coinnames.keySet())&#123;<span class="comment">//遍历Hash表</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> coinnames.get(k);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">(<span class="type">int</span> amount)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (coinnames.containsKey(amount))</span><br><span class="line">            <span class="keyword">return</span> coinnames.get(amount);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&quot;NOT FOUND&quot;</span>;<span class="comment">//不判断的话，不存在会返回null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>Main.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">Coin</span> <span class="variable">coin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Coin</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> coin.getName(amount);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&#123;<span class="number">1</span>=penny, <span class="number">50</span>=half-dolar, <span class="number">25</span>=quarter, <span class="number">10</span>=dime&#125;</span><br><span class="line">&#123;<span class="number">1</span>=penny, <span class="number">50</span>=五十, <span class="number">25</span>=quarter, <span class="number">10</span>=dime&#125;</span><br><span class="line">penny</span><br><span class="line">五十</span><br><span class="line">quarter</span><br><span class="line">dime</span><br><span class="line">dime</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="继承与子类"><a href="#继承与子类" class="headerlink" title="继承与子类"></a>继承与子类</h1><h2 id="媒体资料库设计"><a href="#媒体资料库设计" class="headerlink" title="媒体资料库设计"></a>媒体资料库设计</h2><p>和NoteBook一样，需要设计一个类,用类去表达一种媒体（CD,DVD）<br>然后用一个媒体类的容器去装媒体对象，一个资料库就完成了  </p>
<p>CD有什么？<br>名称：title<br>艺术家：artist<br>多少首歌：numofTracks<br>持续时间：playingTime<br>是否被借出：gotIt<br>描述：comment  </p>
<p>能做什么？<br>输出一些信息：print</p>
<figure class="highlight java"><figcaption><span>CD.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CD</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String artist;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numofTracks;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> playingTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">gotIt</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> String comment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CD</span><span class="params">(String title, String artist, <span class="type">int</span> numofTracks, <span class="type">int</span> playingTime, String comment)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.artist = artist;</span><br><span class="line">        <span class="built_in">this</span>.numofTracks = numofTracks;</span><br><span class="line">        <span class="built_in">this</span>.playingTime = playingTime;</span><br><span class="line">        <span class="built_in">this</span>.comment = comment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;CD:&quot;</span>);</span><br><span class="line">        System.out.print(title+<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        System.out.println(artist);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Database.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Database</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;CD&gt; listCD = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CD&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(CD cd)</span>&#123;</span><br><span class="line">        listCD.add(cd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (CD cd : listCD)&#123;</span><br><span class="line">            cd.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Database</span> <span class="variable">db</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Database</span>();</span><br><span class="line">        db.add(<span class="keyword">new</span> <span class="title class_">CD</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="number">4</span>,<span class="number">60</span>,<span class="string">&quot;bb&quot;</span>));</span><br><span class="line">        db.add(<span class="keyword">new</span> <span class="title class_">CD</span>(<span class="string">&quot;adc&quot;</span>,<span class="string">&quot;dgh&quot;</span>,<span class="number">5</span>,<span class="number">40</span>,<span class="string">&quot;ak&quot;</span>));</span><br><span class="line">        db.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在资料库中已经可以存各种CD媒体了<br>但我们还想在资料库中存DVD媒体或者其它媒体类型  </p>
<p>当然，我们可以再创建一个类表示DVD<br><figure class="highlight java"><figcaption><span>DVD.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DVD</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String director;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> playingTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">gotIt</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> String comment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DVD</span><span class="params">(String title, String director, <span class="type">int</span> playingTime, String comment)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.director = director;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.playingTime = playingTime;</span><br><span class="line">        <span class="built_in">this</span>.comment = comment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;DVD:&quot;</span>);</span><br><span class="line">        System.out.print(title+<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        System.out.println(director);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>设计好类后在Database.java里创建一个放DVD的容器,以及配套的方法<br><figure class="highlight java"><figcaption><span>Database.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Database</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;CD&gt; listCD = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CD&gt;();</span><br><span class="line">    <span class="comment">//+</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;DVD&gt; listDVD = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;DVD&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(CD cd)</span>&#123;</span><br><span class="line">        listCD.add(cd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//+</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(DVD dvd)</span>&#123;</span><br><span class="line">        listCD.add(dvd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (CD cd : listCD)&#123;</span><br><span class="line">            cd.print();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//+</span></span><br><span class="line">        <span class="keyword">for</span>(DVD dvd : listDVD)&#123;</span><br><span class="line">            dvd.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Database</span> <span class="variable">db</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Database</span>();</span><br><span class="line">        db.add(<span class="keyword">new</span> <span class="title class_">CD</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="number">4</span>,<span class="number">60</span>,<span class="string">&quot;bb&quot;</span>));</span><br><span class="line">        db.add(<span class="keyword">new</span> <span class="title class_">CD</span>(<span class="string">&quot;adc&quot;</span>,<span class="string">&quot;dgh&quot;</span>,<span class="number">5</span>,<span class="number">40</span>,<span class="string">&quot;ak&quot;</span>));</span><br><span class="line">        <span class="comment">//+</span></span><br><span class="line">        db.add(<span class="keyword">new</span> <span class="title class_">DVD</span>(<span class="string">&quot;add&quot;</span>,<span class="string">&quot;eee&quot;</span>,<span class="number">45</span>,<span class="string">&quot;qqq&quot;</span>));</span><br><span class="line">        db.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>现在资料库中能存放两种媒体<br>运行一下：<br><figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">CD:abc:aaa</span><br><span class="line">CD:adc:dgh</span><br><span class="line">DVD:add:eee</span><br></pre></td></tr></table></figure><br>上面发生了什么？<br>我们创建了一个资料库类<br>资料库类里有两个容器，用来存放两种不同类型的媒体的对象管理者  </p>
<div><img src=/images/7-1.webp width="70%" height="70%"></div>

<p>这样的结构虽然能实现我们需要的功能，但DVD和CD类几乎一模一样<br>出现了很多代码复制，这是代码质量不良的表现<br>当我们需要修改print，add等方法，就得逐个去改<br>当我们需要新增一种媒体，就得为它做很多的工作  </p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>CD和DVD类很相似，我们可以从中提取一些它们共有的东西封装成一个类Item<br>Item可以表达CD或者DVD<br>而Database只需管Item  </p>
<figure class="highlight java"><figcaption><span>Item.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> playingTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">gotIt</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> String comment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Item</span><span class="params">(String title, <span class="type">int</span> playingTime, <span class="type">boolean</span> gotIt, String comment)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.playingTime = playingTime;</span><br><span class="line">        <span class="built_in">this</span>.gotIt = gotIt;</span><br><span class="line">        <span class="built_in">this</span>.comment = comment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Item</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(title+<span class="string">&quot;:&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>CD.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CD</span> <span class="keyword">extends</span> <span class="title class_">Item</span>&#123;</span><br><span class="line"><span class="comment">//    private String title;</span></span><br><span class="line">    <span class="keyword">private</span> String artist;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numofTracks;</span><br><span class="line"><span class="comment">//    private int playingTime;</span></span><br><span class="line"><span class="comment">//    private boolean gotIt = false;</span></span><br><span class="line"><span class="comment">//    private String comment;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CD</span><span class="params">(String title, String artist, <span class="type">int</span> numofTracks, <span class="type">int</span> playingTime, String comment)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(title, playingTime, <span class="literal">false</span>, comment);</span><br><span class="line"><span class="comment">//        this.title = title;</span></span><br><span class="line">        <span class="built_in">this</span>.artist = artist;</span><br><span class="line">        <span class="built_in">this</span>.numofTracks = numofTracks;</span><br><span class="line"><span class="comment">//        this.playingTime = playingTime;</span></span><br><span class="line"><span class="comment">//        this.comment = comment;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;CD:&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.print();</span><br><span class="line">        System.out.println(artist);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>DVD.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DVD</span> <span class="keyword">extends</span> <span class="title class_">Item</span>&#123;</span><br><span class="line"><span class="comment">//    private String title;</span></span><br><span class="line">    <span class="keyword">private</span> String director;</span><br><span class="line"><span class="comment">//    private int playingTime;</span></span><br><span class="line"><span class="comment">//    private boolean gotIt = false;</span></span><br><span class="line"><span class="comment">//    private String comment;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DVD</span><span class="params">(String title, String director, <span class="type">int</span> playingTime, String comment)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(title, playingTime, <span class="literal">false</span>, comment);</span><br><span class="line">        <span class="built_in">this</span>.director = director;</span><br><span class="line"><span class="comment">//        this.title = title;</span></span><br><span class="line"><span class="comment">//        this.playingTime = playingTime;</span></span><br><span class="line"><span class="comment">//        this.comment = comment;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;DVD:&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.print();</span><br><span class="line">        System.out.println(director);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Database.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Database</span> &#123;</span><br><span class="line"><span class="comment">//    private ArrayList&lt;CD&gt; listCD = new ArrayList&lt;CD&gt;();</span></span><br><span class="line"><span class="comment">//    private ArrayList&lt;DVD&gt; listDVD = new ArrayList&lt;DVD&gt;();</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Item&gt; listItem = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Item&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public void add(CD cd)&#123;</span></span><br><span class="line"><span class="comment">//        listCD.add(cd);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    public void add(DVD dvd)&#123;</span></span><br><span class="line"><span class="comment">//        listCD.add(dvd);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Item item)</span>&#123;</span><br><span class="line">        listItem.add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        for (CD cd : listCD)&#123;</span></span><br><span class="line"><span class="comment">//            cd.print();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        for(DVD dvd : listDVD)&#123;</span></span><br><span class="line"><span class="comment">//            dvd.print();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (Item item : listItem)&#123;</span><br><span class="line">            item.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Database</span> <span class="variable">db</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Database</span>();</span><br><span class="line">        db.add(<span class="keyword">new</span> <span class="title class_">CD</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="number">4</span>,<span class="number">60</span>,<span class="string">&quot;bb&quot;</span>));</span><br><span class="line">        db.add(<span class="keyword">new</span> <span class="title class_">CD</span>(<span class="string">&quot;adc&quot;</span>,<span class="string">&quot;dgh&quot;</span>,<span class="number">5</span>,<span class="number">40</span>,<span class="string">&quot;ak&quot;</span>));</span><br><span class="line">        db.add(<span class="keyword">new</span> <span class="title class_">DVD</span>(<span class="string">&quot;add&quot;</span>,<span class="string">&quot;eee&quot;</span>,<span class="number">45</span>,<span class="string">&quot;qqq&quot;</span>));</span><br><span class="line">        db.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行一下：<br><figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">CD:abc:aaa</span><br><span class="line">CD:adc:dgh</span><br><span class="line">DVD:add:eee</span><br></pre></td></tr></table></figure><br>上面发生了什么？<br>CD extends Item：CD扩展了Item<br>即CD变成了Item的子类<br>这就是<strong>继承</strong><br>CD得到了Item里所有的东西  </p>
<div><img src=/images/7-2.webp width="70%" height="70%"></div>

<h2 id="子类与父类"><a href="#子类与父类" class="headerlink" title="子类与父类"></a>子类与父类</h2><p>当父类里的东西是private时<br>private String title;<br>子类得到了这个东西，但不能用（可以通过父类的方法去用）<br>解决办法：将private改成protect<br>但这样不好，有很多时候父类和子类不在同一个包内  </p>
<p>title本来就是父类的东西<br>可以让title在父类中初始化完，再让子类得到title<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Item</span><span class="params">(String title)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.title = title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在子类构造器中使用super()来得到父类的title<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="title function_">CD</span><span class="params">(String title)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h3><p>当程序初始化对象时，会先运行super()<br>然后去运行父类的构造器，再回来继续运行自己的构造器  </p>
<p>super():去父类调用一个没有参数的构造器<br>super(&lt;参数&gt;):去父类调用一个有对应参数的构造器  </p>
<p>当子类没有super(),会默认去调用父类没有参数的构造器  </p>
<p>通过super关键字来实现对父类成员的访问，用来引用当前对象的父类<br>super.&lt;父类成员&gt;  </p>
<p>通过this来区分子类父类中的同名成员<br>this.aaa();   // this 调用自己的方法<br>super.aaa();  // super 调用父类方法  </p>
<h2 id="子类和子类型"><a href="#子类和子类型" class="headerlink" title="子类和子类型"></a>子类和子类型</h2><p>类定义了类型<br>子类定义了子类型  </p>
<p>子类的对象可以被当作父类的对象来使用<br>-赋值给父类的变量（父类的对象管理者可以管理子类的对象）  </p>
<div><img src=/images/7-3.webp width="70%" height="70%"></div>

<p>-传递给需要父类对象的方法  </p>
<p>-放进存放父类对象的容器里  </p>
<div><img src=/images/7-4.webp width="70%" height="70%"></div>

<div><img src=/images/7-5.webp width="35%" height="35%"></div>

<hr>
<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="多态变量"><a href="#多态变量" class="headerlink" title="多态变量"></a>多态变量</h2><p>所有的<strong>对象变量</strong>都是<strong>多态</strong>的（它们能保存不止一种类型的对象，不同时刻可以放不同类型的对象（例如父类的对象变量放子类的对象））<br>它们可以保存的是声明类型的对象，或声明类型的子类的对象  </p>
<p>当把<strong>子类的对象</strong>赋给<strong>父类的变量</strong>的时候，就发生了<strong>向上造型</strong>  </p>
<p>每一个java的对象变量，都具有两个类型<br>一个是<strong>声明类型</strong><br>一个是<strong>动态类型</strong><br>有时候两者是一致的，有时候又不一样  </p>
<p>这就是变量的多态（在运行过程中，它所管理的对象类型是会变化的）  </p>
<h2 id="造型"><a href="#造型" class="headerlink" title="造型"></a>造型</h2><p>造型：把一个类型的<strong>对象</strong>，赋给另一个类型的<strong>变量</strong></p>
<p>对象变量的赋值并不是把一个对象赋给另一个对象（注在c++中可以做两个对象之间的赋值）<br>而是让这两个对象的管理者去<strong>管理同一个对象</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">//原本这个String类型的对象变量s管理着一个对象</span></span><br><span class="line"><span class="comment">//这个对象里面有个&quot;hello&quot;</span></span><br><span class="line">s = <span class="string">&quot;bye&quot;</span>;</span><br><span class="line"><span class="comment">//后来s去管理另一个对象，里面有&quot;bye&quot;</span></span><br></pre></td></tr></table></figure><br>并不是将bye替换掉hello，java不能做这种事  </p>
<p>java中”=“的赋值运算，实际上是在改变指向<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> <span class="string">&quot;bye&quot;</span>;</span><br><span class="line">s = t;</span><br><span class="line"><span class="comment">//原本s和t各管理一个对象，现在s和t管理同一个对象，里面有”hello“</span></span><br></pre></td></tr></table></figure><br>当给一个<strong>对象变量</strong>管理着与它声明（静态）类型<strong>不符</strong>的对象时，就发生了<strong>造型</strong><br><figure class="highlight java"><figcaption><span>CD是Item的子类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">CD</span> <span class="variable">cd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CD</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="number">4</span>,<span class="number">60</span>,<span class="string">&quot;bb&quot;</span>);</span><br><span class="line"><span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> cd;</span><br><span class="line"><span class="comment">//把子类的对象赋给父类的变量，让父类的对象变量去管理子类的对象</span></span><br></pre></td></tr></table></figure><br>父类对象是不能直接赋给子类对象变量的<br>但可以强制把父类对象当成子类的对象，然后去造型<br><figure class="highlight java"><figcaption><span>CD是Item的子类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">CD</span> <span class="variable">cd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CD</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="number">4</span>,<span class="number">60</span>,<span class="string">&quot;bb&quot;</span>);</span><br><span class="line"><span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> cd;</span><br><span class="line"><span class="type">CD</span> <span class="variable">cc</span> <span class="operator">=</span> item;<span class="comment">//不行。父类对象不能直接交给子类对象变量去管理</span></span><br><span class="line"><span class="type">CD</span> <span class="variable">cc</span> <span class="operator">=</span> (CD)item;<span class="comment">//行，因为item已经管理着一个CD的对象了</span></span><br><span class="line"><span class="comment">//强制把item的类型当做CD</span></span><br></pre></td></tr></table></figure><br>如果没有Item item = cd;<br><figure class="highlight java"><figcaption><span>CD是Item的子类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">CD</span> <span class="variable">cd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CD</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="number">4</span>,<span class="number">60</span>,<span class="string">&quot;bb&quot;</span>);</span><br><span class="line"><span class="comment">//Item item = cd;</span></span><br><span class="line"><span class="type">CD</span> <span class="variable">cc</span> <span class="operator">=</span> (CD)item;<span class="comment">//编译可以通过，但运行会出错</span></span><br></pre></td></tr></table></figure><br>将一个变量强制造型成另一个类型，然后赋给另一个变量<br>CD cc = (CD)item;<br>只有当item这个变量<strong>实际管理</strong>着CD类型的对象才不会出错  </p>
<p>在C语言中，有类似写法，但是是类型转换（对于基本类型int、double，java也能强制类型转换）<br>int i = (int)10.2;//强制类型转换<br>这与造型是不同的<br>类型转换是将10.2变成了10<br>但造型只是把item当做CD类型来看待<br>item本身还是Item类型  </p>
<p>(类型名)对象名：将一个对象当做这个类型来看待  </p>
<h3 id="向上造型"><a href="#向上造型" class="headerlink" title="向上造型"></a>向上造型</h3><p>向上造型是特殊的造型，无需写(父类类型)<br>拿一个子类的对象，当作父类的对象来用<br>向上造型总是安全的  </p>
<h2 id="方法调用的绑定"><a href="#方法调用的绑定" class="headerlink" title="方法调用的绑定"></a>方法调用的绑定</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Item item : listItem)&#123;</span><br><span class="line">        item.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>item每次循环管理的对象不一样，甚至管理的对象的类型也不一样，可以是CD或是DVD<br>当item管理CD(DVD)类型的对象时，去调用print方法，调用的是CD(DVD)类型里的print  </p>
<p>当通过对象变量调用方法的时候，调用哪个方法这件事情叫做绑定<br>-静态绑定：根据变量的声明类型来决定<br>-动态绑定：根据变量的动态类型来决定<br>在成员函数中调用其他成员函数也是通过this这个对象变量来调用的  </p>
<p>java默认所有的绑定都是动态绑定  </p>
<h3 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h3><p>子类和父类中存在<strong>名称和参数表</strong>完全相同的函数，这一对函数构成<strong>覆盖</strong>关系<br>通过父类的变量调用存在覆盖关系的函数时，调用变量当时所<strong>管理的对象</strong>所属的类的函数<br>这是一种动态绑定  </p>
<h2 id="多态总结"><a href="#多态总结" class="headerlink" title="多态总结"></a>多态总结</h2><p>多态性是对象多种表现形式的体现  </p>
<p>通过一个变量去调用一个函数，我们不去判断变量运行中实际类型是什么，我们只想它能print<br>多态是<strong>同一个行为</strong>具有多个<strong>不同表现形式或形态</strong>的能力<br>item是CD类型时它这样print，是DVD类型时那样print，但都是print行为  </p>
<hr>
<h1 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h1><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>java中所有类都是Object类型的子类<br>这是一种单根结构  </p>
<div><img src=/images/7-6.webp width="70%" height="70%"></div>

<p>发生继承时，父类所有public的东西子类都会得到<br>所以java中所有的类，都从Object类中得到了两个函数<br>-toString()<br>-equals()  </p>
<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><p>toString()会返回一个字符串，用来表达对象  </p>
<p>当一个类中没有toString()方法时，会调用继承自Object类的toString()<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CD</span> <span class="variable">cd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CD</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="number">4</span>,<span class="number">60</span>,<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">System.out.println(cd.toString());</span><br><span class="line">System.out.println(cd);<span class="comment">//和上面的效果一个月，编译器会知道这个地方需要调用toString()</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;aa&quot;</span>+cd;<span class="comment">//编译器知道这个地方需要调用toString()</span></span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">CD@3d075dc0</span><br><span class="line"><span class="comment">//类型名+一个类似地址、编号的东西</span></span><br><span class="line">CD@3d075dc0</span><br><span class="line">aaCD@3d075dc0</span><br></pre></td></tr></table></figure><br>显然，默认的表达这个对象的toString(),是返回一个类型名+一个类似地址、编号的东西  </p>
<p>我们可以在类中自定义一个toString()<br>即设计一个表达对象的toString()<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;CD&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;artist=&#x27;&quot;</span> + artist + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, numofTracks=&quot;</span> + numofTracks +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">CD&#123;artist=<span class="string">&#x27;aaa&#x27;</span>, numofTracks=<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h2><p>==<strong>无法</strong>比较两个对象的内容是否相同，只能比较这两个对象变量是否管理着同一个对象<br>我们需要使用equals()去比较内容  </p>
<p>当类中没有equals()，会调用继承自Object类的equals()<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CD</span> <span class="variable">cd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CD</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="number">4</span>,<span class="number">60</span>,<span class="string">&quot;bb&quot;</span>);</span><br><span class="line"><span class="type">CD</span> <span class="variable">cd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CD</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="number">4</span>,<span class="number">60</span>,<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">System.out.println(cd1.equals(cd2));</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><br>Object这个公共父类的equals()无法知道它的子类长什么样子，所以也无法比较这两个对象内容是否相等<br>Object的equals()实际上也是在比较两个对象变量是否管理着同一个对象</p>
<p>我们需要使用自定义的equals()去比较内容<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="type">CD</span> <span class="variable">cc</span> <span class="operator">=</span> (CD) o;<span class="comment">//将Object o看作是CD类型的</span></span><br><span class="line">    <span class="type">return</span> <span class="variable">numofTracks</span> <span class="operator">=</span>= cc.numofTracks &amp;&amp; artist.equals(cc.artist);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h2><p>作用：告诉编译器，这个函数覆盖了父类的同属性、同名、同参方法<br>也可能会在代码界面报错，如果这个函数没有和父类的同名方法有相同属性、参数</p>
<p>不带@Override，如果自定义的equals()和父类的同属性、同名、同参<br>那么也会覆盖掉父类的，@Override只是起帮助检查作用  </p>
<hr>
<h1 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h1><p>现在要往Database这个资料库里增加新的媒体类型，是一件非常容易的事情<br><figure class="highlight java"><figcaption><span>VideoGame.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VideoGame</span> <span class="keyword">extends</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numberofPlayers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VideoGame</span><span class="params">(String title, <span class="type">int</span> playingTime, <span class="type">boolean</span> gotIt, String comment, <span class="type">int</span> numberofPlayers)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(title, playingTime, gotIt, comment);</span><br><span class="line">        <span class="built_in">this</span>.numberofPlayers = numberofPlayers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;VideoGame:&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.print();</span><br><span class="line">        System.out.println(numberofPlayers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<div><img src=/images/7-7.webp width="70%" height="70%"></div>

<p>只需要增加一个子类，然后构造一下，覆盖下方法，父类完全不需要去动<br>这种特性叫<strong>可扩展性</strong>：代码无需修改即可扩展去适应新的数据、新的内容  </p>
<p>如果需要修改去适应新的数据、新的内容，则叫<strong>可维护性</strong>  </p>
<hr>
<blockquote>
<p>下接<a href="https://www.chuckle.top/article/9f2dc6c7.html">JAVA/面向对象学习笔记(2)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA/面向对象学习笔记(2)</title>
    <url>/article/9f2dc6c7.html</url>
    <content><![CDATA[<blockquote>
<p>所看教程（视频）：《浙江大学-翁恺-Java-面向对象程序设计》<br>作为我自己的复习笔记，也可以当做该视频的同步笔记<br>上接<a href="https://www.chuckle.top/article/bfb663c6.html">JAVA/面向对象学习笔记(1)</a></p>
</blockquote>
<h1 id="城堡游戏（可扩展性）"><a href="#城堡游戏（可扩展性）" class="headerlink" title="城堡游戏（可扩展性）"></a>城堡游戏（可扩展性）</h1><p>整体思路：用Room先初始化5个房间，Room类中有房间名称、四个方向所连接的房间，currentRoom = outside;设置出生点<br>进入goRoom方法，匹配用户输入的方向，让nextroom指向下一个房间，然后让currentRoom = outside;并输出房间信息。<br>大致以此循环  </p>
<figure class="highlight java"><figcaption><span>Room.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Room</span> &#123;</span><br><span class="line">    <span class="comment">//房间名称</span></span><br><span class="line">    <span class="keyword">public</span> String description;</span><br><span class="line">    <span class="comment">//房间四个方向连接的房间</span></span><br><span class="line">    <span class="keyword">public</span> Room northExit;</span><br><span class="line">    <span class="keyword">public</span> Room southExit;</span><br><span class="line">    <span class="keyword">public</span> Room eastExit;</span><br><span class="line">    <span class="keyword">public</span> Room westExit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Room</span><span class="params">(String description)</span><span class="comment">//初始化房间名</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExits</span><span class="params">(Room north, Room east, Room south, Room west)</span><span class="comment">//设置房间的四个方向的连接</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (north != <span class="literal">null</span>)</span><br><span class="line">            northExit = north;</span><br><span class="line">        <span class="keyword">if</span> (east != <span class="literal">null</span>)</span><br><span class="line">            eastExit = east;</span><br><span class="line">        <span class="keyword">if</span> (south != <span class="literal">null</span>)</span><br><span class="line">            southExit = south;</span><br><span class="line">        <span class="keyword">if</span> (west != <span class="literal">null</span>)</span><br><span class="line">            westExit = west;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;<span class="comment">//输出房间名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Game.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Room currentRoom;<span class="comment">//创建一个Room对象，用于保存当前房间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Game</span><span class="params">()</span><span class="comment">//构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        creatRooms();<span class="comment">//创建房间</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">creatRooms</span><span class="params">()</span><span class="comment">//创建一个房间</span></span><br><span class="line">    &#123;</span><br><span class="line">        Room outside, lobby,pub,study,bedroom;<span class="comment">//创建5种房间</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 制造5种房间</span></span><br><span class="line">        outside = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;城堡外&quot;</span>);</span><br><span class="line">        lobby = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;大堂&quot;</span>);</span><br><span class="line">        pub = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;小酒吧&quot;</span>);</span><br><span class="line">        study = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;书房&quot;</span>);</span><br><span class="line">        bedroom = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;卧室&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化房间的出口</span></span><br><span class="line">        outside.setExits(<span class="literal">null</span>,lobby,study,pub);</span><br><span class="line">        lobby.setExits(<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,outside);</span><br><span class="line">        pub.setExits(<span class="literal">null</span>,outside,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        study.setExits(outside,bedroom,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        bedroom.setExits(<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,study);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        currentRoom = outside; <span class="comment">//从城堡门外开始</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printWelcome</span><span class="params">()</span><span class="comment">//输出欢迎信息</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎来到城堡!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个超级无聊的游戏。&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;如果需要帮助，请输入&#x27;help&#x27;&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;现在你在:&quot;</span> + currentRoom);</span><br><span class="line">        System.out.println(<span class="string">&quot;出口有：&quot;</span>);</span><br><span class="line">        <span class="comment">//输出当前房间的出口</span></span><br><span class="line">        <span class="keyword">if</span>(currentRoom.northExit !=<span class="literal">null</span>)</span><br><span class="line">            System.out.print(<span class="string">&quot;north &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(currentRoom.eastExit !=<span class="literal">null</span>)</span><br><span class="line">            System.out.print(<span class="string">&quot;east &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(currentRoom.southExit !=<span class="literal">null</span>)</span><br><span class="line">            System.out.print(<span class="string">&quot;south &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(currentRoom.westExit !=<span class="literal">null</span>)</span><br><span class="line">            System.out.print(<span class="string">&quot;west &quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  以下为用户命令</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printHelp</span><span class="params">()</span><span class="comment">//帮助菜单</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;迷路了吗？你可以做的命令有：go bye help&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;如：\tgo east&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">goRoom</span><span class="params">(String direction)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Room</span> <span class="variable">nextRoom</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//创建一个Room对象，用于保存下一个房间</span></span><br><span class="line">        <span class="comment">// 在当前房间的出口中查找与用户输入的方向相同的房间</span></span><br><span class="line">        <span class="keyword">if</span>(direction.equals(<span class="string">&quot;north&quot;</span>))&#123;</span><br><span class="line">            nextRoom = currentRoom.northExit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(direction.equals(<span class="string">&quot;east&quot;</span>))&#123;</span><br><span class="line">            nextRoom = currentRoom.eastExit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(direction.equals(<span class="string">&quot;south&quot;</span>))&#123;</span><br><span class="line">            nextRoom = currentRoom.southExit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(direction.equals(<span class="string">&quot;west&quot;</span>))&#123;</span><br><span class="line">            nextRoom = currentRoom.westExit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果找到了下一个房间，则进入下一个房间</span></span><br><span class="line">        <span class="keyword">if</span>(nextRoom == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;那里没有门！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            currentRoom = nextRoom;<span class="comment">//让当前房间等于下一个房间</span></span><br><span class="line">            <span class="comment">// 输出当前房间的描述</span></span><br><span class="line">            System.out.println(<span class="string">&quot;你在&quot;</span>+ currentRoom);</span><br><span class="line">            System.out.println(<span class="string">&quot;出口有：&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(currentRoom.northExit != <span class="literal">null</span>)</span><br><span class="line">                System.out.println(<span class="string">&quot;north&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(currentRoom.eastExit != <span class="literal">null</span>)</span><br><span class="line">                System.out.println(<span class="string">&quot;east&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(currentRoom.southExit != <span class="literal">null</span>)</span><br><span class="line">                System.out.println(<span class="string">&quot;south&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(currentRoom.westExit != <span class="literal">null</span>)</span><br><span class="line">                System.out.println(<span class="string">&quot;west&quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//通过new Scanner(System.in)创建一个Scanner，控制台会一直等待输入，直到敲回车键结束，把所输入的内容传给Scanner，作为扫描对象。</span></span><br><span class="line">        <span class="type">Game</span> <span class="variable">game</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line">        game.printWelcome();<span class="comment">//输出欢迎信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)<span class="comment">//进入游戏主体，游戏结束时退出循环</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> in.nextLine();<span class="comment">//控制台输入一行</span></span><br><span class="line">            String[] words = line.split(<span class="string">&quot; &quot;</span>);<span class="comment">//以空格为分隔符，把用户输入的字符串分割成字符串数组</span></span><br><span class="line">            <span class="comment">//判断是go还是help</span></span><br><span class="line">            <span class="keyword">if</span> ( words[<span class="number">0</span>].equals(<span class="string">&quot;help&quot;</span>))&#123;</span><br><span class="line">                game.printHelp();<span class="comment">//输出帮助信息</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( words[<span class="number">0</span>].equals(<span class="string">&quot;go&quot;</span>))&#123;</span><br><span class="line">                game.goRoom(words[<span class="number">1</span>]);<span class="comment">//将用户输入的方向传给goRoom方法</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( words[<span class="number">0</span>].equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//如果用户数据为bye，则退出游戏</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;感谢您的光临。再见！&quot;</span>);</span><br><span class="line">        in.close();<span class="comment">//关闭Scanner</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">欢迎来到城堡!</span><br><span class="line">这是一个超级无聊的游戏。</span><br><span class="line">如果需要帮助，请输入<span class="string">&#x27;help&#x27;</span></span><br><span class="line"></span><br><span class="line">你在城堡外</span><br><span class="line">出口有：</span><br><span class="line">east</span><br><span class="line">south</span><br><span class="line">west</span><br><span class="line"></span><br><span class="line">go south</span><br><span class="line">你在书房</span><br><span class="line">出口有：</span><br><span class="line">north</span><br><span class="line">east</span><br><span class="line"></span><br><span class="line">go east</span><br><span class="line">你在卧室</span><br><span class="line">出口有：</span><br><span class="line">west</span><br><span class="line"></span><br><span class="line">help</span><br><span class="line">迷路了吗？你可以做的命令有：go bye help</span><br><span class="line">如：	go east</span><br><span class="line">bye</span><br><span class="line">感谢您的光临。再见！</span><br></pre></td></tr></table></figure>
<h2 id="消除代码复制"><a href="#消除代码复制" class="headerlink" title="消除代码复制"></a>消除代码复制</h2><p>在printWelcome和goRoom方法中都有一段相同的输出出口方向的代码<br>将这段代码提取出来，做成一个方法，在需要输出房间信息的地方调用即可<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showPrompt</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 输出当前房间的描述</span></span><br><span class="line">    System.out.println(<span class="string">&quot;你在&quot;</span>+ currentRoom);</span><br><span class="line">    System.out.println(<span class="string">&quot;出口有：&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(currentRoom.northExit != <span class="literal">null</span>)</span><br><span class="line">        System.out.println(<span class="string">&quot;north&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(currentRoom.eastExit != <span class="literal">null</span>)</span><br><span class="line">        System.out.println(<span class="string">&quot;east&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(currentRoom.southExit != <span class="literal">null</span>)</span><br><span class="line">        System.out.println(<span class="string">&quot;south&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(currentRoom.westExit != <span class="literal">null</span>)</span><br><span class="line">        System.out.println(<span class="string">&quot;west&quot;</span>);</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>这个程序没有bug，能正常运行，但不见得是一个好的代码<br>评价一个代码质量的好坏是多元的，尤其是这个代码是否能适应将来的需要  </p>
<p><strong>可扩展性</strong>：代码是否易于将来增加新的东西</p>
<p>我们想在这个游戏里给每个房间增加两个方向down和up<br>我们需要改的地方很多<br>Room.java里需要增加两个房间对象public Room downExit;和public Room upExit; setExits方法需要增加两个参数并进行判断<br>Game.java里很多方法也要增加if判断，还要改每个房间的初始化  </p>
<p>总之，想增加一个方向，代码几乎每个地方都要改变  </p>
<p>要想增加可扩展性，首先要降低类和类之间的耦合  </p>
<h3 id="用封装来降低耦合"><a href="#用封装来降低耦合" class="headerlink" title="用封装来降低耦合"></a>用封装来降低耦合</h3><p>Room类和Game类都有大量的代码和出口相关<br>尤其是Game类中大量使用了Room类的成员变量<br>类和类之间的关系称作<strong>耦合</strong><br>耦合<strong>越低越好</strong>，保持距离是形成良好代码的关键  </p>
<p>我们可以让Room自己告诉Game有哪些出口，出口连接的房间<br><figure class="highlight java"><figcaption><span>Room.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Room</span> &#123;</span><br><span class="line">    <span class="comment">//房间名称</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//public String description;</span></span><br><span class="line">    <span class="comment">//房间四个方向连接的房间</span></span><br><span class="line">    <span class="keyword">private</span> Room northExit;</span><br><span class="line">    <span class="keyword">private</span> Room southExit;</span><br><span class="line">    <span class="keyword">private</span> Room eastExit;</span><br><span class="line">    <span class="keyword">private</span> Room westExit;</span><br><span class="line">    <span class="comment">/*public Room northExit;</span></span><br><span class="line"><span class="comment">    public Room southExit;</span></span><br><span class="line"><span class="comment">    public Room eastExit;</span></span><br><span class="line"><span class="comment">    public Room westExit;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Room</span><span class="params">(String description)</span><span class="comment">//初始化房间名</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExits</span><span class="params">(Room north, Room east, Room south, Room west)</span><span class="comment">//设置房间的四个方向的连接</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (north != <span class="literal">null</span>)</span><br><span class="line">            northExit = north;</span><br><span class="line">        <span class="keyword">if</span> (east != <span class="literal">null</span>)</span><br><span class="line">            eastExit = east;</span><br><span class="line">        <span class="keyword">if</span> (south != <span class="literal">null</span>)</span><br><span class="line">            southExit = south;</span><br><span class="line">        <span class="keyword">if</span> (west != <span class="literal">null</span>)</span><br><span class="line">            westExit = west;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;<span class="comment">//输出房间名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getExitDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//返回一个字符串，来表达房间的出口</span></span><br><span class="line">        <span class="comment">/*String returnString = &quot;Exits:&quot;;</span></span><br><span class="line"><span class="comment">        if (northExit != null)</span></span><br><span class="line"><span class="comment">            returnString += &quot;north &quot;;</span></span><br><span class="line"><span class="comment">        if (eastExit != null)</span></span><br><span class="line"><span class="comment">            returnString += &quot;east &quot;;</span></span><br><span class="line"><span class="comment">        if (southExit != null)</span></span><br><span class="line"><span class="comment">            returnString += &quot;south &quot;;</span></span><br><span class="line"><span class="comment">        if (westExit != null)</span></span><br><span class="line"><span class="comment">            returnString += &quot;west &quot;;</span></span><br><span class="line"><span class="comment">        return returnString;*/</span></span><br><span class="line">        <span class="comment">//一般我们不使用String去做拼接，因为每次加都会产生一个新的String类型的对象，系统开销会很大，而是使用StringBuilder</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;出口有：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (northExit != <span class="literal">null</span>)</span><br><span class="line">            builder.append(<span class="string">&quot;north &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (eastExit != <span class="literal">null</span>)</span><br><span class="line">            builder.append(<span class="string">&quot;east &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (southExit != <span class="literal">null</span>)</span><br><span class="line">            builder.append(<span class="string">&quot;south &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (westExit != <span class="literal">null</span>)</span><br><span class="line">            builder.append(<span class="string">&quot;west &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Room <span class="title function_">getExit</span><span class="params">(String direction)</span> &#123;</span><br><span class="line">        <span class="comment">//返回指定方向的连接房间</span></span><br><span class="line">        <span class="keyword">if</span> (direction.equals(<span class="string">&quot;north&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> northExit;</span><br><span class="line">        <span class="keyword">if</span> (direction.equals(<span class="string">&quot;east&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> eastExit;</span><br><span class="line">        <span class="keyword">if</span> (direction.equals(<span class="string">&quot;south&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> southExit;</span><br><span class="line">        <span class="keyword">if</span> (direction.equals(<span class="string">&quot;west&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> westExit;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>Game.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Room currentRoom;<span class="comment">//创建一个Room对象，用于保存当前房间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Game</span><span class="params">()</span><span class="comment">//构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        creatRooms();<span class="comment">//创建房间</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">creatRooms</span><span class="params">()</span><span class="comment">//创建一个房间</span></span><br><span class="line">    &#123;</span><br><span class="line">        Room outside, lobby,pub,study,bedroom;<span class="comment">//创建5种房间</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 制造5种房间</span></span><br><span class="line">        outside = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;城堡外&quot;</span>);</span><br><span class="line">        lobby = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;大堂&quot;</span>);</span><br><span class="line">        pub = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;小酒吧&quot;</span>);</span><br><span class="line">        study = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;书房&quot;</span>);</span><br><span class="line">        bedroom = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;卧室&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化房间的出口</span></span><br><span class="line">        outside.setExits(<span class="literal">null</span>,lobby,study,pub);</span><br><span class="line">        lobby.setExits(<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,outside);</span><br><span class="line">        pub.setExits(<span class="literal">null</span>,outside,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        study.setExits(outside,bedroom,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        bedroom.setExits(<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,study);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        currentRoom = outside; <span class="comment">//从城堡门外开始</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printWelcome</span><span class="params">()</span><span class="comment">//输出欢迎信息</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎来到城堡!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个超级无聊的游戏。&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;如果需要帮助，请输入&#x27;help&#x27;&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        showPrompt();</span><br><span class="line">        <span class="comment">/*System.out.println(&quot;现在你在:&quot; + currentRoom);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;出口有：&quot;);</span></span><br><span class="line"><span class="comment">        //输出当前房间的出口</span></span><br><span class="line"><span class="comment">        if(currentRoom.northExit !=null)</span></span><br><span class="line"><span class="comment">            System.out.print(&quot;north &quot;);</span></span><br><span class="line"><span class="comment">        if(currentRoom.eastExit !=null)</span></span><br><span class="line"><span class="comment">            System.out.print(&quot;east &quot;);</span></span><br><span class="line"><span class="comment">        if(currentRoom.southExit !=null)</span></span><br><span class="line"><span class="comment">            System.out.print(&quot;south &quot;);</span></span><br><span class="line"><span class="comment">        if(currentRoom.westExit !=null)</span></span><br><span class="line"><span class="comment">            System.out.print(&quot;west &quot;);</span></span><br><span class="line"><span class="comment">        System.out.println();*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  以下为用户命令</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printHelp</span><span class="params">()</span><span class="comment">//帮助菜单</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;迷路了吗？你可以做的命令有：go bye help&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;如：\tgo east&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">goRoom</span><span class="params">(String direction)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Room</span> <span class="variable">nextRoom</span> <span class="operator">=</span> currentRoom.getExit(direction);<span class="comment">//创建一个Room对象，用于保存下一个房间</span></span><br><span class="line">        <span class="comment">// 在当前房间的出口中查找与用户输入的方向相同的房间</span></span><br><span class="line">        <span class="comment">/*if(direction.equals(&quot;north&quot;))&#123;</span></span><br><span class="line"><span class="comment">            nextRoom = currentRoom.northExit;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(direction.equals(&quot;east&quot;))&#123;</span></span><br><span class="line"><span class="comment">            nextRoom = currentRoom.eastExit;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(direction.equals(&quot;south&quot;))&#123;</span></span><br><span class="line"><span class="comment">            nextRoom = currentRoom.southExit;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(direction.equals(&quot;west&quot;))&#123;</span></span><br><span class="line"><span class="comment">            nextRoom = currentRoom.westExit;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">// 如果找到了下一个房间，则进入下一个房间</span></span><br><span class="line">        <span class="keyword">if</span>(nextRoom == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;那里没有门！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            currentRoom = nextRoom;<span class="comment">//让当前房间等于下一个房间</span></span><br><span class="line">            <span class="comment">// 输出当前房间的描述</span></span><br><span class="line">            showPrompt();</span><br><span class="line">            <span class="comment">/*System.out.println(&quot;你在&quot;+ currentRoom);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;出口有：&quot;);</span></span><br><span class="line"><span class="comment">            if(currentRoom.northExit != null)</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;north&quot;);</span></span><br><span class="line"><span class="comment">            if(currentRoom.eastExit != null)</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;east&quot;);</span></span><br><span class="line"><span class="comment">            if(currentRoom.southExit != null)</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;south&quot;);</span></span><br><span class="line"><span class="comment">            if(currentRoom.westExit != null)</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;west&quot;);</span></span><br><span class="line"><span class="comment">            System.out.println();*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showPrompt</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 输出当前房间的描述</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你在&quot;</span>+ currentRoom);</span><br><span class="line">        <span class="comment">//调用房间的getExitString()方法，输出当前房间的出口</span></span><br><span class="line">        System.out.println(currentRoom.getExitDesc());</span><br><span class="line">        <span class="comment">/*System.out.println(&quot;出口有：&quot;);</span></span><br><span class="line"><span class="comment">        if(currentRoom.northExit != null)</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;north&quot;);</span></span><br><span class="line"><span class="comment">        if(currentRoom.eastExit != null)</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;east&quot;);</span></span><br><span class="line"><span class="comment">        if(currentRoom.southExit != null)</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;south&quot;);</span></span><br><span class="line"><span class="comment">        if(currentRoom.westExit != null)</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;west&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println();*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//通过new Scanner(System.in)创建一个Scanner，控制台会一直等待输入，直到敲回车键结束，把所输入的内容传给Scanner，作为扫描对象。</span></span><br><span class="line">        <span class="type">Game</span> <span class="variable">game</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line">        game.printWelcome();<span class="comment">//输出欢迎信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)<span class="comment">//进入游戏主体，游戏结束时退出循环</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> in.nextLine();<span class="comment">//控制台输入一行</span></span><br><span class="line">            String[] words = line.split(<span class="string">&quot; &quot;</span>);<span class="comment">//以空格为分隔符，把用户输入的字符串分割成字符串数组</span></span><br><span class="line">            <span class="comment">//判断是go还是help</span></span><br><span class="line">            <span class="keyword">if</span> ( words[<span class="number">0</span>].equals(<span class="string">&quot;help&quot;</span>))&#123;</span><br><span class="line">                game.printHelp();<span class="comment">//输出帮助信息</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( words[<span class="number">0</span>].equals(<span class="string">&quot;go&quot;</span>))&#123;</span><br><span class="line">                game.goRoom(words[<span class="number">1</span>]);<span class="comment">//将用户输入的方向传给goRoom方法</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( words[<span class="number">0</span>].equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//如果用户数据为bye，则退出游戏</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;感谢您的光临。再见！&quot;</span>);</span><br><span class="line">        in.close();<span class="comment">//关闭Scanner</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="用接口来实现聚合"><a href="#用接口来实现聚合" class="headerlink" title="用接口来实现聚合"></a>用接口来实现聚合</h3><p>原本Room有什么出口，连接着什么房间，Game是能直接获取使用的<br>现在我们在Room中实现了两个接口getExitDesc和getExit,把方向的细节彻底隐藏在Room类内部<br>今后方向如何实现就和外部无关了  </p>
<h3 id="用容器来实现灵活性"><a href="#用容器来实现灵活性" class="headerlink" title="用容器来实现灵活性"></a>用容器来实现灵活性</h3><p>在Room当中，有四个Room对象，用于保存这个房间连接着的四个房间（null，或者房间名）<br>这种一一对应的关系，可以使用HashMap去实现<br><figure class="highlight java"><figcaption><span>Room.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Room</span> &#123;</span><br><span class="line">    <span class="comment">//描述</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//用HashMap来保存这个房间连接着的四个房间</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Room&gt; exits = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Room&gt;();</span><br><span class="line">    <span class="comment">/*private Room northExit;</span></span><br><span class="line"><span class="comment">    private Room southExit;</span></span><br><span class="line"><span class="comment">    private Room eastExit;</span></span><br><span class="line"><span class="comment">    private Room westExit;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Room</span><span class="params">(String description)</span><span class="comment">//初始化房间名</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExits</span><span class="params">(String direction, Room room)</span> &#123;</span><br><span class="line">        exits.put(direction, room);<span class="comment">//将出口方向和连接的房间放进容器中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public void setExits(Room north, Room east, Room south, Room west)//设置房间的四个方向的连接</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if (north != null)</span></span><br><span class="line"><span class="comment">            northExit = north;</span></span><br><span class="line"><span class="comment">        if (east != null)</span></span><br><span class="line"><span class="comment">            eastExit = east;</span></span><br><span class="line"><span class="comment">        if (south != null)</span></span><br><span class="line"><span class="comment">            southExit = south;</span></span><br><span class="line"><span class="comment">        if (west != null)</span></span><br><span class="line"><span class="comment">            westExit = west;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;<span class="comment">//输出房间名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getExitDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//返回一个字符串，来表达房间的出口</span></span><br><span class="line">        <span class="comment">//一般我们不使用String去做拼接，因为每次加都会产生一个新的String类型的对象，系统开销会很大，而是使用StringBuilder</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;出口有：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String direction : exits.keySet()) &#123;</span><br><span class="line">            builder.append(direction);</span><br><span class="line">            builder.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*if (northExit != null)</span></span><br><span class="line"><span class="comment">            builder.append(&quot;north &quot;);</span></span><br><span class="line"><span class="comment">        if (eastExit != null)</span></span><br><span class="line"><span class="comment">            builder.append(&quot;east &quot;);</span></span><br><span class="line"><span class="comment">        if (southExit != null)</span></span><br><span class="line"><span class="comment">            builder.append(&quot;south &quot;);</span></span><br><span class="line"><span class="comment">        if (westExit != null)</span></span><br><span class="line"><span class="comment">            builder.append(&quot;west &quot;);*/</span></span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Room <span class="title function_">getExit</span><span class="params">(String direction)</span> &#123;</span><br><span class="line">        <span class="comment">//返回指定方向的连接房间</span></span><br><span class="line">        <span class="keyword">return</span> exits.get(direction);<span class="comment">//直接从HashMap中获取房间，如果没有容器会自动返回null</span></span><br><span class="line">        <span class="comment">/*if (direction.equals(&quot;north&quot;))</span></span><br><span class="line"><span class="comment">            return northExit;</span></span><br><span class="line"><span class="comment">        if (direction.equals(&quot;east&quot;))</span></span><br><span class="line"><span class="comment">            return eastExit;</span></span><br><span class="line"><span class="comment">        if (direction.equals(&quot;south&quot;))</span></span><br><span class="line"><span class="comment">            return southExit;</span></span><br><span class="line"><span class="comment">        if (direction.equals(&quot;west&quot;))</span></span><br><span class="line"><span class="comment">            return westExit;</span></span><br><span class="line"><span class="comment">        return null;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>Game.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Room currentRoom;<span class="comment">//创建一个Room对象，用于保存当前房间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Game</span><span class="params">()</span><span class="comment">//构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        creatRooms();<span class="comment">//创建房间</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">creatRooms</span><span class="params">()</span><span class="comment">//创建一个房间</span></span><br><span class="line">    &#123;</span><br><span class="line">        Room outside, lobby,pub,study,bedroom;<span class="comment">//创建5种房间</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 制造5种房间</span></span><br><span class="line">        outside = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;城堡外&quot;</span>);</span><br><span class="line">        lobby = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;大堂&quot;</span>);</span><br><span class="line">        pub = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;小酒吧&quot;</span>);</span><br><span class="line">        study = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;书房&quot;</span>);</span><br><span class="line">        bedroom = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;卧室&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化房间的出口</span></span><br><span class="line">        outside.setExits(<span class="string">&quot;east&quot;</span>, lobby);</span><br><span class="line">        outside.setExits(<span class="string">&quot;south&quot;</span>, study);</span><br><span class="line">        outside.setExits(<span class="string">&quot;west&quot;</span>, pub);</span><br><span class="line">        lobby.setExits(<span class="string">&quot;west&quot;</span>, outside);</span><br><span class="line">        pub.setExits(<span class="string">&quot;east&quot;</span>, outside);</span><br><span class="line">        study.setExits(<span class="string">&quot;north&quot;</span>, outside);</span><br><span class="line">        study.setExits(<span class="string">&quot;east&quot;</span>, bedroom);</span><br><span class="line">        bedroom.setExits(<span class="string">&quot;west&quot;</span>, study);</span><br><span class="line">        <span class="comment">//现在当我们想增加出口方向，很简单</span></span><br><span class="line">        lobby.setExits(<span class="string">&quot;up&quot;</span>, pub);</span><br><span class="line">        pub.setExits(<span class="string">&quot;down&quot;</span>, lobby);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*outside.setExits(null,lobby,study,pub);</span></span><br><span class="line"><span class="comment">        lobby.setExits(null,null,null,outside);</span></span><br><span class="line"><span class="comment">        pub.setExits(null,outside,null,null);</span></span><br><span class="line"><span class="comment">        study.setExits(outside,bedroom,null,null);</span></span><br><span class="line"><span class="comment">        bedroom.setExits(null,null,null,study);*/</span></span><br><span class="line"></span><br><span class="line">        currentRoom = outside; <span class="comment">//从城堡门外开始</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printWelcome</span><span class="params">()</span><span class="comment">//输出欢迎信息</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎来到城堡!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个超级无聊的游戏。&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;如果需要帮助，请输入&#x27;help&#x27;&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        showPrompt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  以下为用户命令</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printHelp</span><span class="params">()</span><span class="comment">//帮助菜单</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;迷路了吗？你可以做的命令有：go bye help&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;如：\tgo east&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">goRoom</span><span class="params">(String direction)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Room</span> <span class="variable">nextRoom</span> <span class="operator">=</span> currentRoom.getExit(direction);<span class="comment">//创建一个Room对象，用于保存下一个房间</span></span><br><span class="line">        <span class="comment">// 如果找到了下一个房间，则进入下一个房间</span></span><br><span class="line">        <span class="keyword">if</span>(nextRoom == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;那里没有门！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            currentRoom = nextRoom;<span class="comment">//让当前房间等于下一个房间</span></span><br><span class="line">            <span class="comment">// 输出当前房间的描述</span></span><br><span class="line">            showPrompt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showPrompt</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 输出当前房间的描述</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你在&quot;</span>+ currentRoom);</span><br><span class="line">        <span class="comment">//调用房间的getExitString()方法，输出当前房间的出口</span></span><br><span class="line">        System.out.println(currentRoom.getExitDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//通过new Scanner(System.in)创建一个Scanner，控制台会一直等待输入，直到敲回车键结束，把所输入的内容传给Scanner，作为扫描对象。</span></span><br><span class="line">        <span class="type">Game</span> <span class="variable">game</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line">        game.printWelcome();<span class="comment">//输出欢迎信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)<span class="comment">//进入游戏主体，游戏结束时退出循环</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> in.nextLine();<span class="comment">//控制台输入一行</span></span><br><span class="line">            String[] words = line.split(<span class="string">&quot; &quot;</span>);<span class="comment">//以空格为分隔符，把用户输入的字符串分割成字符串数组</span></span><br><span class="line">            <span class="comment">//判断是go还是help</span></span><br><span class="line">            <span class="keyword">if</span> ( words[<span class="number">0</span>].equals(<span class="string">&quot;help&quot;</span>))&#123;</span><br><span class="line">                game.printHelp();<span class="comment">//输出帮助信息</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( words[<span class="number">0</span>].equals(<span class="string">&quot;go&quot;</span>))&#123;</span><br><span class="line">                game.goRoom(words[<span class="number">1</span>]);<span class="comment">//将用户输入的方向传给goRoom方法</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( words[<span class="number">0</span>].equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//如果用户数据为bye，则退出游戏</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;感谢您的光临。再见！&quot;</span>);</span><br><span class="line">        in.close();<span class="comment">//关闭Scanner</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>//现在当我们想增加出口方向，很简单<br>lobby.setExits(“up”, pub);<br>pub.setExits(“down”, lobby);  </p>
<p>这里发生了什么？<br>将lobby的出口方向和对应房间传给它的setExits的方法后<br>lobby里面的容器就会多一对出口和房间的对应关系<br>lobby里面的getExitDesc、getExit方法以及未来可能加入的新方法，都遍历这个容器<br>所以，增加出口和连接的房间，只需要调用setExits方法，去往lobby里的容器写入东西即可  </p>
<p>现在，对于增加出口来说，已经具有了可扩展性</p>
<h3 id="以框架-数据来提高可扩展性"><a href="#以框架-数据来提高可扩展性" class="headerlink" title="以框架+数据来提高可扩展性"></a>以框架+数据来提高可扩展性</h3><p>我们原来用硬编码去保存room的出口<br>现在我们用容器，HashMap和对应的方法（接口方法）组成了一个框架，数据就是放在HashMap里的东西<br>在这个框架中要增加出口很容易  </p>
<p>启发：<br>命令的解析是否可以脱离if-else<br>定义一个Handler来处理命令<br>用Hash表来保存命令和Handler之间的关系  </p>
<p>现在我们可以用相同的思路去解决用户命令（help，go，bye）的硬编码问题<br>一个字符串对应调用一个方法，这显然也是一一对应的关系<br>但容器<strong>只能放对象</strong>，一个方法不能放进容器中  </p>
<h3 id="如何把方法放进容器中"><a href="#如何把方法放进容器中" class="headerlink" title="如何把方法放进容器中"></a>如何把方法放进容器中</h3><p>创建一个Handler类，然后把每个命令创建为Handler的子类<br>将命令字符串和Handler子类的对象一一对应放入HashMap中<br>将功能在Handler的子类的doCmd方法中实现<br>在game中通过父类对象管理者去管理子类对象（从HashMap中获取子类对象），管理者调用doCmd方法即可  </p>
<figure class="highlight java"><figcaption><span>Room.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Room</span> &#123;</span><br><span class="line">    <span class="comment">//描述</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//用HashMap来保存这个房间连接着的四个房间</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Room&gt; exits = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Room&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Room</span><span class="params">(String description)</span><span class="comment">//初始化房间名</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExits</span><span class="params">(String direction, Room room)</span> &#123;</span><br><span class="line">        exits.put(direction, room);<span class="comment">//将出口方向和连接的房间放进容器中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;<span class="comment">//输出房间名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getExitDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//返回一个字符串，来表达房间的出口</span></span><br><span class="line">        <span class="comment">//一般我们不使用String去做拼接，因为每次加都会产生一个新的String类型的对象，系统开销会很大，而是使用StringBuilder</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;出口有：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String direction : exits.keySet()) &#123;</span><br><span class="line">            builder.append(direction);</span><br><span class="line">            builder.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Room <span class="title function_">getExit</span><span class="params">(String direction)</span> &#123;</span><br><span class="line">        <span class="comment">//返回指定方向的连接房间</span></span><br><span class="line">        <span class="keyword">return</span> exits.get(direction);<span class="comment">//直接从HashMap中获取房间，如果没有容器会自动返回null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Game.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Room currentRoom;<span class="comment">//创建一个Room对象，用于保存当前房间</span></span><br><span class="line">    <span class="comment">//创建一个HashMap对象，用于保存所有的命令处理器</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Handler&gt; handlers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Handler&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Game</span><span class="params">()</span><span class="comment">//构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将字符串和命令处理器对应</span></span><br><span class="line">        handlers.put(<span class="string">&quot;go&quot;</span>,<span class="keyword">new</span> <span class="title class_">HandlerGo</span>(<span class="built_in">this</span>));<span class="comment">//把game对象作为参数传入HandlerGo类，让HandlerGo能管理game</span></span><br><span class="line">        handlers.put(<span class="string">&quot;help&quot;</span>,<span class="keyword">new</span> <span class="title class_">HandlerHelp</span>(<span class="built_in">this</span>));</span><br><span class="line">        handlers.put(<span class="string">&quot;bye&quot;</span>,<span class="keyword">new</span> <span class="title class_">HandlerBye</span>(<span class="built_in">this</span>));</span><br><span class="line">        creatRooms();<span class="comment">//创建房间</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">creatRooms</span><span class="params">()</span><span class="comment">//创建一个房间</span></span><br><span class="line">    &#123;</span><br><span class="line">        Room outside, lobby,pub,study,bedroom;<span class="comment">//创建5种房间</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 制造5种房间</span></span><br><span class="line">        outside = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;城堡外&quot;</span>);</span><br><span class="line">        lobby = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;大堂&quot;</span>);</span><br><span class="line">        pub = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;小酒吧&quot;</span>);</span><br><span class="line">        study = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;书房&quot;</span>);</span><br><span class="line">        bedroom = <span class="keyword">new</span> <span class="title class_">Room</span>(<span class="string">&quot;卧室&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化房间的出口</span></span><br><span class="line">        outside.setExits(<span class="string">&quot;east&quot;</span>, lobby);</span><br><span class="line">        outside.setExits(<span class="string">&quot;south&quot;</span>, study);</span><br><span class="line">        outside.setExits(<span class="string">&quot;west&quot;</span>, pub);</span><br><span class="line">        lobby.setExits(<span class="string">&quot;west&quot;</span>, outside);</span><br><span class="line">        pub.setExits(<span class="string">&quot;east&quot;</span>, outside);</span><br><span class="line">        study.setExits(<span class="string">&quot;north&quot;</span>, outside);</span><br><span class="line">        study.setExits(<span class="string">&quot;east&quot;</span>, bedroom);</span><br><span class="line">        bedroom.setExits(<span class="string">&quot;west&quot;</span>, study);</span><br><span class="line">        <span class="comment">//现在当我们想增加出口方向，很简单</span></span><br><span class="line">        lobby.setExits(<span class="string">&quot;up&quot;</span>, pub);</span><br><span class="line">        pub.setExits(<span class="string">&quot;down&quot;</span>, lobby);</span><br><span class="line"></span><br><span class="line">        currentRoom = outside; <span class="comment">//从城堡门外开始</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printWelcome</span><span class="params">()</span><span class="comment">//输出欢迎信息</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎来到城堡!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个超级无聊的游戏。&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;如果需要帮助，请输入&#x27;help&#x27;&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        showPrompt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  以下为用户命令</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*private void printHelp()//帮助菜单</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;迷路了吗？你可以做的命令有：go bye help&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;如：\tgo east&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goRoom</span><span class="params">(String direction)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Room</span> <span class="variable">nextRoom</span> <span class="operator">=</span> currentRoom.getExit(direction);<span class="comment">//创建一个Room对象，用于保存下一个房间</span></span><br><span class="line">        <span class="comment">// 如果找到了下一个房间，则进入下一个房间</span></span><br><span class="line">        <span class="keyword">if</span>(nextRoom == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;那里没有门！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            currentRoom = nextRoom;<span class="comment">//让当前房间等于下一个房间</span></span><br><span class="line">            <span class="comment">// 输出当前房间的描述</span></span><br><span class="line">            showPrompt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showPrompt</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 输出当前房间的描述</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你在&quot;</span>+ currentRoom);</span><br><span class="line">        <span class="comment">//调用房间的getExitString()方法，输出当前房间的出口</span></span><br><span class="line">        System.out.println(currentRoom.getExitDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>&#123;<span class="comment">//游戏开始</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)<span class="comment">//进入游戏主体，游戏结束时退出循环</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> in.nextLine();<span class="comment">//控制台输入一行</span></span><br><span class="line">            String[] words = line.split(<span class="string">&quot; &quot;</span>);<span class="comment">//以空格为分隔符，把用户输入的字符串分割成字符串数组</span></span><br><span class="line">            <span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> handlers.get(words[<span class="number">0</span>]);<span class="comment">//获取用户输入的命令,从HashMap中获取对应的子类对象,让handler管理这个对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;<span class="comment">//保存命令的字符串</span></span><br><span class="line">            <span class="keyword">if</span>(words.length &gt; <span class="number">1</span>)<span class="comment">//判断是不是bye命令</span></span><br><span class="line">            &#123;</span><br><span class="line">                value = words[<span class="number">1</span>];<span class="comment">//获取参数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(handler != <span class="literal">null</span>)&#123;<span class="comment">//如果命令存在</span></span><br><span class="line">                handler.doCmd(value);<span class="comment">//调用命令处理器</span></span><br><span class="line">                <span class="keyword">if</span> ( handler.isBye() ) &#123;<span class="comment">//如果命令处理器返回true，则退出游戏</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;感谢您的光临。再见！&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();<span class="comment">//关闭Scanner</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*Scanner in = new Scanner(System.in);*/</span></span><br><span class="line">        <span class="comment">//通过new Scanner(System.in)创建一个Scanner，控制台会一直等待输入，直到敲回车键结束，把所输入的内容传给Scanner，作为扫描对象。</span></span><br><span class="line">        <span class="type">Game</span> <span class="variable">game</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line">        game.printWelcome();<span class="comment">//输出欢迎信息</span></span><br><span class="line">        game.play();</span><br><span class="line">        <span class="comment">/*while (true)//进入游戏主体，游戏结束时退出循环</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            String line = in.nextLine();//控制台输入一行</span></span><br><span class="line"><span class="comment">            String[] words = line.split(&quot; &quot;);//以空格为分隔符，把用户输入的字符串分割成字符串数组</span></span><br><span class="line"><span class="comment">            //判断是go还是help</span></span><br><span class="line"><span class="comment">            if ( words[0].equals(&quot;help&quot;))&#123;</span></span><br><span class="line"><span class="comment">                game.printHelp();//输出帮助信息</span></span><br><span class="line"><span class="comment">            &#125;else if ( words[0].equals(&quot;go&quot;))&#123;</span></span><br><span class="line"><span class="comment">                game.goRoom(words[1]);//将用户输入的方向传给goRoom方法</span></span><br><span class="line"><span class="comment">            &#125;else if ( words[0].equals(&quot;bye&quot;))&#123;</span></span><br><span class="line"><span class="comment">                break;//如果用户数据为bye，则退出游戏</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;感谢您的光临。再见！&quot;);</span></span><br><span class="line">        <span class="comment">//in.close();//关闭Scanner</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Handler.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Game game;<span class="comment">//创建一个Game对象的管理者，为了方便设为protected</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(Game game)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.game = game;<span class="comment">//两个game管理者管理同一个Game对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doCmd</span><span class="params">(String word)</span> &#123;&#125;<span class="comment">//一个接口，用于运行命令</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBye</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>HandlerBye.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerBye</span>  <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="comment">//必要的构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HandlerBye</span><span class="params">(Game game)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(game);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBye</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>HandlerHelp.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerHelp</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="comment">//必要的构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HandlerHelp</span><span class="params">(Game game)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(game);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doCmd</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;迷路了吗？你可以做的命令有：go bye help&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;如：\tgo east&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>HandlerGo.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerGo</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HandlerGo</span><span class="params">(Game game)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(game);<span class="comment">//现在HandlerGo能管理game对象了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//help和bye都与game无关，但go需要调用goRoom方法，所以需要拿到game对象的管理者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doCmd</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        game.goRoom(word);<span class="comment">//调用game的goRoom方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>HandlerGo在未来有更好的方法去实现，现在还是用管理者吧</p>
</blockquote>
<p>如果要加入新的命令，也非常简单<br>创建一个新的Handler子类，在里面实现命令的功能<br>在Game的构造器中将命令字符串和Handler的子类对象放进去  </p>
<p>现在这个城堡游戏已经有极高的可扩展性了  </p>
<blockquote>
<p>这个城堡游戏例子非常全面，偶尔回来看看这个例子，是个不错的选择</p>
</blockquote>
<hr>
<h1 id="抽象abstract"><a href="#抽象abstract" class="headerlink" title="抽象abstract"></a>抽象abstract</h1><p>关键字：<strong>abstract</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;<span class="comment">//抽象类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Graphics g)</span>;<span class="comment">//抽象方法不带&#123;&#125;，即不带方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>抽象方法：表达概念，但无法实现具体功能（代码）的方法<br>抽象类：表达概念而无法构造出实体（对象）的类  </p>
<p>有抽象方法的类<strong>一定</strong>是抽象类<br>抽象类不能<strong>制造</strong>对象，但是可以<strong>定义</strong>类变量（任何继承了抽象类的非抽象类的对象可以使用赋给这个类变量，即任何抽象类的子类的对象都可以由这个类变量来管理）<br>抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。  </p>
<p>继承自抽象类的子类必须覆盖父类中的抽象方法，否则自己成为抽象类（即子类必须实现抽象父类的抽象方法）</p>
<h2 id="两种抽象"><a href="#两种抽象" class="headerlink" title="两种抽象"></a>两种抽象</h2><p>与具体相对<br>·表示一种概念而非实体<br>与细节相对<br>·表示在一定程度上忽略细节而着眼大局  </p>
<hr>
<h1 id="细胞自动机"><a href="#细胞自动机" class="headerlink" title="细胞自动机"></a>细胞自动机</h1><p>死亡：如果活着的邻居的数量小于2或大于3，则死亡<br>新生：如果正好有3个邻居活着，则新生其他情况则保持原状  </p>
<figure class="highlight java"><figcaption><span>Cell.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cell</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">alive</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//默认为死亡状态</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">die</span><span class="params">()</span> &#123; alive = <span class="literal">false</span>; &#125;<span class="comment">//让细胞死亡</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reborn</span><span class="params">()</span> &#123; alive = <span class="literal">true</span>; &#125;<span class="comment">//让细胞重生</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAlive</span><span class="params">()</span> &#123; <span class="keyword">return</span> alive; &#125;<span class="comment">//返回细胞状态,判断细胞是否存活</span></span><br><span class="line">	<span class="comment">//绘制细胞</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Graphics g, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">		g.drawRect(x, y, size, size);<span class="comment">//画个空心矩形</span></span><br><span class="line">		<span class="keyword">if</span> ( alive ) &#123;<span class="comment">//如果细胞存活</span></span><br><span class="line">			g.fillRect(x, y, size, size);<span class="comment">//画个实心矩形</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>CellMachine.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cellmachine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cell.Cell;</span><br><span class="line"><span class="keyword">import</span> field.Field;</span><br><span class="line"><span class="keyword">import</span> field.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CellMachine</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//数据准备阶段,画出一个细胞网格</span></span><br><span class="line">		<span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Field</span>(<span class="number">30</span>,<span class="number">30</span>);<span class="comment">//一个30*30的网格</span></span><br><span class="line">		<span class="comment">//遍历网格，每个网格都有一个细胞</span></span><br><span class="line">		<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row&lt;field.getHeight(); row++ ) &#123;<span class="comment">//遍历每一行</span></span><br><span class="line">			<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col&lt;field.getWidth(); col++ ) &#123;<span class="comment">//遍历每一列</span></span><br><span class="line">				field.place(row, col, <span class="keyword">new</span> <span class="title class_">Cell</span>());<span class="comment">//每个细胞都有一个状态，初始状态为死亡</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//遍历每个细胞，设置初始细胞的生存状态</span></span><br><span class="line">		<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row&lt;field.getHeight(); row++ ) &#123;<span class="comment">//遍历每一行</span></span><br><span class="line">			<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col&lt;field.getWidth(); col++ ) &#123;<span class="comment">//遍历每一列</span></span><br><span class="line">				<span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> field.get(row, col);<span class="comment">//获取(row,col)位置上的细胞</span></span><br><span class="line">				<span class="comment">//利用随机数让整个网格的五分之一的细胞生存</span></span><br><span class="line">				<span class="keyword">if</span> ( Math.random() &lt; <span class="number">0.2</span> ) &#123; <span class="comment">//Math.random()返回0~1之间的随机数</span></span><br><span class="line">					cell.reborn();<span class="comment">//reborn()方法设置细胞的生存状态为true</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在窗口中显示细胞网格</span></span><br><span class="line">		<span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">View</span>(field);<span class="comment">//将网格传入View类中</span></span><br><span class="line">		<span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();<span class="comment">//创建一个JFrame对象,是java当中的窗口,用来显示细胞网格</span></span><br><span class="line">		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<span class="comment">//设置窗口关闭时的操作</span></span><br><span class="line">		frame.setResizable(<span class="literal">false</span>);<span class="comment">//设置窗口不可改变大小</span></span><br><span class="line">		frame.setTitle(<span class="string">&quot;Cells&quot;</span>);<span class="comment">//设置窗口的标题</span></span><br><span class="line">		frame.add(view);<span class="comment">//将网格添加到窗口中</span></span><br><span class="line">		frame.pack();<span class="comment">//设置窗口的大小</span></span><br><span class="line">		frame.setVisible(<span class="literal">true</span>);<span class="comment">//设置窗口可见,即显示出来</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//模拟细胞网格的运行</span></span><br><span class="line">		<span class="comment">//遍历整个网格,取出每个细胞</span></span><br><span class="line">		<span class="keyword">for</span> ( <span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++ ) &#123;<span class="comment">//进行1000次模拟</span></span><br><span class="line">			<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row&lt;field.getHeight(); row++ ) &#123;<span class="comment">//遍历每一行</span></span><br><span class="line">				<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col&lt;field.getWidth(); col++ ) &#123;<span class="comment">//遍历每一列</span></span><br><span class="line">					<span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> field.get(row, col);<span class="comment">//获取(row,col)位置上的细胞</span></span><br><span class="line">					Cell[] neighbour = field.getNeighbour(row, col);<span class="comment">//获取(row,col)位置上的细胞的邻居</span></span><br><span class="line">					<span class="type">int</span> <span class="variable">numOfLive</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//计数器，记录邻居中活细胞的个数</span></span><br><span class="line">					<span class="comment">//遍历邻居，计算邻居中有多少个细胞是活的</span></span><br><span class="line">					<span class="keyword">for</span> ( Cell c : neighbour ) &#123;</span><br><span class="line">						<span class="keyword">if</span> ( c.isAlive() ) &#123;<span class="comment">//如果邻居中有一个细胞是活的</span></span><br><span class="line">							numOfLive++;<span class="comment">//让计数器加一</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="comment">//控制台输出当前细胞的状态</span></span><br><span class="line">					System.out.print(<span class="string">&quot;[&quot;</span>+row+<span class="string">&quot;][&quot;</span>+col+<span class="string">&quot;]:&quot;</span>);<span class="comment">//打印细胞的位置</span></span><br><span class="line">					System.out.print(cell.isAlive()?<span class="string">&quot;live&quot;</span>:<span class="string">&quot;dead&quot;</span>);<span class="comment">//打印细胞的状态</span></span><br><span class="line">					System.out.print(<span class="string">&quot;:&quot;</span>+numOfLive+<span class="string">&quot;--&gt;&quot;</span>);<span class="comment">//打印细胞的邻居中有多少个细胞是活的</span></span><br><span class="line">					<span class="comment">//写入下一次的细胞状态</span></span><br><span class="line">					<span class="keyword">if</span> ( cell.isAlive() ) &#123;<span class="comment">//如果当前细胞是活的</span></span><br><span class="line">						<span class="keyword">if</span> ( numOfLive &lt;<span class="number">2</span> || numOfLive &gt;<span class="number">3</span> ) &#123;<span class="comment">//判断是否满足让细胞死的条件条件</span></span><br><span class="line">							cell.die();<span class="comment">//让细胞死</span></span><br><span class="line">							System.out.print(<span class="string">&quot;die&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( numOfLive == <span class="number">3</span> ) &#123;<span class="comment">//如果当前细胞是死的，判断是否满足让细胞活的条件条件</span></span><br><span class="line">						cell.reborn();<span class="comment">//让细胞活</span></span><br><span class="line">						System.out.print(<span class="string">&quot;reborn&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					System.out.println();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;UPDATE&quot;</span>);</span><br><span class="line">			frame.repaint();<span class="comment">//整个Field都更新好后，画出棋盘</span></span><br><span class="line">			<span class="comment">//延时</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">200</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Field.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cell.Cell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Field</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> width;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> height;</span><br><span class="line">	<span class="keyword">private</span> Cell[][] field;<span class="comment">//一个二维数组field，存放每个格子（细胞）</span></span><br><span class="line">	<span class="comment">//构造器，初始化棋盘</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Field</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.width = width;</span><br><span class="line">		<span class="built_in">this</span>.height = height;</span><br><span class="line">		field = <span class="keyword">new</span> <span class="title class_">Cell</span>[height][width];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123; <span class="keyword">return</span> width; &#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123; <span class="keyword">return</span> height; &#125;</span><br><span class="line">	<span class="comment">//添加细胞</span></span><br><span class="line">	<span class="keyword">public</span> Cell <span class="title function_">place</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, Cell o)</span> &#123;</span><br><span class="line">		<span class="type">Cell</span> <span class="variable">ret</span> <span class="operator">=</span> field[row][col];</span><br><span class="line">		field[row][col] = o;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获取某个格子</span></span><br><span class="line">	<span class="keyword">public</span> Cell <span class="title function_">get</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> field[row][col];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获取周围细胞</span></span><br><span class="line">	<span class="keyword">public</span> Cell[] getNeighbour(<span class="type">int</span> row, <span class="type">int</span> col) &#123;</span><br><span class="line">		ArrayList&lt;Cell&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Cell&gt;();</span><br><span class="line">		<span class="keyword">for</span> ( <span class="type">int</span> i=-<span class="number">1</span>; i&lt;<span class="number">2</span>; i++ ) &#123;</span><br><span class="line">			<span class="keyword">for</span> ( <span class="type">int</span> j=-<span class="number">1</span>; j&lt;<span class="number">2</span>; j++ ) &#123;</span><br><span class="line">				<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> row+i;</span><br><span class="line">				<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> col+j;</span><br><span class="line">				<span class="keyword">if</span> ( r &gt;-<span class="number">1</span> &amp;&amp; r&lt;height &amp;&amp; c&gt;-<span class="number">1</span> &amp;&amp; c&lt;width &amp;&amp; !(r== row &amp;&amp; c == col) ) &#123;</span><br><span class="line">					list.add(field[r][c]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//toArray会自动把一个Cell[]数组装好，让返回这个数组</span></span><br><span class="line">		<span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">Cell</span>[list.size()]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//清空所有格子</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> ( <span class="type">int</span> i=<span class="number">0</span>; i&lt;height; i++ ) &#123;</span><br><span class="line">			<span class="keyword">for</span> ( <span class="type">int</span> j=<span class="number">0</span>; j&lt;width; j++ ) &#123;</span><br><span class="line">				field[i][j] = <span class="literal">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>View.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Dimension;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cell.Cell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">View</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">5258995676212660595L</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GRID_SIZE</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">	<span class="keyword">private</span> Field theField;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//构造器</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">View</span><span class="params">(Field field)</span> &#123;</span><br><span class="line">		theField = field;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//每次当窗口被重绘时调用，被调用时会得到一个Graphics对象，即当前要画的对象</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>.paint(g);<span class="comment">//调用父类的paint方法</span></span><br><span class="line">		<span class="comment">//绘制网格</span></span><br><span class="line">		<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row&lt;theField.getHeight(); row++ ) &#123;<span class="comment">//行</span></span><br><span class="line">			<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col&lt;theField.getWidth(); col++ ) &#123;<span class="comment">//列</span></span><br><span class="line">				<span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> theField.get(row, col);<span class="comment">//得到每个格子的对象</span></span><br><span class="line">				<span class="keyword">if</span> ( cell != <span class="literal">null</span> ) &#123;<span class="comment">//如果该格子有对象</span></span><br><span class="line">					cell.draw(g, col*GRID_SIZE, row*GRID_SIZE, GRID_SIZE);<span class="comment">//绘制该格子</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Dimension <span class="title function_">getPreferredSize</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dimension</span>(theField.getWidth()*GRID_SIZE+<span class="number">1</span>, theField.getHeight()*GRID_SIZE+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Field</span>(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">		<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row&lt;field.getHeight(); row++ ) &#123;</span><br><span class="line">			<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col&lt;field.getWidth(); col++ ) &#123;</span><br><span class="line">				field.place(row, col, <span class="keyword">new</span> <span class="title class_">Cell</span>());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">View</span>(field);</span><br><span class="line">		<span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">		frame.setResizable(<span class="literal">false</span>);</span><br><span class="line">		frame.setTitle(<span class="string">&quot;Cells&quot;</span>);</span><br><span class="line">		frame.add(view);</span><br><span class="line">		frame.pack();</span><br><span class="line">		frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Cell、Field、View的关系"><a href="#Cell、Field、View的关系" class="headerlink" title="Cell、Field、View的关系"></a>Cell、Field、View的关系</h2><p>Field只需要管好数据以及提供数据<br>View只管拿到数据之后按数据把整个网格都重新画一遍<br>而Cell只管自己应该画空心还是实心，Field要就提供给它  </p>
<p>不去精心设计哪个局部需要更新，需要更新就整个重画<br>这样简化了程序逻辑，是在计算机运算速度提高的基础上实现的  </p>
<div><img src=/images/7-8.webp width="80%" height="80%"></div>

<h2 id="数据与表现分离"><a href="#数据与表现分离" class="headerlink" title="数据与表现分离"></a>数据与表现分离</h2><p>程序的业务逻辑与表现无关<br>-表现可以是图形的也可以是文本的<br>-表现可以是当地的也可以是远程的  </p>
<p>需要不同表现，那就用不同表现的代码去取数据，然后表现出来  </p>
<h2 id="责任驱动的设计"><a href="#责任驱动的设计" class="headerlink" title="责任驱动的设计"></a>责任驱动的设计</h2><p>将程序要实现的功能分配到合适的类/对象中去是设计中非常重要的一环  </p>
<p>将功能拆分成很多个部分，每个部分只做自己擅长做的、简单的事  </p>
<h2 id="网格化"><a href="#网格化" class="headerlink" title="网格化"></a>网格化</h2><p>图形界面本身有更高的解析度，但是将画面网格化以后，数据就更容易处理了  </p>
<p>无需关心x、y轴坐标，只需知道要操作的对象在第几行第几列</p>
<hr>
<h1 id="狐狸和兔子"><a href="#狐狸和兔子" class="headerlink" title="狐狸和兔子"></a>狐狸和兔子</h1><p>细胞自动机是细胞在一个网格上，每个细胞都有两种状态  </p>
<p>现在要模拟一个有狐狸和兔子的农场：<br>·狐狸和兔子都有年龄，且有规律增加<br>·当年龄到了一定的上限就会自然死亡<br>·狐狸可以随机决定在周围的兔子中吃一个，吃了后年龄上限会提高<br>·狐狸和兔子可以随机决定生一个小的，放在旁边的空的格子里<br>·如果不吃也不生，狐狸和兔子可以随机决定向旁边空的格子移一步  </p>
<p>这比只有细胞，细胞只有两种状态要复杂得多  </p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>这个没注释，原理和细胞自动机差不多<br><figure class="highlight java"><figcaption><span>Cell.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Cell</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Graphics g, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> size)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>Animal.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> field.Location;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> ageLimit;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> breedableAge;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isAlive</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(<span class="type">int</span> ageLimit, <span class="type">int</span> breedableAge)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.ageLimit = ageLimit;</span><br><span class="line">		<span class="built_in">this</span>.breedableAge = breedableAge;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="type">double</span> <span class="title function_">getAgePercent</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="type">double</span>) age / ageLimit;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> Animal <span class="title function_">breed</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">()</span> &#123;</span><br><span class="line">		age++;</span><br><span class="line">		<span class="keyword">if</span> (age &gt;= ageLimit) &#123;</span><br><span class="line">			die();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">die</span><span class="params">()</span> &#123;</span><br><span class="line">		isAlive = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAlive</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> isAlive;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBreedable</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> age &gt;= breedableAge;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Location <span class="title function_">move</span><span class="params">(Location[] freeAdj)</span> &#123;</span><br><span class="line">		<span class="type">Location</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (freeAdj.length &gt; <span class="number">0</span> &amp;&amp; Math.random() &lt; <span class="number">0.02</span>) &#123;</span><br><span class="line">			ret = freeAdj[(<span class="type">int</span>) (Math.random() * freeAdj.length)];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span> + age + <span class="string">&quot;:&quot;</span> + (isAlive ? <span class="string">&quot;live&quot;</span> : <span class="string">&quot;dead&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Animal <span class="title function_">feed</span><span class="params">(ArrayList&lt;Animal&gt; neighbour)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">longerLife</span><span class="params">(<span class="type">int</span> inc)</span> &#123;</span><br><span class="line">		ageLimit += inc;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Fox.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cell.Cell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fox</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Cell</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Fox</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(<span class="number">20</span>, <span class="number">4</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Graphics g, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">alpha</span> <span class="operator">=</span> (<span class="type">int</span>) ((<span class="number">1</span> - getAgePercent()) * <span class="number">255</span>);</span><br><span class="line">		g.setColor(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, alpha));<span class="comment">// (int)((20-getAge())/20.0*255)));</span></span><br><span class="line">		g.fillRect(x, y, size, size);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Animal <span class="title function_">breed</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Animal</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (isBreedable() &amp;&amp; Math.random() &lt; <span class="number">0.05</span>) &#123;</span><br><span class="line">			ret = <span class="keyword">new</span> <span class="title class_">Fox</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Fox:&quot;</span> + <span class="built_in">super</span>.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Animal <span class="title function_">feed</span><span class="params">(ArrayList&lt;Animal&gt; neighbour)</span> &#123;</span><br><span class="line">		<span class="type">Animal</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (Math.random() &lt; <span class="number">0.2</span>) &#123;</span><br><span class="line">			ret = neighbour.get((<span class="type">int</span>) (Math.random() * neighbour.size()));</span><br><span class="line">			longerLife(<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Rabbit.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> cell.Cell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Cell</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Rabbit</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Graphics g, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">alpha</span> <span class="operator">=</span> (<span class="type">int</span>) ((<span class="number">1</span> - getAgePercent()) * <span class="number">255</span>);</span><br><span class="line">		g.setColor(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, alpha));</span><br><span class="line">		g.fillRect(x, y, size, size);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Animal <span class="title function_">breed</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Animal</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (isBreedable() &amp;&amp; Math.random() &lt; <span class="number">0.12</span>) &#123;</span><br><span class="line">			ret = <span class="keyword">new</span> <span class="title class_">Rabbit</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Rabbit:&quot;</span> + <span class="built_in">super</span>.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Field.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> cell.Cell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Field</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Location[] adjacent = &#123;</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">Location</span>(-<span class="number">1</span>, -<span class="number">1</span>), <span class="keyword">new</span> <span class="title class_">Location</span>(-<span class="number">1</span>, <span class="number">0</span>), <span class="keyword">new</span> <span class="title class_">Location</span>(-<span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">Location</span>(<span class="number">0</span>, -<span class="number">1</span>), <span class="keyword">new</span> <span class="title class_">Location</span>(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> <span class="title class_">Location</span>(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">Location</span>(<span class="number">1</span>, -<span class="number">1</span>), <span class="keyword">new</span> <span class="title class_">Location</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="keyword">new</span> <span class="title class_">Location</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> width;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> height;</span><br><span class="line">	<span class="keyword">private</span> Cell[][] field;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Field</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.width = width;</span><br><span class="line">		<span class="built_in">this</span>.height = height;</span><br><span class="line">		field = <span class="keyword">new</span> <span class="title class_">Cell</span>[height][width];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> width;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> height;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Cell <span class="title function_">place</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, Cell o)</span> &#123;</span><br><span class="line">		<span class="type">Cell</span> <span class="variable">ret</span> <span class="operator">=</span> field[row][col];</span><br><span class="line">		field[row][col] = o;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Cell <span class="title function_">get</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> field[row][col];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Cell[] getNeighbour(<span class="type">int</span> row, <span class="type">int</span> col) &#123;</span><br><span class="line">		ArrayList&lt;Cell&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Cell&gt;();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> -<span class="number">1</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> -<span class="number">1</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">				<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> row + i;</span><br><span class="line">				<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> col + j;</span><br><span class="line">				<span class="keyword">if</span> (r &gt; -<span class="number">1</span> &amp;&amp; r &lt; height &amp;&amp; c &gt; -<span class="number">1</span> &amp;&amp; c &lt; width &amp;&amp; !(r == row &amp;&amp; c == col)) &#123;</span><br><span class="line">					list.add(field[r][c]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">Cell</span>[list.size()]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Location[] getFreeNeighbour(<span class="type">int</span> row, <span class="type">int</span> col) &#123;</span><br><span class="line">		ArrayList&lt;Location&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Location&gt;();</span><br><span class="line">		<span class="keyword">for</span> (Location loc : adjacent) &#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> row + loc.getRow();</span><br><span class="line">			<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> col + loc.getCol();</span><br><span class="line">			<span class="keyword">if</span> (r &gt; -<span class="number">1</span> &amp;&amp; r &lt; height &amp;&amp; c &gt; -<span class="number">1</span> &amp;&amp; c &lt; width &amp;&amp; field[r][c] == <span class="literal">null</span>) &#123;</span><br><span class="line">				list.add(<span class="keyword">new</span> <span class="title class_">Location</span>(r, c));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">Location</span>[list.size()]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">placeRandomAdj</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, Cell cell)</span> &#123;</span><br><span class="line">		<span class="type">boolean</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">		Location[] freeAdj = getFreeNeighbour(row, col);</span><br><span class="line">		<span class="keyword">if</span> (freeAdj.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * freeAdj.length);</span><br><span class="line">			field[freeAdj[idx].getRow()][freeAdj[idx].getCol()] = cell;</span><br><span class="line">			ret = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Cell <span class="title function_">remove</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">		<span class="type">Cell</span> <span class="variable">ret</span> <span class="operator">=</span> field[row][col];</span><br><span class="line">		field[row][col] = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Cell cell)</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; height; row++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; width; col++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (field[row][col] == cell) &#123;</span><br><span class="line">					field[row][col] = <span class="literal">null</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; height; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; width; j++) &#123;</span><br><span class="line">				field[i][j] = <span class="literal">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, Location loc)</span> &#123;</span><br><span class="line">		field[loc.getRow()][loc.getCol()] = field[row][col];</span><br><span class="line">		remove(row, col);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Location.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Location</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> row;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> col;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Location</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.row = row;</span><br><span class="line">		<span class="built_in">this</span>.col = col;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRow</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> row;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCol</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> col;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>View.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Dimension;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"><span class="keyword">import</span> cell.Cell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">View</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2417015700213488315L</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GRID_SIZE</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">	<span class="keyword">private</span> Field theField;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">View</span><span class="params">(Field field)</span> &#123;</span><br><span class="line">		theField = field;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>.paint(g);</span><br><span class="line">		g.setColor(Color.GRAY);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; theField.getHeight(); row++) &#123;</span><br><span class="line">			g.drawLine(<span class="number">0</span>, row * GRID_SIZE, theField.getWidth() * GRID_SIZE, row * GRID_SIZE);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; theField.getWidth(); col++) &#123;</span><br><span class="line">			g.drawLine(col * GRID_SIZE, <span class="number">0</span>, col * GRID_SIZE, theField.getHeight() * GRID_SIZE);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; theField.getHeight(); row++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; theField.getWidth(); col++) &#123;</span><br><span class="line">				<span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> theField.get(row, col);</span><br><span class="line">				<span class="keyword">if</span> (cell != <span class="literal">null</span>) &#123;</span><br><span class="line">					cell.draw(g, col * GRID_SIZE, row * GRID_SIZE, GRID_SIZE);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Dimension <span class="title function_">getPreferredSize</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dimension</span>(theField.getWidth() * GRID_SIZE + <span class="number">1</span>, theField.getHeight() * GRID_SIZE + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>FoxAndRabbit.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> foxnrabbit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> animal.Animal;</span><br><span class="line"><span class="keyword">import</span> animal.Fox;</span><br><span class="line"><span class="keyword">import</span> animal.Rabbit;</span><br><span class="line"><span class="keyword">import</span> cell.Cell;</span><br><span class="line"><span class="keyword">import</span> field.Field;</span><br><span class="line"><span class="keyword">import</span> field.Location;</span><br><span class="line"><span class="keyword">import</span> field.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FoxAndRabbit</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Field theField;</span><br><span class="line">	<span class="keyword">private</span> View theView;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">FoxAndRabbit</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">		theField = <span class="keyword">new</span> <span class="title class_">Field</span>(size, size);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; theField.getHeight(); row++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; theField.getWidth(); col++) &#123;</span><br><span class="line">				<span class="type">double</span> <span class="variable">probability</span> <span class="operator">=</span> Math.random();</span><br><span class="line">				<span class="keyword">if</span> (probability &lt; <span class="number">0.05</span>) &#123;</span><br><span class="line">					theField.place(row, col, <span class="keyword">new</span> <span class="title class_">Fox</span>());</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (probability &lt; <span class="number">0.15</span>) &#123;</span><br><span class="line">					theField.place(row, col, <span class="keyword">new</span> <span class="title class_">Rabbit</span>());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		theView = <span class="keyword">new</span> <span class="title class_">View</span>(theField);</span><br><span class="line">		<span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">		frame.setResizable(<span class="literal">false</span>);</span><br><span class="line">		frame.setTitle(<span class="string">&quot;Cells&quot;</span>);</span><br><span class="line">		frame.add(theView);</span><br><span class="line">		frame.pack();</span><br><span class="line">		frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(<span class="type">int</span> steps)</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; steps; i++) &#123;</span><br><span class="line">			step();</span><br><span class="line">			theView.repaint();</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">200</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">step</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; theField.getHeight(); row++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; theField.getWidth(); col++) &#123;</span><br><span class="line">				<span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> theField.get(row, col);</span><br><span class="line">				<span class="keyword">if</span> (cell != <span class="literal">null</span>) &#123;</span><br><span class="line">					<span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> (Animal) cell;</span><br><span class="line">					animal.grow();</span><br><span class="line">					<span class="keyword">if</span> (animal.isAlive()) &#123;</span><br><span class="line">						<span class="type">Location</span> <span class="variable">loc</span> <span class="operator">=</span> animal.move(theField.getFreeNeighbour(row, col));</span><br><span class="line">						<span class="keyword">if</span> (loc != <span class="literal">null</span>) &#123;</span><br><span class="line">							theField.move(row, col, loc);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="comment">// eat</span></span><br><span class="line">						<span class="comment">// animal.eat(theField);</span></span><br><span class="line">						Cell[] neighbour = theField.getNeighbour(row, col);</span><br><span class="line">						ArrayList&lt;Animal&gt; listRabbit = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Animal&gt;();</span><br><span class="line">						<span class="keyword">for</span> (Cell an : neighbour) &#123;</span><br><span class="line">							<span class="keyword">if</span> (an <span class="keyword">instanceof</span> Rabbit) &#123;</span><br><span class="line">								listRabbit.add((Rabbit) an);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">if</span> (!listRabbit.isEmpty()) &#123;</span><br><span class="line">							<span class="type">Animal</span> <span class="variable">fed</span> <span class="operator">=</span> animal.feed(listRabbit);</span><br><span class="line">							<span class="keyword">if</span> (fed != <span class="literal">null</span>) &#123;</span><br><span class="line">								theField.remove((Cell) fed);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="comment">// breed</span></span><br><span class="line">						<span class="type">Animal</span> <span class="variable">baby</span> <span class="operator">=</span> animal.breed();</span><br><span class="line">						<span class="keyword">if</span> (baby != <span class="literal">null</span>) &#123;</span><br><span class="line">							theField.placeRandomAdj(row, col, (Cell) baby);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">						theField.remove(row, col);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">FoxAndRabbit</span> <span class="variable">fab</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FoxAndRabbit</span>(<span class="number">50</span>);</span><br><span class="line">		fab.start(<span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="项目结构及分析"><a href="#项目结构及分析" class="headerlink" title="项目结构及分析"></a>项目结构及分析</h2><div><img src=/images/7-9.webp width="40%" height="40%"></div>

<p>在英文中Cell有两种意思，格子、细胞<br>在刚刚到细胞自动机中，Cell类表达细胞，或者没有细胞的空格子，这很合理  </p>
<p>狐狸和兔子类有很多相似的属性和动作，所以它们应该有一个父类<br>但这个父类不应该是Cell，Cell在这个程序中应该表达有东西或没东西的格子才合理<br>所以这个父类应该是Animal  </p>
<p>现在类之间关系是这样的：  </p>
<div><img src=/images/7-10.webp width="100%" height="100%"></div>

<p>在细胞自动机中我们通过place(r,c,cell)将Cell放进网格中<br>但现在Fox、Rabbit和Cell没有联系，无法将它们放进网格中<br>如果按照之前的思路，Fox、Rabbit应该也是Cell的子类，但多继承是不被允许的（除了C++）  </p>
<p>如果让Animal从Cell继承，这在语意上是模糊的，动物不应该是一种格子（虽然这样做能实现）  </p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口是纯抽象类<br>·所有的成员函数都是抽象函数<br>·所有的成员变量都是public static final  </p>
<p>类表达一个具体的东西，而接口表达一种概念、一种规范<br>接口规定了长什么样，但是不管里面有什么  </p>
<p>我们可以将Cell类改造成接口：<br><figure class="highlight java"><figcaption><span>Cell</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Cell</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Graphics g, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> size)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Cell现在的作用：所有实现了Cell这个接口的类，都应该有draw这个方法<br>在这个程序中，只要实现了这个方法的类的对象，都可以直接放到Field中  </p>
<p>为什么Cell接口只要求实现draw方法？<br>因为将来View只需要拿Cell去draw，所以只需要要求放到Field里的类的对象实现draw方法  </p>
<p>现在类之间关系是这样的：  </p>
<div><img src=/images/7-11.webp width="100%" height="100%"></div>

<p>现在Fox、Rabbit的对象都可以放进Field里（Field需要一个Cell，而Fox、Rabbit都实现了Cell）  </p>
<h3 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h3><p>用关键字implements让类实现接口<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fox</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Cell</span>&#123;</span><br><span class="line">    <span class="comment">//Fox是一种Animal，它实现了Cell</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在Field的place方法中,place需要一个Cell类的对象<br>Cell本身是一个接口，它本身是抽象的，不可能有对象<br>但<strong>所有实现了Cell接口</strong>的对象都可以交给Cell对象的管理者<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Cell <span class="title function_">place</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, Cell o)</span> &#123;</span><br><span class="line">		<span class="type">Cell</span> <span class="variable">ret</span> <span class="operator">=</span> field[row][col];</span><br><span class="line">		field[row][col] = o;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure><br>当Fox实现Cell后，就必须重写Cell中的方法<br>把draw方法实际地做出来<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Graphics g, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">alpha</span> <span class="operator">=</span> (<span class="type">int</span>) ((<span class="number">1</span> - getAgePercent()) * <span class="number">255</span>);</span><br><span class="line">		g.setColor(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, alpha));</span><br><span class="line">		g.fillRect(x, y, size, size);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure><br>类用extends,接口用implements<br>类可以实现很多接口<br>接口可以继承接口，但不能继承类<br>接口不能实现接口  </p>
<h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><p>声明一个接口<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Cell</span>&#123;<span class="comment">//接口</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cell</span>&#123;<span class="comment">//类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>interface是一种特殊的class，它替代掉了class  </p>
<h3 id="面向接口的编程方式"><a href="#面向接口的编程方式" class="headerlink" title="面向接口的编程方式"></a>面向接口的编程方式</h3><p>在上面的程序中，Field需要一个能draw的类的对象，然后Field提供了一个Cell接口，所有实现了这个接口的东西都可以交给Field，而它不关心这个东西是什么，只需要符合接口即可  </p>
<p>设计程序时先定义接口，再实现类<br>任何需要在函数间传入传出的一定是接口而不是具体的类<br>是Java成功的关键之一，因为极适合多人同时写一个大程序：每个人只需要用接口去提出要求，其他人根据借口实现具体的类<br>也是Java被批评的要点之一，因为代码量膨胀起来很快，显得程序十分臃肿  </p>
<h2 id="增加一个按钮"><a href="#增加一个按钮" class="headerlink" title="增加一个按钮"></a>增加一个按钮</h2><p>在狐狸与兔子程序的图形界面中增加一个按钮，按一下执行一步   </p>
<p>在FoxAndRabbit.java中，这么一段代码生成了一个窗口<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">theView = <span class="keyword">new</span> <span class="title class_">View</span>(theField);</span><br><span class="line"><span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">frame.setResizable(<span class="literal">false</span>);</span><br><span class="line">frame.setTitle(<span class="string">&quot;Cells&quot;</span>);</span><br><span class="line">frame.add(theView);</span><br><span class="line">frame.pack();</span><br><span class="line">frame.setVisible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><br>首先要在窗口中增加一个按钮<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">theView = <span class="keyword">new</span> <span class="title class_">View</span>(theField);</span><br><span class="line"><span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">frame.setResizable(<span class="literal">false</span>);</span><br><span class="line">frame.setTitle(<span class="string">&quot;Cells&quot;</span>);</span><br><span class="line">frame.add(theView);</span><br><span class="line"><span class="comment">//有一个类叫JButton，做一个叫btnstep的对象</span></span><br><span class="line"><span class="type">JButton</span> <span class="variable">btnstep</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;单步&quot;</span>);</span><br><span class="line"><span class="comment">//把这个按钮加到窗口中</span></span><br><span class="line">frame.add(btnstep);</span><br><span class="line">frame.pack();</span><br><span class="line">frame.setVisible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><br>运行一下</p>
<div><img src=/images/7-12.webp width="30%" height="30%"></div>

<p>整个窗口只剩下了我们加进去的这个按钮,解决这个问题我们需要了解Swing  </p>
<hr>
<blockquote>
<p>下接<a href="https://www.chuckle.top/article/8636f786.html">JAVA/面向对象学习笔记(3)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>我的butterfly魔改</title>
    <url>/article/ab2d75d5.html</url>
    <content><![CDATA[<p>咕咕咕~</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Butterfly</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA/面向对象学习笔记(3)</title>
    <url>/article/8636f786.html</url>
    <content><![CDATA[<blockquote>
<p>所看教程（视频）：《浙江大学-翁恺-Java-面向对象程序设计》<br>作为我自己的复习笔记，也可以当做该视频的同步笔记<br>上接<a href="https://www.chuckle.top/article/9f2dc6c7.html">JAVA/面向对象学习笔记(2)</a></p>
</blockquote>
<h1 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h1><p><strong>Swing</strong>是一个为Java设计的GUI工具包，是java的基础类（import javax.swing.<em>;）<br>在Swing中，所有我们在界面中看到的东西都是<em>*部件</em></em>（组件）  </p>
<p>其中容器是一种特殊的部件<br>部件可以被放进容器中，当然容器也能放进容器中  </p>
<p>Swing提供了一个底层容器类JFrame，即整个窗口<br><figure class="highlight java"><figcaption><span>JFrame中常用的方法</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个无标题的窗口</span></span><br><span class="line">JFrame()</span><br><span class="line"><span class="comment">//创建标题为s的窗口</span></span><br><span class="line">JFrame(String s)</span><br><span class="line"><span class="comment">//设置窗口的初始位置是(a,b),即距屏幕左面a个像素，距屏幕上方b个像素，窗口的宽是width,高是height。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBounds</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> width,<span class="type">int</span> height)</span></span><br><span class="line"><span class="comment">//设置窗口的大小。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="type">int</span> width,<span class="type">int</span> height)</span></span><br><span class="line"><span class="comment">//设置窗口的位置，默认位置是(0,0)。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLocation</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line"><span class="comment">//设置窗口是否可见，窗口默认是不可见的。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVisible</span><span class="params">(<span class="type">boolean</span> b)</span></span><br><span class="line"><span class="comment">//设置窗口是否可调整大小，默认可调整大小。public voiddispose()撤销当前窗口，并释放当前窗口所使用的资源。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResizable</span><span class="params">(<span class="type">boolean</span> b)</span></span><br><span class="line"><span class="comment">//撤销当前窗口，并释放当前窗口所使用的全部资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispose</span><span class="params">()</span></span><br><span class="line"><span class="comment">//设置窗口的扩展状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExtendedState</span><span class="params">(<span class="type">int</span> state)</span></span><br><span class="line"><span class="comment">//其中参数state取JFrame类中的下列类常量:</span></span><br><span class="line">MAXIMIZED_HORIZ (水平方向最大化)，</span><br><span class="line">MAXIMIZED_VERT (垂直方向最大化)，</span><br><span class="line">MAXIMIZED_BOTH (水平、垂直方向都最大化)。</span><br><span class="line"><span class="comment">//该方法用来设置单击窗体右上角的关闭图标后，程序会做出怎样的处理，</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDefaultCloseOperation</span><span class="params">(<span class="type">int</span> operation)</span></span><br><span class="line"><span class="comment">//其中的参数operation取JFrame类中的下列int型static常量，程序根据参数operation取值做出不同的处理:</span></span><br><span class="line">DO_NOTHING_ON_CLOSE(什么也不做)，</span><br><span class="line">HIDE_ON_CLOSE (隐藏当前窗口)，</span><br><span class="line">DISPOSE_ON_CLOSE (隐藏当前窗口，并释放窗体占有的其他资源)，</span><br><span class="line">EXIT_ON_CLOSE (结束窗口所在的应用程序)</span><br></pre></td></tr></table></figure></p>
<h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><p>通过add把一个部件加到一个容器中<br>部件被加到容器后，就受这个容器所管理<br>容器管理部件的方式叫<strong>布局管理器</strong><br>JFrame默认采用的布局管理器叫<strong>BorderLayout</strong>,默认把部件放到CENTER<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">theView = <span class="keyword">new</span> <span class="title class_">View</span>(theField);<span class="comment">//theView是一个容器</span></span><br><span class="line"><span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();<span class="comment">//创建一个底层容器</span></span><br><span class="line">frame.add(theView);<span class="comment">//把theView容器加到底层容器中。默认为中间</span></span><br><span class="line"><span class="type">JButton</span> <span class="variable">btnstep</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;单步&quot;</span>);<span class="comment">//btnstep是一个按钮部件</span></span><br><span class="line">frame.add(btnstep, BorderLayout.SOUTH);<span class="comment">//把btnstep部件加到底层容器中，且放到南边（窗口最下面）</span></span><br></pre></td></tr></table></figure></p>
<h2 id="BorderLayout"><a href="#BorderLayout" class="headerlink" title="BorderLayout"></a>BorderLayout</h2><p>BorderLayout把整个容器划分为五个部分  </p>
<div><img src=/images/7-13.webp width="60%" height="60%"></div>

<p>后面放进去的部件会替换掉相同位置的部件（这就是为什么之前界面中只剩下一个按钮了）<br>当有部分没有部件时，其他部分会膨胀，将那个位置所占据  </p>
<p>BorderLayout会根据部件里面的东西来帮我们计算，这个部件需要占据多大的空间 </p>
<h2 id="消息机制"><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h2><p>现在我们有了一个按下去没反应的按钮<br>如何让按钮按下去有反应？程序如何知道按钮被按下去了？<br>用户在图形界面做了一些操作，通过一些路径让程序知道，这个路径叫做<strong>消息机制</strong>  </p>
<p>Java的Swing类实现了一个有意思的消息机制<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">JButton</span> <span class="variable">btnstep</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;单步&quot;</span>);</span><br><span class="line">frame.add(btnstep, BorderLayout.SOUTH);</span><br><span class="line">btnstep.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;成功按下!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>运行一下，当我们点击一次按钮，控制台都会输出一次“成功按下!”</p>
<p>现在程序已经知道按钮被按下，且在上面的古怪代码中能成功做一些我们期望程序做的事（输出点东西）<br>我们可以把输出点东西换成其它事情，在狐狸和兔子中，step()函数控制单步<br>我们只需要做下面一些动作，就能让按钮控制单步<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> JFrame frame;<span class="comment">//把frame从FoxAndRabbit()中拿出来，让它变为FoxAndRabbit类中的成员变量</span></span><br><span class="line">···</span><br><span class="line"><span class="comment">//JFrame frame = new JFrame();</span></span><br><span class="line">frame = <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">···</span><br><span class="line">btnstep.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>()&#123;</span><br><span class="line">    <span class="comment">//实现了ActionListener这个接口的匿名类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">		step();</span><br><span class="line">        frame.repaint();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line">···</span><br><span class="line"><span class="comment">//fab.start(500);把main里的这句去掉，不让程序主动地开始</span></span><br></pre></td></tr></table></figure><br>现在每按一次按钮，程序就会运行一步  </p>
<p>按钮自己有代码，知道自己被按下去了，但按钮作为一个早已经定好的类不可能有代码去调用step()<br>但实际效果就是，每按一次按钮，step()就会被调用一次，这是怎么做到的？  </p>
<div><img src=/images/7-14.webp width="90%" height="90%"></div>

<p>JButton类提供了一个接口，只要实现了这个接口的类的对象，都可以通过<strong>addActionListener()</strong>方法<strong>注册</strong>给JButton，当按钮发现自己被按下去了，就会检查有没有东西注册在按钮那，接着找到重写的<strong>actionPerformed()</strong>，这样JButton就知道step()了<br>注册进去的东西，是运行时候一个动态的对象  </p>
<p>这就是<strong>反转控制</strong>（Swing的消息机制）：<br>·由按钮公布一个守听者接口和一对注册/注销函数<br>·你的代码实现那个接口，将守听者对象注册在按钮上<br>·一旦按钮被按下，就会反过来调用你的守听者对象的某个函数   </p>
<h2 id="内部类、匿名类"><a href="#内部类、匿名类" class="headerlink" title="内部类、匿名类"></a>内部类、匿名类</h2><p>刚刚实现接口的代码看起来十分奇怪<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">btnstep.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>()&#123;</span><br><span class="line">    <span class="comment">//实现了ActionListener这个接口的匿名类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">		step();</span><br><span class="line">        frame.repaint();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>可以换种写法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在类中新增这个类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">stepListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">		step();</span><br><span class="line">		frame.repaint();			</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">···</span><br><span class="line"><span class="comment">//原来的代码替换为这句</span></span><br><span class="line">btnstep.addActionListener(<span class="keyword">new</span> <span class="title class_">stepListener</span>());</span><br></pre></td></tr></table></figure><br>在一个类的内部，再定义一个类，这个类就叫<strong>内部类</strong><br>内部类可以<strong>直接访问</strong>其所处类的<strong>所有</strong>成员<br>java的内部类也是类的成员<br>外部是函数时，只能访问那个函数里<strong>final</strong>的变量   </p>
<p>用匿名类实现接口<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ActionListener</span>()&#123;</span><br><span class="line">    <span class="comment">//实现了ActionListener这个接口的匿名类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">		step();</span><br><span class="line">        frame.repaint();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在<strong>new对象</strong>的时候给出的<strong>类的定义</strong>形成了匿名类<br>匿名类可以<strong>继承某类</strong>，也可以<strong>实现某接口</strong><br>Swingl的消息机制广泛使用匿名类<br>外部是函数时，只能访问那个函数里<strong>final</strong>的变量  </p>
<p>为什么需要匿名类？<br>Swing的消息机制决定了，每个部件发出的消息，都需要新的类去实现接口，然后去接收消息，当部件很多时，给每个类起名字非常麻烦   </p>
<hr>
<h1 id="一个课程表"><a href="#一个课程表" class="headerlink" title="一个课程表"></a>一个课程表</h1><p>做一个课程表程序，它有8行7列，有表头表示7天，每个格子用户能自己编辑内容<br>效果是这样：  </p>
<div><img src=/images/7-15.webp width="60%" height="60%"></div>

<p>有前面Swing的基础，我们知道想要有一个窗口，需要用到JFrame类，来创建一个底层窗口<br><figure class="highlight java"><figcaption><span>KCB.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> kcb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KCB</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();<span class="comment">//声明一个窗口</span></span><br><span class="line">        frame.pack();<span class="comment">//自动调整窗口大小</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);<span class="comment">//显示窗口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>现在运行，只有一个空空的窗口，一个空空的容器，我们需要往里面放部件<br>想要一个表格，那就放一个表格进去<br><figure class="highlight java"><figcaption><span>KCB.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> kcb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KCB</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();<span class="comment">//声明一个窗口</span></span><br><span class="line">		<span class="type">JTable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTable</span>());<span class="comment">//声明一个表格</span></span><br><span class="line">        frame.add(table);<span class="comment">//把表格放进去</span></span><br><span class="line">        frame.pack();<span class="comment">//自动调整窗口大小</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);<span class="comment">//显示窗口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行一下，还是啥都没有，因为我们还没初始化表格，还没给表格它要的数据  </p>
<p>用JTable类可以以表格的形式显示和编辑数据。<br>JTable类的对象并不存储数据，它只是数据的表现。<br>JTable实现了数据与表现的分离  </p>
<p>新建一个KCBData类，作为表格的数据<br>让这个类实现一个叫TableModel的接口<br><figure class="highlight java"><figcaption><span>KCBData.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> kcb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.event.TableModelListener;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.TableModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KCBData</span> <span class="keyword">implements</span> <span class="title class_">TableModel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRowCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getColumnCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColumnName</span><span class="params">(<span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getColumnClass(<span class="type">int</span> columnIndex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCellEditable</span><span class="params">(<span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValueAt</span><span class="params">(<span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValueAt</span><span class="params">(Object aValue, <span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTableModelListener</span><span class="params">(TableModelListener l)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeTableModelListener</span><span class="params">(TableModelListener l)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>TableModel接口是由JTable提供给我们的<br>TableModel告诉我们，只要实现了它，就能作为数据交给JTable  </p>
<p>完善一下KCBData<br><figure class="highlight java"><figcaption><span>KCBData.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> kcb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.event.TableModelListener;</span><br><span class="line"><span class="keyword">import</span> javax.swing.table.TableModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KCBData</span> <span class="keyword">implements</span> <span class="title class_">TableModel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] title = &#123;<span class="string">&quot;周一&quot;</span>, <span class="string">&quot;周二&quot;</span>, <span class="string">&quot;周三&quot;</span>, <span class="string">&quot;周四&quot;</span>, <span class="string">&quot;周五&quot;</span>, <span class="string">&quot;周六&quot;</span>, <span class="string">&quot;周日&quot;</span>&#125;;<span class="comment">//表格标题</span></span><br><span class="line">    <span class="keyword">private</span> String[][] data = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">8</span>][<span class="number">7</span>];<span class="comment">//真正放7天8节课的数据结构</span></span><br><span class="line">    <span class="comment">//这个data数组里面都是String类型的管理者，所以需要初始化每个管理者去管理一个String类型的空数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KCBData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//构造方法,初始化数据,每一行的数据都是空的,即没有数据,这样才能显示表格,否则会报错</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; data[i].length; j++) &#123;</span><br><span class="line">                data[i][j] = <span class="string">&quot;&quot;</span>;<span class="comment">//让每一个单元格都是空的</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRowCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span>;<span class="comment">//表格有8行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getColumnCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">7</span>;<span class="comment">//表格有7列</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColumnName</span><span class="params">(<span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> title[columnIndex];<span class="comment">//返回一个表头</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getColumnClass(<span class="type">int</span> columnIndex) &#123;</span><br><span class="line">        <span class="keyword">return</span> String.class;<span class="comment">//告诉表格每列的数据类型,每一个都是String类型</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCellEditable</span><span class="params">(<span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//每个单元格都可以编辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValueAt</span><span class="params">(<span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data[rowIndex][columnIndex];<span class="comment">//将每一个单元格的数据返回，让表格拿到</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValueAt</span><span class="params">(Object aValue, <span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        data[rowIndex][columnIndex] = (String) aValue;<span class="comment">//将每一个单元格的数据设置为aValue,即用户输入的数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTableModelListener</span><span class="params">(TableModelListener l)</span> &#123;</span><br><span class="line">        <span class="comment">//添加监听器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeTableModelListener</span><span class="params">(TableModelListener l)</span> &#123;</span><br><span class="line">        <span class="comment">//移除监听器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>现在表格能拿到数据了，它知道该怎么画一个表格<br>但运行一下，还是没有表头  </p>
<p>这是因为JTable组件显示数据时，如果直接将其放置在Frame的contentPane中则表头一行会显示不出来，如果将其放置在JScrollPane中显示数据的话，表头会自动显示出来。<br>暂时无需关心为什么  </p>
<p>再完善下KCB类，一个课程表就完成了<br><figure class="highlight java"><figcaption><span>KCB.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> kcb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KCB</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();<span class="comment">//声明一个窗口</span></span><br><span class="line">        <span class="type">JTable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTable</span>(<span class="keyword">new</span> <span class="title class_">KCBData</span>());<span class="comment">//声明一个表格</span></span><br><span class="line">        <span class="type">JScrollPane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(table);<span class="comment">//声明一个滚动面板</span></span><br><span class="line">        frame.add(pane);<span class="comment">//将滚动面板添加到窗口</span></span><br><span class="line">        frame.pack();<span class="comment">//自动调整窗口大小</span></span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<span class="comment">//设置窗口关闭方式</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);<span class="comment">//显示窗口</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h2><p>刚刚的课程表结构是这样的  </p>
<div><img src=/images/7-16.webp width="85%" height="85%"></div>

<p>当JTable决定显示多少列时会调用getColumnCount，当它要显示表头时会调用getColumnName<br>程序运行过程中JTable反过来调用我们自己的KCBData里的方法  </p>
<p>数据由我们自己实现了TableModel的对象来维护，JTable只管表现不管数据  </p>
<p><strong>MVC</strong>:数据、表现和控制三者分离，各负其责<br>·M=Model（模型)<br>·V=View(表现)<br>·C=Control(控制)  </p>
<p>模型：保存和维护数据，提供接口让外部修改数据，通知表现需要刷新<br>表现：从模型获得数据，根据数据画出表现<br>控制：从用户得到输入，根据输入调整数据  </p>
<div><img src=/images/7-17.webp width="85%" height="85%"></div>

<p>不是由接收到用户输入的代码去修改界面上的显示，而是去修改内部的数据，内部的数据去触发界面的更新  </p>
<p>这样做的好处：每一部分都很单纯，尤其是View表现，只管拿到想要的数据去表现，至于数据是怎么更新，怎么生成的，它统统不管  </p>
<p>在代码实现中，View和Control通常在同个表达界面的类中实现，因为表现和用户控制都是在界面中完成的，这和MVC并不矛盾，只是在具体实现MVC模式时的技巧  </p>
<hr>
<h1 id="Exception异常"><a href="#Exception异常" class="headerlink" title="Exception异常"></a>Exception异常</h1><p>异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。<br>比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。  </p>
<p>写出下面的程序，idea的编辑器不会指出数组越界的错误，但运行程序控制台会抛出异常<br><figure class="highlight java"><figcaption><span>ArrayIndex.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayIndex</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        a[<span class="number">10</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>异常</span></figcaption><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ArrayIndexOutOfBoundsException: Index <span class="number">10</span> out of bounds <span class="keyword">for</span> length <span class="number">10</span></span><br><span class="line">	at ArrayIndex.main(ArrayIndex.java:<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>在main里面有Exception异常，问题出在在ArrayIndex的第四行，问题叫做ArrayIndexOutOfBoundsException，即数组越界  </p>
<h2 id="两种类型的异常与错误"><a href="#两种类型的异常与错误" class="headerlink" title="两种类型的异常与错误"></a>两种类型的异常与错误</h2><p>检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。<br>运行时异常： 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。<br>错误： 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。  </p>
<p>异常和错误的区别：异常能被程序本身可以处理，错误是无法处理。  </p>
<h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>当代码某一处可能出现问题、可能出现异常，就可以将这块代码放在一个用于捕捉异常的代码块中<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 可能出现异常的程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionName e1)<span class="comment">//可以多个catch</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//处理异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionName e2)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//处理异常的代码</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="comment">//无论是否发生异常，finally 代码块中的代码总会被执行。</span></span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。try/catch代码块中的代码称为保护代码  </p>
<p>Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。<br>如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样.  </p>
<p>将刚刚数组越界的代码用捕捉异常处理<br><figure class="highlight java"><figcaption><span>ArrayIndex.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayIndex</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        a[<span class="number">10</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行一下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">error</span><br></pre></td></tr></table></figure></p>
<p>异常是程序运行过程中可能出现的问题，现在这个代码是一定会出错的，我们改造一下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayIndex</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        idx = in.nextInt();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            a[idx] = <span class="number">10</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">输入：<span class="number">2</span></span><br><span class="line">hello</span><br><span class="line">输入：<span class="number">12</span></span><br><span class="line">error</span><br></pre></td></tr></table></figure>
<h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><p>把可能发出异常的代码放到try里，在try后面用catch去匹配可能出现的异常类型。<br>当try里的代码没有异常，catch里的代码不会被运行，当try里的代码出现异常，try里后续的代码都不会被执行，会直接调到catch里，在catch里处理完异常，会继续往下运行整个程序，而不会回到try。<br>当匹配到一个catch之后，异常就已经被处理完了，不会再去匹配另一个异常。  </p>
<p>运行下面的代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayIndex</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        a[<span class="number">10</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            f();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">error</span><br><span class="line">main</span><br></pre></td></tr></table></figure><br>当给数组赋值出现异常后，f方法后面的代码都不会被执行，然后回到调用f方法的地方，try会捕捉到f方法的异常，然后传递给catch  </p>
<p>当有异常被抛出时，可以遵循下面的图来判断该在哪个地方处理这个异常  </p>
<div><img src=/images/7-18.webp width="92%" height="92%"></div>

<figure class="highlight java"><figcaption><span>示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayIndex</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        a[<span class="number">10</span>] = <span class="number">10</span>;<span class="comment">//抛出ArrayIndexOutOfBoundsException异常</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);<span class="comment">//异常后面的代码不会被执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">g</span><span class="params">()</span>&#123;</span><br><span class="line">        f();<span class="comment">//f方法抛出异常，异常没有try捕捉，所处是函数，返回调用者</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">h</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">100</span>)&#123;</span><br><span class="line">            g();<span class="comment">//所处不是函数，跳出一层</span></span><br><span class="line">        &#125;<span class="comment">//异常没有try捕捉，所处是函数，返回调用者</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">k</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            h();<span class="comment">//有try捕捉异常</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(NullPointerException e)&#123;<span class="comment">//没有对应catch匹配，退出到外层</span></span><br><span class="line">            System.out.println(<span class="string">&quot;k error&quot;</span>);</span><br><span class="line">        &#125;<span class="comment">//所处是函数</span></span><br><span class="line">        <span class="comment">//返回调用者</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            k();<span class="comment">//有try捕捉异常</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;<span class="comment">//有对应catch匹配</span></span><br><span class="line">            System.out.println(<span class="string">&quot;error&quot;</span>);<span class="comment">//处理异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">error</span><br><span class="line">main</span><br></pre></td></tr></table></figure>
<h2 id="Java-内置异常类"><a href="#Java-内置异常类" class="headerlink" title="Java 内置异常类"></a>Java 内置异常类</h2><div class="table-container">
<table>
<thead>
<tr>
<th>异常</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ArithmeticException</td>
<td>当出现异常的运算条件时，抛出此异常。例如，一个整数”除以零”时，抛出此类的一个实例</td>
</tr>
<tr>
<td>ArrayIndexOutOfBoundsException</td>
<td>用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引</td>
</tr>
<tr>
<td>ArrayStoreException</td>
<td>试图将错误类型的对象存储到一个对象数组时抛出的异常</td>
</tr>
<tr>
<td>ClassCastException</td>
<td>当试图将对象强制转换为不是实例的子类时，抛出该异常</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>抛出的异常表明向方法传递了一个不合法或不正确的参数</td>
</tr>
<tr>
<td>IllegalMonitorStateException</td>
<td>抛出的异常表明某一线程已经试图等待对象的监视器，或者试图通知其他正在等待对象的监视器而本身没有指定监视器的线程</td>
</tr>
<tr>
<td>IllegalStateException</td>
<td>在非法或不适当的时间调用方法时产生的信号。换句话说，即 Java 环境或 Java 应用程序没有处于请求操作所要求的适当状态下</td>
</tr>
<tr>
<td>IllegalThreadStateException</td>
<td>线程没有处于请求操作所要求的适当状态时抛出的异常</td>
</tr>
<tr>
<td>IndexOutOfBoundsException</td>
<td>指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出</td>
</tr>
<tr>
<td>NegativeArraySizeException</td>
<td>如果应用程序试图创建大小为负的数组，则抛出该异常</td>
</tr>
<tr>
<td>NullPointerException</td>
<td>当应用程序试图在需要对象的地方使用 null 时，抛出该异常</td>
</tr>
<tr>
<td>NumberFormatException</td>
<td>当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常</td>
</tr>
<tr>
<td>SecurityException</td>
<td>由安全管理器抛出的异常，指示存在安全侵犯</td>
</tr>
<tr>
<td>StringIndexOutOfBoundsException</td>
<td>此异常由 String 方法抛出，指示索引或者为负，或者超出字符串的大小</td>
</tr>
<tr>
<td>UnsupportedOperationException</td>
<td>当不支持请求的操作时，抛出该异常</td>
</tr>
<tr>
<td>下面是Java 定义在 java.lang 包中的检查性异常类：</td>
<td></td>
</tr>
<tr>
<td>ClassNotFoundException</td>
<td>应用程序试图加载类时，找不到相应的类，抛出该异常</td>
</tr>
<tr>
<td>CloneNotSupportedException</td>
<td>当调用 Object 类中的 clone 方法克隆对象，但该对象的类无法实现 Cloneable 接口时，抛出该异常</td>
</tr>
<tr>
<td>IllegalAccessException</td>
<td>拒绝访问一个类的时候，抛出该异常</td>
</tr>
<tr>
<td>InstantiationException</td>
<td>当试图使用 Class 类中的 newInstance 方法创建一个类的实例，而指定的类对象因为是一个接口或是一个抽象类而无法实例化时，抛出该异常</td>
</tr>
<tr>
<td>InterruptedException</td>
<td>一个线程被另一个线程中断，抛出该异常</td>
</tr>
<tr>
<td>NoSuchFieldException</td>
<td>请求的变量不存在</td>
</tr>
<tr>
<td>NoSuchMethodException</td>
<td>请求的方法不存在</td>
</tr>
</tbody>
</table>
</div>
<h2 id="异常方法"><a href="#异常方法" class="headerlink" title="异常方法"></a>异常方法</h2><p>当catch匹配到了异常，实际上是拿到了一个异常类型的对象，我们可以让对象做事情<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">a</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            a[<span class="number">10</span>] = <span class="number">20</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(e);</span><br><span class="line">            System.out.println();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">error</span><br><span class="line">Index <span class="number">10</span> out of bounds <span class="keyword">for</span> length <span class="number">10</span></span><br><span class="line"></span><br><span class="line">java.lang.ArrayIndexOutOfBoundsException: Index <span class="number">10</span> out of bounds <span class="keyword">for</span> length <span class="number">10</span></span><br><span class="line"></span><br><span class="line">java.lang.ArrayIndexOutOfBoundsException: Index <span class="number">10</span> out of bounds <span class="keyword">for</span> length <span class="number">10</span></span><br><span class="line">	at a.main(a.java:<span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>异常方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>String getMessage()</td>
<td>返回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了</td>
</tr>
<tr>
<td>Throwable getCause()</td>
<td>返回一个 Throwable 对象代表异常原因</td>
</tr>
<tr>
<td>String toString()</td>
<td>返回此 Throwable 的简短描述</td>
</tr>
<tr>
<td>void printStackTrace()</td>
<td>将此 Throwable 及其回溯打印到标准错误流</td>
</tr>
<tr>
<td>StackTraceElement [] getStackTrace()</td>
<td>返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底</td>
</tr>
<tr>
<td>Throwable fillInStackTrace()</td>
<td>用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中</td>
</tr>
</tbody>
</table>
</div>
<h2 id="throw再度抛出"><a href="#throw再度抛出" class="headerlink" title="throw再度抛出"></a>throw再度抛出</h2><p>当一个异常已经被处理了，将不会再次被捕捉<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayIndex</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">k</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">            a[<span class="number">10</span>] = <span class="number">10</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;<span class="comment">//k中已经处理了异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;k error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            k();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;<span class="comment">//不会再次处理</span></span><br><span class="line">            System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">k error</span><br><span class="line">main</span><br></pre></td></tr></table></figure><br>但可以通过throw主动地再次抛出这个异常<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayIndex</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">k</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">            a[<span class="number">10</span>] = <span class="number">10</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;k error&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> e;<span class="comment">//捕捉到后在此抛出该异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            k();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">k error</span><br><span class="line">error</span><br><span class="line">main</span><br></pre></td></tr></table></figure></p>
<h2 id="为什么要异常机制"><a href="#为什么要异常机制" class="headerlink" title="为什么要异常机制"></a>为什么要异常机制</h2><p>我们希望程序能够根据运行过程中可能出现的各种情况进行处理<br>早期，函数都有特定的返回值，通过函数内很多的if-else来判断返回什么，以返回值来做相应处理  </p>
<p>函数内出现很多与功能无关的if-else，会导致函数可读性很差，而且不利于增加新的功能<br>异常机制将业务逻辑与异常处理在代码上分开<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//业务逻辑都放在一起</span></span><br><span class="line">    open the file;</span><br><span class="line">    determine its size;</span><br><span class="line">    allocate that much memory;</span><br><span class="line">    read the file into memory;</span><br><span class="line">    close the file;</span><br><span class="line">    <span class="comment">//如果上面的业务逻辑出了问题，就用下面的catch去处理对应的问题</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(fileOpenFailed)&#123;</span><br><span class="line">    doSomething;</span><br><span class="line">&#125;<span class="keyword">catch</span>(sizeDeterminationFailed)&#123;</span><br><span class="line">    doSomething;</span><br><span class="line">&#125;<span class="keyword">catch</span>(memoryAllocationFailed )&#123;</span><br><span class="line">    doSomething;</span><br><span class="line">&#125;<span class="keyword">catch</span>(readFailed )&#123;</span><br><span class="line">    doSomething;</span><br><span class="line">&#125;<span class="keyword">catch</span>(fileCloseFailed )&#123;</span><br><span class="line">    doSomething;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>异常机制最大的好处就是清晰地分开了正常的业务逻辑代码和遇到情况时的处理代码  </p>
<h2 id="异常的抛出和声明"><a href="#异常的抛出和声明" class="headerlink" title="异常的抛出和声明"></a>异常的抛出和声明</h2><p>在Java中可以自定义异常。<br>1、所有异常都必须是 Throwable 的子类。<br>2、如果希望写一个检查性异常类，则需要继承 Exception 类。<br>3、如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。<br>RuntimeException继承自Exception  </p>
<figure class="highlight java"><figcaption><span>声明一个异常类型</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>声明一个可能会抛出异常的方法</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> <span class="keyword">throws</span> MyException&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>();<span class="comment">//抛出一个MyException异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所有调用这个方法的地方都必须套上try-catch，来处理可能发生的异常<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        f();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(MyException e)&#123;<span class="comment">//必须catch该方法会抛出的异常类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以声明并不会真的抛出的异常,但调用该方法的地方必须处理全部可能抛出的异常<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> <span class="keyword">throws</span> MyException,YouException&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>();<span class="comment">//抛出一个MyException异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        f();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(MyException e)&#123;<span class="comment">//必须catch该方法会抛出的异常类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MyError&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(YouException e)&#123;<span class="comment">//必须catch该方法会抛出的异常类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;YouError&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>任何继承了Throwable类的对象都可以被throw<br>Exception类继承了Throwable，我们通常让自定义的异常类从Exception类得到继承  </p>
<figure class="highlight java"><figcaption><span>Exception类的两种构造</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们在自定义异常类时也通常会有这两种构造</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();  </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;HELP&quot;</span>);<span class="comment">//可以用这个字符串来表达一些东西  </span></span><br></pre></td></tr></table></figure>
<h2 id="catch的匹配机制"><a href="#catch的匹配机制" class="headerlink" title="catch的匹配机制"></a>catch的匹配机制</h2><p>抛出子类的异常会被捕捉父类异常的catch给捉到<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明两个异常类，YouException继承自MyException</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YouException</span> <span class="keyword">extends</span> <span class="title class_">MyException</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> <span class="keyword">throws</span> MyException, YouException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">YouException</span>();<span class="comment">//抛出一个YouException异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">YouException</span>();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(MyException e)&#123;<span class="comment">//MyException匹配到了它的子类YouException</span></span><br><span class="line">            System.out.println(<span class="string">&quot;YouException&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果同时捕捉父类子类两个异常，子类catch要写在父类前面，否则会报错<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">YouException</span>();</span><br><span class="line">&#125;<span class="keyword">catch</span>(YouException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;YouException&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MyException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;YouException&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>捕捉任何异常<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="运行时刻异常"><a href="#运行时刻异常" class="headerlink" title="运行时刻异常"></a>运行时刻异常</h3><p>像ArrayIndexOutOfBoundsException这样java本身提供的异常是不需要声明的，如果需要去声明这些异常，那么每个方法都将带上一长串的声明<br>但是如果没有适当的机制来捕捉，就会最终导致程序终止  </p>
<h2 id="异常遇到继承"><a href="#异常遇到继承" class="headerlink" title="异常遇到继承"></a>异常遇到继承</h2><p>当覆盖一个方法的时候，子类不能声明抛出比父类的版本更多的异常<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YouException</span> <span class="keyword">extends</span> <span class="title class_">MyException</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> <span class="keyword">throws</span> MyException &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewClass</span> <span class="keyword">extends</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="comment">//NewClass&#x27;中的f()&#x27;与&#x27;a&#x27;中的&#x27;f()&#x27;冲突；重写的方法未抛出NewException&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> <span class="keyword">throws</span> NewException &#123;&#125;</span><br><span class="line">    <span class="comment">//正确的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> <span class="keyword">throws</span> YouException &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> <span class="keyword">throws</span> MyException &#123;&#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在子类的构造方法中，必须声明父类可能抛出的全部异常，可以抛出更多异常,可以是父类抛出异常的父类异常<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YouException</span> <span class="keyword">extends</span> <span class="title class_">MyException</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">a</span><span class="params">()</span> <span class="keyword">throws</span> YouException&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewClass</span> <span class="keyword">extends</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//允许</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NewClass</span><span class="params">()</span> <span class="keyword">throws</span> YouException&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NewClass</span><span class="params">()</span> <span class="keyword">throws</span> MyException&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NewClass</span><span class="params">()</span> <span class="keyword">throws</span> MyException,NewException&#123;&#125;</span><br><span class="line">    <span class="comment">//不允许</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NewClass</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NewClass</span><span class="params">()</span> <span class="keyword">throws</span> NewException&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h1><p>任何程序都有输入输出，会向用户那读点东西，也会向用户那输出点东西<br>所以，任何一个编程语言都给程序员提供了输入输出的方式，让这个程序可以和外界打交道  </p>
<p>对于java语言，以及之后的新语言，处理输入输出的手段叫做<strong>流</strong>  </p>
<p>流是一个抽象、动态的概念，是一连串连续动态的数据集合。<br>流给数据源和程序之间提供了数据信息传输的通道，编程语言提供了多种流用于数据传输  </p>
<h2 id="Hallo-World"><a href="#Hallo-World" class="headerlink" title="Hallo World"></a>Hallo World</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个程序就用到了输出流，把Hallo World输出给用户看<br><strong>System</strong>是一个类，<strong>out</strong>是这个类的一个静态成员，<strong>println</strong>是这个成员能做的事情<br>实际上，<strong>out</strong>这个成员就是用于做输出的流  </p>
<h2 id="流的基础"><a href="#流的基础" class="headerlink" title="流的基础"></a>流的基础</h2><p>在java的基础类库中，所有的输出都基于<strong>OutputStream</strong>类，所有的输入都基于<strong>InputStream</strong>类，这两个类构成了输入和输出的基础  </p>
<p>但这两个类是抽象的，具体使用时应该用它们的子类<br>在这里可以看到java系统类库中所有的包<a href="https://docs.oracle.com/en/java/javase/18/docs/api/index.html">Java®平台、标准版和Java开发工具包第18版API规范</a><br>在其中的java.base中有<a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/io/package-summary.html">java.io</a>，这里面有java输入输出所有相关的东西<br>在里面可以找到<strong>InputStream</strong>和<strong>OutputStream</strong>类，当然这里面还有很多的类，以及其它的东西  </p>
<p>点击InputStream，可以看到这个类的描述，以及它所有的方法  </p>
<div><img src=/images/7-19.webp width="100%" height="100%"></div>

<p><strong>InputStream</strong>把外界的输入当做<strong>字节</strong>的流来看待，<strong>OutputStream</strong>也同理，当我们使用这两个类，只能做字节层面上的读和写  </p>
<p>尝试一下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">//一个1k字节的butter</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//让系统读取输入流，并将读取到的内容存储到buffer中，返回读取到的字节数</span></span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//所有io的操作都存在风险，所以要捕获异常</span></span><br><span class="line">            len = System.in.read(buffer);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len);<span class="comment">//将buffer中从0开始到len的这么多个字节构造一个字符串</span></span><br><span class="line">            System.out.println(<span class="string">&quot;读到了：&quot;</span>+len+<span class="string">&quot;字节&quot;</span>);<span class="comment">//输出读取到的字节数</span></span><br><span class="line">            System.out.println(s);<span class="comment">//输出字符串</span></span><br><span class="line">            System.out.println(<span class="string">&quot;s的长度：&quot;</span>+s.length());<span class="comment">//输出字符串有多少个字符</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">输入:123abc</span><br><span class="line">读到了：<span class="number">7</span>字节</span><br><span class="line">123abc</span><br><span class="line"></span><br><span class="line">s的长度：<span class="number">7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>123abc是6个字节，但后面还有个回车，所以读到7个字节，且输出s时，把回车也输出了  </p>
<p>换个输入：<br><figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">输入：<span class="number">123</span>汉字abc</span><br><span class="line">读到了：<span class="number">13</span>字节</span><br><span class="line"><span class="number">123</span>汉字abc</span><br><span class="line"></span><br><span class="line">s的长度：<span class="number">9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>在UTF-8编码中,一个中文字符等于三个字节，所以一共读到13个字节  </p>
<h2 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h2><p><strong>System.in</strong>和<strong>System.in</strong>是标准输入和标准输出的流<br>如果想要直接写文件，就需要使用到<strong>文件流</strong>：<strong>FileInputStream</strong>、<strong>FileOutputStream</strong>  </p>
<p>实际工程中已经较少直接对文件进行读写（除了在造轮子）<br>更常用的是以在内存数据或通信数据上建立的流，如数据库的二进制数据读写或网络端口通信<br>具体的文件读写往往有更专业的类，比如配置文件和日志文件  </p>
<p>尝试一下<strong>FileOutputStream</strong>：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];<span class="comment">//10个字节的数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;buf.length; i++)&#123;</span><br><span class="line">            buf[i] = (<span class="type">byte</span>)i;<span class="comment">//让buf中的每个元素都是i，而且是byte类型</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.dat&quot;</span>);<span class="comment">//如果文件不存在，则创建，存在则覆盖</span></span><br><span class="line">            out.write(buf);<span class="comment">//将buf中的数据写入文件</span></span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>用<strong>Hexdump</strong>打开这个16进制文件<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  Offset: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 	</span><br><span class="line">00000000: 00 01 02 03 04 05 06 07 08 09                      ..........</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>1到9都已经被写入  </p>
<h2 id="流过滤器"><a href="#流过滤器" class="headerlink" title="流过滤器"></a>流过滤器</h2><p>无论是System.in和out还是文件流，都只能处理单个字节，一个个字节地读，一个个字节地写<br>如果要把一个10进制地整数写入到一个文件中，就要同时读写4个字节，显然前面介绍的流无法做到  </p>
<p><strong>流过滤器</strong>可以在已存在的流的基础上，去增加一层层的过滤器，每一层的过滤器都可以做点事情，其中一些过滤器就可以做int、double这些基础类型数据的读和写  </p>
<p>尝试一下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];<span class="comment">//10个字节的数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;buf.length; i++)&#123;</span><br><span class="line">            buf[i] = (<span class="type">byte</span>)i;<span class="comment">//让buf中的每个元素都是i，而且是byte类型</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="comment">//缓冲输出流</span></span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.dat&quot;</span>)));</span><br><span class="line">            <span class="comment">//打开这个文件之后，在上面接了一个缓冲流，缓冲流外面还有一个流，最终得到的是一个DataOutputStream的对象</span></span><br><span class="line">            <span class="comment">//我们可以往DataOutputStream这个流里面写入数据，数据会被缓冲到缓冲流里面，缓冲流里面的数据会被写入到文件里面</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0xcafebabe</span>;</span><br><span class="line">            out.writeInt(i);<span class="comment">//写入一个int类型的数据,DataOutputStream流的writeInt方法可以写入一个int类型的数据</span></span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  Offset: <span class="number">00</span> <span class="number">01</span> <span class="number">02</span> <span class="number">03</span> <span class="number">04</span> <span class="number">05</span> <span class="number">06</span> <span class="number">07</span> 08 09 0A 0B 0C <span class="number">0D</span> 0E <span class="number">0F</span> 	</span><br><span class="line"><span class="number">00000000</span>: CA FE BA BE                                        J~:&gt;</span><br></pre></td></tr></table></figure><br>0xcafebabe这个16进制数已经被写入<br><figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">-<span class="number">889275714</span></span><br></pre></td></tr></table></figure><br>0xcafebabe这个16进制的数对应的10进制数是-889275714  </p>
<p>每一层过滤器都可以起到一定的作用，在上面的程序中，BufferedOutputStream起到了缓冲垫作用，DataOutputStream起到了读写基本数据类型的作用  </p>
<h2 id="文本的输入和输出"><a href="#文本的输入和输出" class="headerlink" title="文本的输入和输出"></a>文本的输入和输出</h2><p>加上了DataOutputStream也只能以二进制处理基本数据类型，如何处理文本？  </p>
<p>二进制数据采用InputStream/OutputStream<br>文本数据采用Reader/Writer  </p>
<p>但Reader/Writer本身是处理Unicode编码的字符的，如果文件是Unicode编码，可以直接用Reader/Writer处理文件，但一般情况下，文件本身并不是Unicode编码，它可能是GBK，可能是UTF-8<br>在这种情况下，我们需要借助Stream，用字节形式打开文件，再在Stream流的基础上，用过滤器的方式去建立Reader/Writer ，来做文本的输入和输出，<strong>StreamReader</strong>可以将字节流转换为字符流，然后交给Reader/Writer，当然中间可以加上Buffered实现缓冲  </p>
<p>尝试一下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];<span class="comment">//10个字节的数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;buf.length; i++)&#123;</span><br><span class="line">            buf[i] = (<span class="type">byte</span>)i;<span class="comment">//让buf中的每个元素都是i，而且是byte类型</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="comment">//创建一个输出流,PrintWriter可以通过连接BufferedWriter实现的缓冲功能</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="comment">//创建一个缓冲流</span></span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="comment">//将字节流转换为字符流</span></span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.txt&quot;</span>))));<span class="comment">//创建一个文件输出流</span></span><br><span class="line">            <span class="comment">//我们做了一个文件流，但它只能处理字节</span></span><br><span class="line">            <span class="comment">// 在此基础上再做一个桥梁：OutputStreamWriter</span></span><br><span class="line">            <span class="comment">// 它构建起了Stream和Writer的桥梁，它的输入是OutputStream，输出是Writer</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">123456</span>;</span><br><span class="line">            out.println(i);<span class="comment">//在PrintWriter的基础上，我们可以用println方法来输出数据</span></span><br><span class="line">            out.close();</span><br><span class="line">            <span class="comment">//和上面输出一样，如果要读取一个文件，我们需要做一个桥梁：InputStreamReader</span></span><br><span class="line">            <span class="comment">//它构建起了Stream和Reader的桥梁，它的输入是InputStream，输出是Reader</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="comment">// BufferedReader类从字符输入流中读取文本并缓冲字符</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="comment">//将字节流转换为字符流</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/test.java&quot;</span>)));<span class="comment">//创建一个文件输入流，打开这个程序的源码文件</span></span><br><span class="line">            <span class="comment">//readLine()方法从字符输入流中读取一行，并返回该行。</span></span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>)&#123;<span class="comment">//当读取到的行不为空时，执行循环，就可以读取整个文件</span></span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行：在a.tet文件中有123456字符,控制台也将这整个源码输出了出来  </p>
<p>除了BufferedReader，还有LineNumberReader，里面的getLineNumber()可以读取指定的行  </p>
<p><strong>FileReader</strong>是InputStreamReader类的子类，所有方法都从父类中继承而来，它可以直接读取一个二进制文件，建立起一个流，然后形成一个Reader<br>FileReader(File file)在给定从中读取数据的Fe的情况下创建一个新FileReader<br>FileReader(String fileName)在给定从中读取数据的文件名的情况下创建一个新FileReader<br>FileReader不能指定编码转换方式  </p>
<h2 id="汉字编码问题"><a href="#汉字编码问题" class="headerlink" title="汉字编码问题"></a>汉字编码问题</h2><p>FileOutputStream(“a.txt”)可以以二进制形式打开一个文件<br>OutputStreamWriter(FileOutputStream(“a.txt”))将字节流转换为字符流,如果不指定编码，那么它优先使用程序源码文件的编码去转换这个字节流为字符流，这就很容易导致汉字乱码  </p>
<p>我们可以指定编码进行转换OutputStreamWriter(FileOutputStream(“a.txt”),”utf8”)<br>用utf8去将这个字节流转换成字符流 </p>
<p>当然还有其它方法，这里不展开讲</p>
<h2 id="格式化输入输出"><a href="#格式化输入输出" class="headerlink" title="格式化输入输出"></a>格式化输入输出</h2><p>格式化输出：使用printf(“格式”, );用法和C语言的基本一样，这里不展开讲，博主同样有篇C语言学习笔记  </p>
<p>格式化输入：如果想从一个文本中读取出一些数字，可以在流上构建一个Scanner，然后用next系列的方法去读取数字、单词等等  </p>
<h2 id="Stream-Reader-Scanner的选择"><a href="#Stream-Reader-Scanner的选择" class="headerlink" title="Stream/Reader/Scanner的选择"></a>Stream/Reader/Scanner的选择</h2><div><img src=/images/7-20.webp width="92%" height="92%"></div>

<h2 id="流的应用"><a href="#流的应用" class="headerlink" title="流的应用"></a>流的应用</h2><p>现在已经很少有程序需要用流的方式去打开一个文件，裸地去进行文件读和写的操作，更多地是从某个地方得到了一个流  </p>
<h3 id="服务器通信"><a href="#服务器通信" class="headerlink" title="服务器通信"></a>服务器通信</h3><p>下面这个程序将从本地服务器得到一个流，并向这个流写入东西<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">socket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>), <span class="number">12345</span>);<span class="comment">//创建一个Socket对象，指定服务器地址和端口号</span></span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(</span><br><span class="line">                                    <span class="comment">//getOutputStream()方法获取Socket对象的输出流，并构造一个BufferedWriter对象</span></span><br><span class="line">                                    socket.getOutputStream())));<span class="comment">//创建一个PrintWriter对象，用于向服务器发送信息</span></span><br><span class="line">            out.println(<span class="string">&quot;Hello, world!&quot;</span>);<span class="comment">//向服务器发送一行文本</span></span><br><span class="line">            out.close();<span class="comment">//关闭PrintWriter对象</span></span><br><span class="line">            socket.close();<span class="comment">//关闭Socket对象</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>当然，直接运行这个程序一定报错，因为本地没有任何服务器程序在12345端口上听着，连接建立不起来  </p>
<p>使用netcat可以实现监听<br>从<a href="https://eternallybored.org/misc/netcat/">netcat</a>下载netcat1.12<br>解压后把nc.exe移动到C:\Windows\System32目录，压缩包内其它东西用不上<br>然后打开cmd，运行nc -l -p -12345</p>
<p>现在再运行程序，cmd窗口就会输出Hello, world!  </p>
<p>还可以接收服务端的数据<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">socket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>), <span class="number">12345</span>);<span class="comment">//创建一个Socket对象，指定服务器地址和端口号</span></span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(</span><br><span class="line">                                    <span class="comment">//getOutputStream()方法获取Socket对象的输出流，并构造一个BufferedWriter对象</span></span><br><span class="line">                                    socket.getOutputStream())));<span class="comment">//创建一个PrintWriter对象，用于向服务器发送信息</span></span><br><span class="line">            out.println(<span class="string">&quot;Hello, world!&quot;</span>);<span class="comment">//向服务器发送一行文本</span></span><br><span class="line">            out.flush();<span class="comment">//刷新缓冲区，将缓冲区中的数据立即发送出去</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(</span><br><span class="line">                            <span class="comment">//getInputStream()方法获取Socket对象的输入流，并构造一个BufferedReader对象</span></span><br><span class="line">                            socket.getInputStream()));<span class="comment">//创建一个BufferedReader对象，用于接收服务器端的信息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> in.readLine();<span class="comment">//读取服务器端的一行文本</span></span><br><span class="line">            System.out.println(line);<span class="comment">//输出读取的文本</span></span><br><span class="line">            out.close();<span class="comment">//关闭PrintWriter对象</span></span><br><span class="line">            socket.close();<span class="comment">//关闭Socket对象</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在cmd窗口输入任意文本，idea的控制台也会输出这个文本  </p>
<h3 id="对象串行化"><a href="#对象串行化" class="headerlink" title="对象串行化"></a>对象串行化</h3><p>写入和读取一个对象，使用ObjectOutputStream和ObjectInputStream，被读写的类要实现Serializable接口<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;<span class="comment">//可以串行化的类</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">int</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student: &quot;</span> + name + <span class="string">&quot; &quot;</span> + age+ <span class="string">&quot; &quot;</span> + grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">chh</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;obj.dat&quot;</span>));</span><br><span class="line">            out.writeObject(s1);</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;obj.dat&quot;</span>));</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> (Student) in.readObject();</span><br><span class="line">            System.out.println(s2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>obj.bat</span></figcaption><table><tr><td class="code"><pre><span class="line">  Offset: <span class="number">00</span> <span class="number">01</span> <span class="number">02</span> <span class="number">03</span> <span class="number">04</span> <span class="number">05</span> <span class="number">06</span> <span class="number">07</span> 08 09 0A 0B 0C <span class="number">0D</span> 0E <span class="number">0F</span> 	</span><br><span class="line"><span class="number">00000000</span>: AC ED <span class="number">00</span> <span class="number">05</span> <span class="number">73</span> <span class="number">72</span> <span class="number">00</span> <span class="number">07</span> <span class="number">53</span> <span class="number">74</span> <span class="number">75</span> <span class="number">64</span> <span class="number">65</span> 6E <span class="number">74</span> <span class="number">98</span>    ,m..sr..Student.</span><br><span class="line"><span class="number">00000010</span>: <span class="number">61</span> <span class="number">28</span> <span class="number">66</span> C5 BE <span class="number">55</span> BC <span class="number">02</span> <span class="number">00</span> <span class="number">03</span> <span class="number">49</span> <span class="number">00</span> <span class="number">03</span> <span class="number">61</span> <span class="number">67</span> <span class="number">65</span>    a(fE&gt;U&lt;...I..age</span><br><span class="line"><span class="number">00000020</span>: <span class="number">49</span> <span class="number">00</span> <span class="number">05</span> <span class="number">67</span> <span class="number">72</span> <span class="number">61</span> <span class="number">64</span> <span class="number">65</span> 4C <span class="number">00</span> <span class="number">04</span> 6E <span class="number">61</span> <span class="number">6D</span> <span class="number">65</span> <span class="number">74</span>    I..gradeL..namet</span><br><span class="line"><span class="number">00000030</span>: <span class="number">00</span> <span class="number">12</span> 4C 6A <span class="number">61</span> <span class="number">76</span> <span class="number">61</span> <span class="number">2F</span> 6C <span class="number">61</span> 6E <span class="number">67</span> <span class="number">2F</span> <span class="number">53</span> <span class="number">74</span> <span class="number">72</span>    ..Ljava/lang/Str</span><br><span class="line"><span class="number">00000040</span>: <span class="number">69</span> 6E <span class="number">67</span> 3B <span class="number">78</span> <span class="number">70</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">14</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">74</span> <span class="number">00</span>    ing;xp........t.</span><br><span class="line"><span class="number">00000050</span>: 08 7A <span class="number">68</span> <span class="number">61</span> 6E <span class="number">67</span> <span class="number">73</span> <span class="number">61</span> 6E                         .zhangsan</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>输出</span></figcaption><table><tr><td class="code"><pre><span class="line">Student: zhangsan <span class="number">20</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>完结撒花！<br>javase的学习暂且告一段落，但学习的步伐永不停歇<br>翁恺老师讲的课循序渐进，简洁明了，好评，但课程上只学到流，刚步入javase的高级部分<br>后面还有一个重要部分：线程<br>过段时间实操一个java的管理系统（万物起源管理系统），暂且咕咕咕吧</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>基于UptimeRobot的监控面板</title>
    <url>/article/8f1fedc5.html</url>
    <content><![CDATA[<blockquote>
<p>演示：<a href="https://status.chuckle.top/">轻笑的网站监控面板</a></p>
</blockquote>
<h1 id="注册UptimeRobot"><a href="#注册UptimeRobot" class="headerlink" title="注册UptimeRobot"></a>注册UptimeRobot</h1><p>填写邮箱以完成注册  </p>
<blockquote>
<p><a href="https://uptimerobot.com/signUp?ref=website-header">跳转至注册</a></p>
</blockquote>
<h1 id="新建监视器"><a href="#新建监视器" class="headerlink" title="新建监视器"></a>新建监视器</h1><p>点击左上角Add New Monitor  </p>
<div><img src=/images/9-1.webp width="70%" height="70%"></div>

<p>在弹出窗口填写需要需要监控的站点的相关信息  </p>
<div><img src=/images/9-2.webp width="70%" height="70%"></div>

<p>点击Create Monitor完成创建   </p>
<h1 id="创建API密钥"><a href="#创建API密钥" class="headerlink" title="创建API密钥"></a>创建API密钥</h1><p>点击My Settings</p>
<div><img src=/images/9-3.webp width="70%" height="70%"></div>
为监视器创建一个api密钥（也可选择第三个，为所有监视器创建一个密钥）  
<div><img src=/images/9-4.webp width="70%" height="70%"></div>

<h1 id="fork监控面板仓库"><a href="#fork监控面板仓库" class="headerlink" title="fork监控面板仓库"></a>fork监控面板仓库</h1><p>选择其中一个fork<br><a href="https://github.com/yb/uptime-status">yb/uptime-status</a><br><a href="https://github.com/Ice-Hazymoon/status">Ice-Hazymoon/status</a>  </p>
<h1 id="修改config-js"><a href="#修改config-js" class="headerlink" title="修改config.js"></a>修改config.js</h1><p>进入刚fork的仓库，打开/public/config.js<br>添加监视器的api密钥  </p>
<blockquote>
<p>需要监控的站点较多，也可为所有监控器创建一个api密钥填入</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ApiKeys: [</span><br><span class="line">   &#x27;在这里粘贴api密钥&#x27;,</span><br><span class="line"> ],</span><br></pre></td></tr></table></figure>
<blockquote>
<p>还可以选择在ApiDomain修改自定义反代域名，详见<a href="https://github.com/yb/uptime-status/">https://github.com/yb/uptime-status/</a></p>
</blockquote>
<h1 id="vercel部署"><a href="#vercel部署" class="headerlink" title="vercel部署"></a>vercel部署</h1><p>新建一个项目<br>import监控面板仓库<br>等待几分钟创建完成，点击vist，一个监控面板就完成了  </p>
<div><img src=/images/9-5.webp width="70%" height="70%"></div>

<div><img src=/images/9-6.webp width="70%" height="70%"></div>

]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
